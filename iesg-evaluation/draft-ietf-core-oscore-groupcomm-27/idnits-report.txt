idnits 2.17.1 

draft-ietf-core-oscore-groupcomm-27.txt:
-(6): Line appears to be too long, but this could be caused by non-ascii characters in UTF-8 encoding
-(8): Line appears to be too long, but this could be caused by non-ascii characters in UTF-8 encoding

  Showing Errors (**), Flaws (~~), Warnings (==), and Comments (--).
  Errors MUST be fixed before draft submission.  Flaws SHOULD be fixed before draft submission.

  Checking boilerplate required by RFC 5378 and the IETF Trust (see
  https://trustee.ietf.org/license-info):
  ----------------------------------------------------------------------------

     No issues found here.

  Checking nits according to https://www.ietf.org/id-info/1id-guidelines.txt:
  ----------------------------------------------------------------------------

  == There are 18 instances of lines with non-ascii characters in the
     document.


  Running in submission checking mode -- *not* checking nits according to
  https://www.ietf.org/id-info/checklist .
  ----------------------------------------------------------------------------


     Summary: 0 errors (**), 0 flaws (~~), 1 warning (==), 0 comments (--).

--------------------------------------------------------------------------------


2	CoRE Working Group                                             M. Tiloca
3	Internet-Draft                                                   RISE AB
4	Intended status: Standards Track                             G. Selander
5	Expires: 16 March 2026                                      F. Palombini
6	                                                       J. Preuß Mattsson
7	                                                             Ericsson AB
8	                                                              R. Höglund
9	                                                                 RISE AB
10	                                                       12 September 2025

12	   Group Object Security for Constrained RESTful Environments (Group
13	                                OSCORE)
14	                  draft-ietf-core-oscore-groupcomm-27

16	Abstract

18	   This document defines the security protocol Group Object Security for
19	   Constrained RESTful Environments (Group OSCORE), providing end-to-end
20	   security of messages exchanged with the Constrained Application
21	   Protocol (CoAP) between members of a group, e.g., sent over IP
22	   multicast.  In particular, the described protocol defines how OSCORE
23	   is used in a group communication setting to provide source
24	   authentication for CoAP group requests, sent by a client to multiple
25	   servers, and for protection of the corresponding CoAP responses.
26	   Group OSCORE also defines a pairwise mode where each member of the
27	   group can efficiently derive a symmetric pairwise key with each other
28	   member of the group for pairwise OSCORE communication.  Group OSCORE
29	   can be used between endpoints communicating with CoAP or CoAP-
30	   mappable HTTP.

32	About This Document

34	   This note is to be removed before publishing as an RFC.

36	   Status information for this document may be found at
37	   https://datatracker.ietf.org/doc/draft-ietf-core-oscore-groupcomm/.

39	   Discussion of this document takes place on the Constrained RESTful
40	   Environments (core) Working Group mailing list
41	   (mailto:core@ietf.org), which is archived at
42	   https://mailarchive.ietf.org/arch/browse/core/.  Subscribe at
43	   https://www.ietf.org/mailman/listinfo/core/.

45	   Source for this draft and an issue tracker can be found at
46	   https://github.com/core-wg/oscore-groupcomm.

48	Status of This Memo

50	   This Internet-Draft is submitted in full conformance with the
51	   provisions of BCP 78 and BCP 79.

53	   Internet-Drafts are working documents of the Internet Engineering
54	   Task Force (IETF).  Note that other groups may also distribute
55	   working documents as Internet-Drafts.  The list of current Internet-
56	   Drafts is at https://datatracker.ietf.org/drafts/current/.

58	   Internet-Drafts are draft documents valid for a maximum of six months
59	   and may be updated, replaced, or obsoleted by other documents at any
60	   time.  It is inappropriate to use Internet-Drafts as reference
61	   material or to cite them other than as "work in progress."

63	   This Internet-Draft will expire on 16 March 2026.

65	Copyright Notice

67	   Copyright (c) 2025 IETF Trust and the persons identified as the
68	   document authors.  All rights reserved.

70	   This document is subject to BCP 78 and the IETF Trust's Legal
71	   Provisions Relating to IETF Documents (https://trustee.ietf.org/
72	   license-info) in effect on the date of publication of this document.
73	   Please review these documents carefully, as they describe your rights
74	   and restrictions with respect to this document.  Code Components
75	   extracted from this document must include Revised BSD License text as
76	   described in Section 4.e of the Trust Legal Provisions and are
77	   provided without warranty as described in the Revised BSD License.

79	Table of Contents

81	   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   5
82	     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   8
83	   2.  Security Context  . . . . . . . . . . . . . . . . . . . . . .   9
84	     2.1.  Common Context  . . . . . . . . . . . . . . . . . . . . .  12
85	       2.1.1.  AEAD Algorithm  . . . . . . . . . . . . . . . . . . .  12
86	       2.1.2.  HKDF Algorithm  . . . . . . . . . . . . . . . . . . .  12
87	       2.1.3.  ID Context  . . . . . . . . . . . . . . . . . . . . .  13
88	       2.1.4.  Common IV . . . . . . . . . . . . . . . . . . . . . .  13
89	       2.1.5.  Authentication Credential Format  . . . . . . . . . .  13
90	       2.1.6.  Group Manager Authentication Credential . . . . . . .  13
91	       2.1.7.  Group Encryption Algorithm  . . . . . . . . . . . . .  13
92	       2.1.8.  Signature Algorithm . . . . . . . . . . . . . . . . .  14
93	       2.1.9.  Signature Encryption Key  . . . . . . . . . . . . . .  14
94	       2.1.10. Pairwise Key Agreement Algorithm  . . . . . . . . . .  15
95	     2.2.  Sender Context and Recipient Context  . . . . . . . . . .  15
96	     2.3.  Establishment of Security Context Parameters  . . . . . .  16
97	     2.4.  Authentication Credentials  . . . . . . . . . . . . . . .  17
98	     2.5.  Pairwise Keys . . . . . . . . . . . . . . . . . . . . . .  19
99	       2.5.1.  Derivation of Pairwise Keys . . . . . . . . . . . . .  19
100	       2.5.2.  ECDH with Montgomery Coordinates  . . . . . . . . . .  21
101	       2.5.3.  Usage of Sequence Numbers . . . . . . . . . . . . . .  22
102	       2.5.4.  Security Context for Pairwise Mode  . . . . . . . . .  22
103	     2.6.  Update of Security Context  . . . . . . . . . . . . . . .  23
104	       2.6.1.  Loss of the Varying Part of the Security Context  . .  23
105	       2.6.2.  Exhaustion of Sender Sequence Number Space  . . . . .  25
106	       2.6.3.  Retrieving New Security Context Parameters  . . . . .  26
107	   3.  The COSE Object . . . . . . . . . . . . . . . . . . . . . . .  28
108	     3.1.  Countersignature  . . . . . . . . . . . . . . . . . . . .  28
109	       3.1.1.  Clarifications on Using a Countersignature  . . . . .  29
110	     3.2.  The 'kid' and 'kid context' parameters  . . . . . . . . .  29
111	     3.3.  Nonce Computation . . . . . . . . . . . . . . . . . . . .  29
112	     3.4.  Additional Authenticated Data . . . . . . . . . . . . . .  30
113	   4.  OSCORE Header Compression . . . . . . . . . . . . . . . . . .  32
114	     4.1.  Encoding of the OSCORE Option Value and Group OSCORE
115	           Payload . . . . . . . . . . . . . . . . . . . . . . . . .  33
116	     4.2.  Keystream Derivation for Countersignature Encryption  . .  33
117	     4.3.  Examples of Compressed COSE Objects . . . . . . . . . . .  35
118	       4.3.1.  Examples in Group Mode  . . . . . . . . . . . . . . .  35
119	       4.3.2.  Examples in Pairwise Mode . . . . . . . . . . . . . .  36
120	   5.  Message Binding, Sequence Numbers, Freshness, and Replay
121	           Protection  . . . . . . . . . . . . . . . . . . . . . . .  37
122	     5.1.  Supporting Multiple Responses in Long Exchanges . . . . .  38
123	     5.2.  Freshness . . . . . . . . . . . . . . . . . . . . . . . .  38
124	     5.3.  Replay Protection . . . . . . . . . . . . . . . . . . . .  39
125	       5.3.1.  Replay Protection of Responses  . . . . . . . . . . .  39
126	   6.  Message Reception . . . . . . . . . . . . . . . . . . . . . .  41
127	   7.  Message Processing in Group Mode  . . . . . . . . . . . . . .  42
128	     7.1.  Protecting the Request  . . . . . . . . . . . . . . . . .  44
129	     7.2.  Verifying the Request . . . . . . . . . . . . . . . . . .  45
130	     7.3.  Protecting the Response . . . . . . . . . . . . . . . . .  47
131	     7.4.  Verifying the Response  . . . . . . . . . . . . . . . . .  49
132	     7.5.  External Signature Checkers . . . . . . . . . . . . . . .  53
133	   8.  Message Processing in Pairwise Mode . . . . . . . . . . . . .  54
134	     8.1.  Pre-Conditions  . . . . . . . . . . . . . . . . . . . . .  55
135	     8.2.  Main Differences from OSCORE  . . . . . . . . . . . . . .  56
136	     8.3.  Protecting the Request  . . . . . . . . . . . . . . . . .  56
137	     8.4.  Verifying the Request . . . . . . . . . . . . . . . . . .  56
138	     8.5.  Protecting the Response . . . . . . . . . . . . . . . . .  57
139	     8.6.  Verifying the Response  . . . . . . . . . . . . . . . . .  58
140	   9.  Challenge-Response Based Freshness and Replay Window
141	           Recovery  . . . . . . . . . . . . . . . . . . . . . . . .  59
142	   10. Implementation Compliance . . . . . . . . . . . . . . . . . .  62
143	   11. Web Linking . . . . . . . . . . . . . . . . . . . . . . . . .  64
144	   12. The Group Manager . . . . . . . . . . . . . . . . . . . . . .  64
145	     12.1.  Set-up of New Endpoints  . . . . . . . . . . . . . . . .  65
146	     12.2.  Management of Group Keying Material  . . . . . . . . . .  67
147	       12.2.1.  Recycling of Identifiers . . . . . . . . . . . . . .  70
148	     12.3.  Support for Signature Checkers . . . . . . . . . . . . .  73
149	   13. Implementation Status . . . . . . . . . . . . . . . . . . . .  74
150	     13.1.  Implementation #1  . . . . . . . . . . . . . . . . . . .  74
151	     13.2.  Implementation #2  . . . . . . . . . . . . . . . . . . .  76
152	     13.3.  Interoperability . . . . . . . . . . . . . . . . . . . .  77
153	   14. Security Considerations . . . . . . . . . . . . . . . . . . .  78
154	     14.1.  Security of the Group Mode . . . . . . . . . . . . . . .  79
155	       14.1.1.  Example of Need for Proof of Group Membership  . . .  81
156	     14.2.  Security of the Pairwise Mode  . . . . . . . . . . . . .  82
157	     14.3.  Uniqueness of (key, nonce) . . . . . . . . . . . . . . .  83
158	     14.4.  Management of Group Keying Material  . . . . . . . . . .  83
159	       14.4.1.  Denial of Service  . . . . . . . . . . . . . . . . .  84
160	     14.5.  Update of Security Context and Key Rotation  . . . . . .  84
161	       14.5.1.  Late Update on the Sender  . . . . . . . . . . . . .  85
162	       14.5.2.  Late Update on the Recipient . . . . . . . . . . . .  85
163	     14.6.  Collision of Group Identifiers . . . . . . . . . . . . .  86
164	     14.7.  Cross-group Message Injection  . . . . . . . . . . . . .  86
165	       14.7.1.  Attack Description . . . . . . . . . . . . . . . . .  87
166	       14.7.2.  Attack Prevention in Group Mode  . . . . . . . . . .  88
167	     14.8.  Prevention of Group Cloning Attack . . . . . . . . . . .  88
168	     14.9.  Group OSCORE for Unicast Requests  . . . . . . . . . . .  89
169	     14.10. End-to-end Protection  . . . . . . . . . . . . . . . . .  91
170	     14.11. Master Secret  . . . . . . . . . . . . . . . . . . . . .  91
171	     14.12. Replay Protection  . . . . . . . . . . . . . . . . . . .  91
172	     14.13. Message Ordering . . . . . . . . . . . . . . . . . . . .  92
173	     14.14. Message Freshness  . . . . . . . . . . . . . . . . . . .  92
174	     14.15. Client Aliveness . . . . . . . . . . . . . . . . . . . .  93
175	     14.16. Cryptographic Considerations . . . . . . . . . . . . . .  93
176	     14.17. Message Segmentation . . . . . . . . . . . . . . . . . .  95
177	     14.18. Privacy Considerations . . . . . . . . . . . . . . . . .  95
178	   15. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  96
179	     15.1.  OSCORE Flag Bits Registry  . . . . . . . . . . . . . . .  97
180	     15.2.  Target Attributes Registry . . . . . . . . . . . . . . .  97
181	   16. References  . . . . . . . . . . . . . . . . . . . . . . . . .  97
182	     16.1.  Normative References . . . . . . . . . . . . . . . . . .  97
183	     16.2.  Informative References . . . . . . . . . . . . . . . . . 100
184	   Appendix A.  Assumptions and Security Objectives  . . . . . . . . 103
185	     A.1.  Assumptions . . . . . . . . . . . . . . . . . . . . . . . 103
186	     A.2.  Security Objectives . . . . . . . . . . . . . . . . . . . 105
187	   Appendix B.  List of Use Cases  . . . . . . . . . . . . . . . . . 106
188	   Appendix C.  Example of Group Identifier Format . . . . . . . . . 108
189	   Appendix D.  Responsibilities of the Group Manager  . . . . . . . 109
190	   Appendix E.  Document Updates . . . . . . . . . . . . . . . . . . 111
191	     E.1.  Version -26 to -27  . . . . . . . . . . . . . . . . . . . 111
192	     E.2.  Version -25 to -26  . . . . . . . . . . . . . . . . . . . 111
193	     E.3.  Version -24 to -25  . . . . . . . . . . . . . . . . . . . 113
194	     E.4.  Version -23 to -24  . . . . . . . . . . . . . . . . . . . 113
195	     E.5.  Version -22 to -23  . . . . . . . . . . . . . . . . . . . 113
196	     E.6.  Version -21 to -22  . . . . . . . . . . . . . . . . . . . 113
197	     E.7.  Version -20 to -21  . . . . . . . . . . . . . . . . . . . 114
198	     E.8.  Version -19 to -20  . . . . . . . . . . . . . . . . . . . 114
199	     E.9.  Version -18 to -19  . . . . . . . . . . . . . . . . . . . 114
200	     E.10. Version -17 to -18  . . . . . . . . . . . . . . . . . . . 114
201	     E.11. Version -16 to -17  . . . . . . . . . . . . . . . . . . . 115
202	     E.12. Version -15 to -16  . . . . . . . . . . . . . . . . . . . 115
203	     E.13. Version -14 to -15  . . . . . . . . . . . . . . . . . . . 116
204	     E.14. Version -13 to -14  . . . . . . . . . . . . . . . . . . . 116
205	     E.15. Version -12 to -13  . . . . . . . . . . . . . . . . . . . 116
206	     E.16. Version -11 to -12  . . . . . . . . . . . . . . . . . . . 116
207	     E.17. Version -10 to -11  . . . . . . . . . . . . . . . . . . . 117
208	     E.18. Version -09 to -10  . . . . . . . . . . . . . . . . . . . 118
209	     E.19. Version -08 to -09  . . . . . . . . . . . . . . . . . . . 119
210	     E.20. Version -07 to -08  . . . . . . . . . . . . . . . . . . . 120
211	     E.21. Version -06 to -07  . . . . . . . . . . . . . . . . . . . 121
212	     E.22. Version -05 to -06  . . . . . . . . . . . . . . . . . . . 122
213	     E.23. Version -04 to -05  . . . . . . . . . . . . . . . . . . . 122
214	     E.24. Version -03 to -04  . . . . . . . . . . . . . . . . . . . 123
215	     E.25. Version -02 to -03  . . . . . . . . . . . . . . . . . . . 124
216	     E.26. Version -01 to -02  . . . . . . . . . . . . . . . . . . . 124
217	     E.27. Version -00 to -01  . . . . . . . . . . . . . . . . . . . 125
218	   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . . 126
219	   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . 126

221	1.  Introduction

223	   The Constrained Application Protocol (CoAP) [RFC7252] is a web
224	   transfer protocol specifically designed for constrained devices and
225	   networks [RFC7228].  Group communication for CoAP
226	   [I-D.ietf-core-groupcomm-bis] addresses use cases where deployed
227	   devices benefit from a group communication model, for example to
228	   reduce latencies, improve performance, and reduce bandwidth
229	   utilization.  Use cases include lighting control, integrated building
230	   control, software and firmware updates, parameter and configuration
231	   updates, commissioning of constrained networks, and emergency
232	   multicast (see Appendix B).  Group communication for CoAP
233	   [I-D.ietf-core-groupcomm-bis] mainly uses UDP/IP multicast as the
234	   underlying data transport.

236	   Object Security for Constrained RESTful Environments (OSCORE)
237	   [RFC8613] describes a security protocol based on the exchange of
238	   protected CoAP messages.  OSCORE builds on CBOR Object Signing and
239	   Encryption (COSE) [RFC9052][RFC9053] and provides end-to-end
240	   encryption, integrity, replay protection, and binding of response to
241	   request between a sender and a recipient, independent of the
242	   transport layer also in the presence of intermediaries.  To this end,
243	   a CoAP message is protected by including its payload (if any),
244	   certain options, and header fields into a COSE object, which is
245	   conveyed within the CoAP payload and the CoAP OSCORE Option of the
246	   protected message, thereby replacing those message fields with an
247	   authenticated and encrypted object.

249	   This document defines Group OSCORE, a security protocol for group
250	   communication with CoAP [I-D.ietf-core-groupcomm-bis] and for CoAP-
251	   mappable HTTP requests and responses, providing the same end-to-end
252	   security properties as OSCORE also in the case where requests have
253	   multiple recipients.  In particular, the described protocol defines
254	   how OSCORE is used in a group communication setting to provide source
255	   authentication for group requests sent by a client to multiple
256	   servers, and for protection of the corresponding responses.  Group
257	   OSCORE also defines a pairwise mode where each member of the group
258	   can efficiently derive a symmetric pairwise key with each other
259	   member of the group for pairwise-protected OSCORE communication.
260	   Just like OSCORE, Group OSCORE is independent of the transport layer
261	   and works wherever CoAP does.

263	   As with OSCORE, it is possible to combine Group OSCORE with
264	   communication security on other layers.  One example is the use of
265	   transport layer security, such as DTLS [RFC9147], between one client
266	   and one proxy, or between one proxy and one server.  This prevents
267	   observers from accessing addressing information conveyed in CoAP
268	   options that would not be protected by Group OSCORE, but would be
269	   protected by DTLS.  These options include Uri-Host, Uri-Port, and
270	   Proxy-Uri. Note that DTLS does not define how to secure messages sent
271	   over IP multicast and cannot be used for end-to-end protection over a
272	   proxy.  Group OSCORE is also intended to work with OSCORE-capable
273	   proxies [I-D.ietf-core-oscore-capable-proxies] thereby enabling, for
274	   example, nested OSCORE operations with OSCORE-protected communication
275	   between a CoAP client and a proxy, carrying messages that are
276	   additionally protected with Group OSCORE between the CoAP client and
277	   the target CoAP servers.

279	   Group OSCORE defines two modes of operation that can be used
280	   independently or together:

282	   *  In the group mode, Group OSCORE requests and responses are
283	      digitally signed with the private key of the sender and the
284	      signature is embedded in the protected CoAP message.  The group
285	      mode supports all COSE signature algorithms as well as signature
286	      verification by intermediaries.  This mode is defined in
287	      Section 7.

289	   *  In the pairwise mode, two group members exchange OSCORE requests
290	      and responses (typically) over unicast, and the messages are
291	      protected with symmetric keys not known by the other group
292	      members.  These symmetric keys are derived from Diffie-Hellman
293	      shared secrets, calculated with the asymmetric keys of the sender
294	      and recipient, allowing for shorter integrity tags and therefore
295	      lower message overhead.  This mode is defined in Section 8.

297	   Both modes provide source authentication of CoAP messages.  The
298	   application decides what mode to use, potentially on a per-message
299	   basis.  Such decisions can be based, for instance, on pre-configured
300	   policies or dynamic assessing of the target recipient and/or
301	   resource, among other things.  One important case is when requests
302	   are protected in group mode, and responses in pairwise mode.  Since
303	   such responses convey shorter integrity tags instead of bigger, full-
304	   fledged signatures, this significantly reduces the message overhead
305	   in case of many responses to one request.

307	   A special deployment of Group OSCORE consists in using the pairwise
308	   mode only.  For example, consider the case of a constrained-node
309	   network [RFC7228] with a large number of CoAP endpoints and the
310	   objective to establish secure communication between any pair of
311	   endpoints with a small provisioning effort and message overhead.
312	   Since the total number of security associations that needs to be
313	   established grows with the square of the number of endpoints, it is
314	   desirable to restrict the amount of secret keying material provided
315	   to each endpoint.  Moreover, a key establishment protocol would need
316	   to be executed for each security association.  One solution to this
317	   issue is to deploy Group OSCORE, with the endpoints being part of a
318	   group, and to use the pairwise mode.  This solution has the benefit
319	   of providing a single shared secret, while distributing only the
320	   public keys of group members or a subset of those.  After that, a
321	   CoAP endpoint can locally derive the OSCORE Security Context for the
322	   other endpoint in the group, and protect CoAP communications with
323	   very low overhead [I-D.ietf-iotops-security-protocol-comparison].

325	   In some circumstances, Group OSCORE messages may be transported in
326	   HTTP, e.g., when they are protected with the pairwise mode and target
327	   a single recipient, or when they are protected with the group mode
328	   and target multiple CoAP recipients through cross-protocol
329	   translators such as HTTP-to-CoAP proxies
330	   [RFC8075][I-D.ietf-core-groupcomm-proxy].  The use of Group OSCORE
331	   with HTTP is as defined for OSCORE in Section 11 of [RFC8613].

333	1.1.  Terminology

335	   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
336	   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
337	   "OPTIONAL" in this document are to be interpreted as described in
338	   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
339	   capitals, as shown here.

341	   Readers are expected to be familiar with the terms and concepts
342	   described in CoAP [RFC7252], including "endpoint", "client",
343	   "server", "sender", and "recipient"; group communication for CoAP
344	   [I-D.ietf-core-groupcomm-bis]; Observe [RFC7641]; Concise Binary
345	   Object Representation (CBOR) [RFC8949]; Concise Data Definition
346	   Language (CDDL) [RFC8610]; COSE [RFC9052][RFC9053] and related
347	   countersignatures [RFC9338].

349	   Readers are also expected to be familiar with the terms and concepts
350	   for protection and processing of CoAP messages through OSCORE, such
351	   as "Security Context" and "Master Secret", defined in [RFC8613].

353	   Terminology for constrained environments, such as "constrained
354	   device" and "constrained-node network", is defined in [RFC7228].

356	   This document refers also to the following terminology.

358	   *  Keying material: data that is necessary to establish and maintain
359	      secure communication among endpoints.  This includes, for
360	      instance, keys and IVs [RFC4949].

362	   *  Authentication credential: information associated with an entity,
363	      including that entity's public key and parameters associated with
364	      the public key.  Examples of formats of authentication credentials
365	      are CBOR Web Tokens (CWTs) and CWT Claims Sets (CCSs) [RFC8392],
366	      X.509 certificates [RFC5280], and C509 certificates
367	      [I-D.ietf-cose-cbor-encoded-cert].  Further details about
368	      authentication credentials are provided in Section 2.4.

370	   *  Group: a set of endpoints that share group keying material and
371	      security parameters (Common Context, see Section 2).  That is,
372	      unless otherwise specified, the term group used in this document
373	      refers to a "security group" (see Section 2.1 of
374	      [I-D.ietf-core-groupcomm-bis]), not to be confused with "CoAP
375	      group" or "application group".

377	   *  Group Manager: an entity responsible for a group, required neither
378	      to be an actual group member nor to take part in the group
379	      communication.  The operations of the Group Manager are defined in
380	      Section 12 and its responsibilities are listed in Appendix D.

382	   *  Silent server: a member of a group that performs only group mode
383	      processing on incoming requests and never sends responses
384	      protected with Group OSCORE.  For CoAP group communications,
385	      requests are normally sent without necessarily expecting a
386	      response.  A silent server may send unprotected responses, as
387	      error responses reporting a Group OSCORE error.

389	   *  Group Identifier (Gid): identifier assigned to the group, unique
390	      within the set of groups of a given Group Manager.  The Gid value
391	      changes every time the group is rekeyed (see Section 12.2).

393	   *  Birth Gid: with respect to a group member, the Gid obtained by
394	      that group member upon (re-)joining the group.

396	   *  Key Generation Number: an integer value identifying the current
397	      version of the keying material used in a group.

399	   *  Source authentication: evidence that a received message in the
400	      group originated from a specific identified group member.  This
401	      also provides assurance that the message was not tampered with by
402	      anyone, be it a different legitimate group member or an endpoint
403	      which is not a group member.

405	   *  Group request: a CoAP request message sent by a client in the
406	      group to servers in that group.

408	   *  Long exchange: an exchange of messages associated with a request
409	      that is a group request and/or an Observe request [RFC7641].

411	      In either case, multiple responses can follow from the same server
412	      to the request associated with the long exchange, even if the
413	      request is not an Observe request (see Section 3.1.6 of
414	      [I-D.ietf-core-groupcomm-bis]).  The client terminates a long
415	      exchange when freeing up the CoAP Token value used for the
416	      associated request, for which no further responses will be
417	      accepted afterwards.

419	2.  Security Context

421	   This document refers to a group as a set of endpoints sharing keying
422	   material and security parameters for executing the Group OSCORE
423	   protocol, see Section 1.1.  All members of a group maintain a
424	   Security Context as defined in this section.

426	   How the Security Context is established by the group members is out
427	   of scope for this document, but if there is more than one Security
428	   Context applicable to a message, then the endpoints MUST be able to
429	   tell which Security Context was latest established.  The management
430	   of information about the group (i.e., identifiers, OSCORE input
431	   parameters, and keying material) is described in terms of a Group
432	   Manager (see Section 12).

434	   An endpoint of the group may use the group mode (see Section 7), the
435	   pairwise mode (see Section 8), or both, depending on the modes it
436	   supports and on the parameters of the Security Context.  The Security
437	   Context of Group OSCORE extends the OSCORE Security Context defined
438	   in Section 3 of [RFC8613] as follows (see Figure 1).

440	   *  One Common Context, shared by all the endpoints in the group and
441	      extended as defined below.

443	      -  The new parameter Authentication Credential Format, specifying
444	         the format of authentication credentials used in the group (see
445	         Section 2.1.5).

447	      -  The new parameter Group Manager Authentication Credential,
448	         specifying the authentication credential of the Group Manager
449	         responsible for the group (see Section 2.1.6).

451	      -  For the group mode, the Common Context is extended with the
452	         following new parameters.

454	         o  Group Encryption Algorithm, used for encrypting and
455	            decrypting messages protected in group mode (see
456	            Section 2.1.7).

458	         o  Signature Algorithm, used for computing and verifying the
459	            countersignature of messages protected in group mode (see
460	            Section 2.1.8).

462	         o  Signature Encryption Key, used for encrypting and decrypting
463	            the countersignature of messages protected in group mode
464	            (see Section 2.1.9).

466	      -  For the pairwise mode, the Common Context is extended with a
467	         Pairwise Key Agreement Algorithm (see Section 2.1.10) used for
468	         the agreement on a static-static Diffie-Hellman shared secret,
469	         from which pairwise keys are derived (see Section 2.5.1).

471	      The content of the Common Context is long-term, as it is meant to
472	      be stable once the Common Context is established.

474	   *  One Sender Context, extended with the following new parameters.

476	      -  The endpoint's own private key used to sign messages protected
477	         in group mode (see Section 7), or for deriving pairwise keys
478	         used with the pairwise mode (see Section 2.5).

480	      -  The endpoint's own authentication credential containing its
481	         public key (see Section 2.4).

483	      -  For the pairwise mode, the Sender Context is extended with the
484	         Pairwise Sender Keys associated with the other endpoints (see
485	         Section 2.5).

487	      Except for the Sender Sequence Number defined in Section 3.1 of
488	      [RFC8613], the content of the Sender Context is long-term, as it
489	      is meant to be stable once the Sender Context is established.

491	      If the endpoint is configured exclusively as a silent server (see
492	      Section 1.1), then the Sender Context is omitted.

494	   *  One Recipient Context for each other endpoint from which messages
495	      are received.  It is not necessary to maintain Recipient Contexts
496	      associated with endpoints from which messages are not (expected to
497	      be) received.

499	      -  Each Recipient Context is extended with the authentication
500	         credential of the other endpoint, used to verify the signature
501	         of messages protected in group mode, or for deriving the
502	         pairwise keys used with the pairwise mode (see Section 2.5).

504	      -  For the pairwise mode, each Recipient Context is extended with
505	         the Pairwise Recipient Key associated with the other endpoint
506	         (see Section 2.5).

508	      Except for the Replay Window defined in Section 3.1 of [RFC8613],
509	      the content of each Recipient Context is long-term, as it is meant
510	      to be stable once the Recipient Context is established.

512	   The varying part of the Group OSCORE Security Context is composed of
513	   the Sender Sequence Number in the Sender Context and the Replay
514	   Windows in the different Recipient Contexts.

516	 +-------------------+-------------------------------------------------+
517	 | Context Component | New Information Elements                        |
518	 +-------------------+-------------------------------------------------+
519	 | Common Context    |   Authentication Credential Format              |
520	 |                   |   Group Manager Authentication Credential       |
521	 |                   | * Group Encryption Algorithm                    |
522	 |                   | * Signature Algorithm                           |
523	 |                   | * Signature Encryption Key                      |
524	 |                   | ^ Pairwise Key Agreement Algorithm              |
525	 +-------------------+-------------------------------------------------+
526	 | Sender Context    |   Endpoint's own private key                    |
527	 |                   |   Endpoint's own authentication credential      |
528	 |                   | ^ Pairwise Sender Keys for the other endpoints  |
529	 +-------------------+-------------------------------------------------+
530	 | Each              |   Other endpoint's authentication credential    |
531	 | Recipient Context | ^ Pairwise Recipient Key for the other endpoint |
532	 +-------------------+-------------------------------------------------+

534	   Figure 1: Additions to the OSCORE Security Context.  The elements
535	     labeled with * and with ^ are relevant only for the group mode
536	             and only for the pairwise mode, respectively.

538	2.1.  Common Context

540	   The following sections specify how the Common Context is used and
541	   extended compared to [RFC8613].  The Common Context may be acquired
542	   from the Group Manager (see Section 12).

544	2.1.1.  AEAD Algorithm

546	   The AEAD Algorithm (see Section 3.1 of [RFC8613]) SHALL identify the
547	   COSE AEAD algorithm to use for encryption and decryption when
548	   messages are protected using the pairwise mode (see Section 8).  This
549	   algorithm MUST provide integrity protection.  If this parameter is
550	   not set, the pairwise mode is not used in the group.

552	2.1.2.  HKDF Algorithm

554	   The HKDF Algorithm (see Section 3.1 of [RFC8613]) SHALL identify the
555	   used key derivation function, which MUST be one of the HMAC-based
556	   HKDF [RFC5869] algorithms defined for COSE (see Section 5.1 of
557	   [RFC9053]) and registered at [COSE.Algorithms].

559	2.1.3.  ID Context

561	   The ID Context parameter (see Sections 3.1 and 3.3 of [RFC8613])
562	   SHALL contain the Group Identifier (Gid) of the group.  The choice of
563	   the Gid format is application specific.  An example of specific
564	   formatting of the Gid is given in Appendix C.  The application needs
565	   to specify how to handle potential collisions between Gids (see
566	   Section 14.6).

568	2.1.4.  Common IV

570	   The Common IV parameter (see Section 3.1 of [RFC8613]) SHALL identify
571	   the Common IV used in the group.  Differently from OSCORE, the length
572	   of the Common IV is determined as follows.

574	   *  If only one among the AEAD Algorithm and the Group Encryption
575	      Algorithm is set (see Section 2.1.1 and Section 2.1.7), the length
576	      of the Common IV is the nonce length for the set algorithm.

578	   *  If both the AEAD Algorithm and the Group Encryption Algorithm are
579	      set, the length of the Common IV is the greatest nonce length
580	      among those of the two algorithms.

582	2.1.5.  Authentication Credential Format

584	   The new parameter Authentication Credential Format specifies the
585	   format of authentication credentials used in the group.  Further
586	   details on authentication credentials are compiled in Section 2.4.

588	2.1.6.  Group Manager Authentication Credential

590	   The new parameter Group Manager Authentication Credential specifies
591	   the authentication credential of the Group Manager, including the
592	   Group Manager's public key.  The endpoint MUST achieve proof of
593	   possession of the corresponding private key.  As an example, such
594	   proof of possession is possible to achieve during the join process
595	   provided by the realization of Group Manager specified in
596	   [I-D.ietf-ace-key-groupcomm-oscore].  Further details on the
597	   provisioning of the Group Manager's authentication credential to the
598	   group members are out of the scope of this document.

600	2.1.7.  Group Encryption Algorithm

602	   The new parameter Group Encryption Algorithm identifies the algorithm
603	   to use for encryption and decryption, when messages are protected in
604	   group mode (see Section 7).  This algorithm MAY provide integrity
605	   protection.  If this parameter is not set, the group mode is not used
606	   in the group.

608	   A non-authenticated algorithm MUST NOT be used as Group Encryption
609	   Algorithm if it is not possible to ensure uniqueness of the (key,
610	   nonce) pairs.  This is the case, for instance, for A128CTR, A192CTR,
611	   and A256CTR [RFC9459].  Instead, examples of non-authenticated
612	   algorithms that can be used as Group Encryption Algorithm are
613	   A128CBC, A192CBC, and A256CBC [RFC9459].

615	2.1.8.  Signature Algorithm

617	   The new parameter Signature Algorithm identifies the digital
618	   signature algorithm used for computing and verifying the
619	   countersignature on the COSE object (see Sections 3.2 and 3.3 of
620	   [RFC9338]), when messages are protected in group mode (see
621	   Section 7).  If this parameter is not set, the group mode is not used
622	   in the group.

624	2.1.9.  Signature Encryption Key

626	   The new parameter Signature Encryption Key specifies the encryption
627	   key for deriving a keystream to encrypt/decrypt a countersignature,
628	   when a message is protected in group mode (see Section 7).

630	   The Signature Encryption Key is derived as defined for Sender/
631	   Recipient Keys in Section 3.2.1 of [RFC8613], with the following
632	   differences.

634	   *  The 'id' element of the 'info' array is the empty byte string.

636	   *  The 'alg_aead' element of the 'info' array specifies the Group
637	      Encryption Algorithm from the Common Context (see Section 2.1.7),
638	      encoded as a CBOR integer or text string, consistently with the
639	      "Value" field in the "COSE Algorithms" Registry for this
640	      algorithm.

642	   *  The 'type' element of the 'info' array is "SEKey".  The label is
643	      an ASCII string and does not include a trailing NUL byte.

645	   *  L and the 'L' element of the 'info' array are the size of the key
646	      for the Group Encryption Algorithm specified in the Common Context
647	      (see Section 2.1.7), in bytes.  While the obtained Signature
648	      Encryption Key is never used with the Group Encryption Algorithm,
649	      its length was chosen to obtain a matching level of security.

651	2.1.10.  Pairwise Key Agreement Algorithm

653	   The new parameter Pairwise Key Agreement Algorithm identifies the
654	   elliptic curve Diffie-Hellman algorithm used to derive a static-
655	   static Diffie-Hellman shared secret, from which pairwise keys are
656	   derived (see Section 2.5.1) to protect messages with the pairwise
657	   mode (see Section 8).  If this parameter is not set, the pairwise
658	   mode is not used in the group.

660	   If the HKDF Algorithm specified in the Common Context is "HKDF SHA-
661	   256" (identified as "HMAC 256/256"), then the Pairwise Key Agreement
662	   Algorithm is "ECDH-SS + HKDF-256" (COSE algorithm encoding: -27).

664	   If the HKDF Algorithm specified in the Common Context is "HKDF SHA-
665	   512" (identified as "HMAC 512/512"), then the Pairwise Key Agreement
666	   Algorithm is "ECDH-SS + HKDF-512" (COSE algorithm encoding: -28).

668	   Note that the HKDF Algorithm in the Common Context is denoted by the
669	   corresponding COSE HMAC Algorithm.  For example, the HKDF Algorithm
670	   "HKDF SHA-256" is specified as the HMAC Algorithm "HMAC 256/256".

672	   More generally, if Pairwise Key Agreement Algorithm is set, it MUST
673	   identify a COSE algorithm such that: i) it performs a direct ECDH
674	   Static-Static key agreement; and ii) it indicates the use of the same
675	   HKDF Algorithm used in the group as specified in the Common Context.

677	2.2.  Sender Context and Recipient Context

679	   The Sender ID SHALL be unique for each endpoint in a group with a
680	   certain triplet (Master Secret, Master Salt, Group Identifier), see
681	   Section 3.3 of [RFC8613].

683	   The maximum length of a Sender ID in bytes equals L minus 6, where L
684	   is determined as follows.

686	   *  If only one among the AEAD Algorithm and the Group Encryption
687	      Algorithm is set (see Section 2.1.1 and Section 2.1.7), then L is
688	      the nonce length for the set algorithm.

690	   *  If both the AEAD Algorithm and the Group Encryption Algorithm are
691	      set, then L is the smallest nonce length among those of the two
692	      algorithms.

694	   With the exception of the authentication credential of the sender
695	   endpoint, a receiver endpoint can derive a complete Security Context
696	   from a received Group OSCORE message and the Common Context (see
697	   Section 2.3).

699	   The authentication credentials in the Recipient Contexts can be
700	   retrieved from the Group Manager (see Section 12) upon joining the
701	   group.  An authentication credential can alternatively be acquired
702	   from the Group Manager at a later time, for example the first time a
703	   message is received from a particular endpoint in the group (see
704	   Section 7.2 and Section 7.4).

706	   For severely constrained devices, it may be infeasible to
707	   simultaneously handle the ongoing processing of a recently received
708	   message in parallel with the retrieval of the sender endpoint's
709	   authentication credential.  Such devices can be configured to drop a
710	   received message for which there is no (complete) Recipient Context,
711	   and retrieve the sender endpoint's authentication credential in order
712	   to have it available to verify subsequent messages from that
713	   endpoint.

715	   An endpoint may admit a maximum number of Recipient Contexts for a
716	   same Security Context, e.g., due to memory limitations.  After
717	   reaching that limit, the endpoint has to delete a current Recipient
718	   Context to install a new one (see Section 2.6.1.2).  It is up to the
719	   application to define policies for Recipient Contexts to delete.

721	2.3.  Establishment of Security Context Parameters

723	   OSCORE defines the derivation of Sender Context and Recipient Context
724	   (specifically, of Sender/Recipient Keys) and of the Common IV, from a
725	   set of input parameters (see Section 3.2 of [RFC8613]).

727	   The derivation of Sender/Recipient Keys and of the Common IV defined
728	   in OSCORE applies also to Group OSCORE, with the following
729	   modifications compared to Section 3.2.1 of [RFC8613].

731	   *  If Group Encryption Algorithm in the Common Context is set (see
732	      Section 2.1.7), then the 'alg_aead' element of the 'info' array
733	      MUST specify Group Encryption Algorithm from the Common Context as
734	      a CBOR integer or text string, consistently with the "Value" field
735	      in the "COSE Algorithms" Registry for this algorithm.

737	   *  If Group Encryption Algorithm in the Common Context is not set,
738	      then the 'alg_aead' element of the 'info' array MUST specify AEAD
739	      Algorithm from the Common Context (see Section 2.1.1), as per
740	      Section 5.4 of [RFC8613].

742	   *  When deriving the Common IV, the 'L' element of the 'info' array
743	      MUST specify the length of the Common IV in bytes, which is
744	      determined as defined in Section 2.1.4.

746	2.4.  Authentication Credentials

748	   The authentication credentials of the endpoints in a group MUST be
749	   encoded according to the format used in the group, as indicated by
750	   the Authentication Credential Format parameter in the Common Context
751	   (see Section 2.1.5).  The authentication credential of the Group
752	   Manager SHOULD be encoded according to that same format, in order to
753	   limit the number of formats that the group members have to support
754	   and handle, unless it is infeasible or impractical for the particular
755	   realization or instance of the Group Manager to have an own
756	   authentication credential encoded in that same format.

758	   The format of authentication credentials MUST provide the public key
759	   and a comprehensive set of information related to the public key
760	   algorithm, including, e.g., the used elliptic curve (when
761	   applicable).  If Group Encryption Algorithm in the Common Context is
762	   not set (see Section 2.1.7), then the public key algorithm is the
763	   Pairwise Key Agreement Algorithm used in the group (see
764	   Section 2.1.10), else the Signature Algorithm used in the group (see
765	   Section 2.1.8).

767	   Examples of formats of authentication credentials are CBOR Web Tokens
768	   (CWTs) and CWT Claims Sets (CCSs) [RFC8392], X.509 certificates
769	   [RFC5280], and C509 certificates [I-D.ietf-cose-cbor-encoded-cert].

771	   If the authentication credentials are X.509 certificates or C509
772	   certificates, the public key algorithm is fully described by the
773	   "algorithm" field of the "SubjectPublicKeyInfo" structure, and by the
774	   "subjectPublicKeyAlgorithm" element, respectively.

776	   If authentication credentials are CBOR Web Tokens (CWTs) or CWT
777	   Claims Sets (CCSs), the public key algorithm is fully described by a
778	   COSE key type and its "kty" and "crv" parameters.

780	   Authentication credentials are used to derive pairwise keys (see
781	   Section 2.5.1) and are included in the external additional
782	   authenticated data when processing messages (see Section 3.4).  In
783	   both these cases, an endpoint in a group MUST treat authentication
784	   credentials as opaque data, i.e., by considering the same binary
785	   representation made available to other endpoints in the group,
786	   possibly through a designated trusted source (e.g., the Group
787	   Manager).

789	   For example, an X.509 certificate is provided as its direct binary
790	   serialization.  If C509 certificates or CWTs are used as
791	   authentication credentials, each is provided as the binary
792	   serialization of a (possibly tagged) CBOR array.  If CCSs are used as
793	   authentication credentials, each is provided as the binary
794	   serialization of a (possibly tagged) CBOR map.

796	   If authentication credentials are CWTs or CCSs, then the untagged CWT
797	   or CCS associated with an entity is stored in the Security Context
798	   and used as authentication credential for that entity.

800	   If authentication credentials are X.509 / C509 certificates, CWTs, or
801	   CCSs and the authentication credential associated with an entity is
802	   provided within a chain or a bag, then only the end-entity
803	   certificate or end-entity untagged CWT / CCS is stored in the
804	   Security Context and used as authentication credential for that
805	   entity.

807	   Storing whole authentication credentials rather than only a subset of
808	   those may result in a non-negligible storage overhead.  On the other
809	   hand, it also ensures that authentication credentials are correctly
810	   used in a simple, flexible and non-error-prone way, also taking into
811	   account future credential formats as entirely new or extending
812	   existing ones.  In particular, it is ensured that:

814	   *  When used to derive pairwise keys and when included in the
815	      external additional authenticated data, authentication credentials
816	      can also specify possible metadata and parameters related to the
817	      included public key.  Besides the public key algorithm, these
818	      comprise other relevant pieces of information such as key usage,
819	      expiration time, issuer, and subject.

821	   *  All endpoints using another endpoint's authentication credential
822	      use exactly the same binary serialization, as obtained and
823	      distributed by the credential provider (e.g., the Group Manager),
824	      and as originally crafted by the credential issuer.  In turn, this
825	      does not require to define and maintain canonical subsets of
826	      authentication credentials and their corresponding encoding, and
827	      spares endpoints from error-prone re-encoding operations.

829	   Depending on the particular deployment and the intended group size,
830	   limiting the storage overhead of endpoints in a group can be an
831	   incentive for system/network administrators to prefer using a compact
832	   format of authentication credentials in the first place.

834	2.5.  Pairwise Keys

836	   Certain signature schemes, such as EdDSA and ECDSA, support a secure
837	   combined signature and encryption scheme.  This section specifies the
838	   derivation of "pairwise keys" for use in the pairwise mode defined in
839	   Section 8.

841	   Group OSCORE keys used for both signature and encryption MUST be used
842	   only for purposes related to Group OSCORE.  These include the
843	   processing of messages with Group OSCORE, as well as performing proof
844	   of possession of private keys, e.g., upon joining a group through the
845	   Group Manager (see Section 12).

847	2.5.1.  Derivation of Pairwise Keys

849	   Using the Group OSCORE Security Context (see Section 2), a group
850	   member can derive AEAD keys, to protect point-to-point communication
851	   between itself and each other endpoint X in the group by means of the
852	   AEAD Algorithm from the Common Context (see Section 2.1.1).

854	   Analogous to the construction used by OSCORE in Section 3.2.1 of
855	   [RFC8613], the key derivation of these so-called pairwise keys relies
856	   on an HKDF algorithm and is as defined below:

858	  Pairwise Sender Key    = HKDF(Sender Key, IKM-Sender, info, L)
859	  Pairwise Recipient Key = HKDF(Recipient Key, IKM-Recipient, info, L)

861	  with

863	  IKM-Sender    = Sender Auth Cred | Recipient Auth Cred | Shared Secret
864	  IKM-Recipient = Recipient Auth Cred | Sender Auth Cred | Shared Secret

866	   where:

868	   *  The Pairwise Sender Key is the AEAD key for processing outgoing
869	      messages addressed to endpoint X.

871	   *  The Pairwise Recipient Key is the AEAD key for processing incoming
872	      messages from endpoint X.

874	   *  HKDF is the OSCORE HKDF algorithm [RFC8613] from the Common
875	      Context.

877	   *  The Sender Key from the Sender Context is used as salt in the
878	      HKDF, when deriving the Pairwise Sender Key.

880	   *  The Recipient Key from the Recipient Context associated with
881	      endpoint X is used as salt in the HKDF, when deriving the Pairwise
882	      Recipient Key.

884	   *  Sender Auth Cred is the endpoint's own authentication credential
885	      from the Sender Context.

887	   *  Recipient Auth Cred is the endpoint X's authentication credential
888	      from the Recipient Context associated with the endpoint X.

890	   *  The Shared Secret is computed as a cofactor Diffie-Hellman shared
891	      secret, see Section 5.7.1.2 of [NIST-800-56A], using the Pairwise
892	      Key Agreement Algorithm.  The endpoint uses its private key from
893	      the Sender Context and the other endpoint's public key included in
894	      Recipient Auth Cred.  Note the requirement of validation of public
895	      keys in Section 14.16.

897	      In case the other endpoint's public key has COSE Key Type "EC2"
898	      [RFC9053] (e.g., for the curves P-256, P-384, and P-521), then the
899	      public key is used as is.  In case the other endpoint's public key
900	      has COSE Key Type "OKP" [RFC9053], the procedure is described in
901	      Section 5 of [RFC7748].  In particular, if the public key is for
902	      X25519 or X448, it is used as is.  Otherwise, if the public key is
903	      for the curve Ed25519 or Ed448, it is first mapped to Montgomery
904	      coordinates (see Section 2.5.2).

906	   *  IKM-Sender is the Input Keying Material (IKM) used in the HKDF for
907	      the derivation of the Pairwise Sender Key. IKM-Sender is the byte
908	      string concatenation of Sender Auth Cred, Recipient Auth Cred, and
909	      the Shared Secret.  The authentication credentials Sender Auth
910	      Cred and Recipient Auth Cred are binary encoded as defined in
911	      Section 2.4.

913	   *  IKM-Recipient is the Input Keying Material (IKM) used in the HKDF
914	      for the derivation of the Pairwise Recipient Key. IKM-Recipient is
915	      the byte string concatenation of Recipient Auth Cred, Sender Auth
916	      Cred, and the Shared Secret.  The authentication credentials
917	      Recipient Auth Cred and Sender Auth Cred are binary encoded as
918	      defined in Section 2.4.

920	   *  info and L are as defined in Section 3.2.1 of [RFC8613].  That is:

922	      -  The 'alg_aead' element of the 'info' array takes the value of
923	         AEAD Algorithm from the Common Context (see Section 2.1.1).

925	      -  L and the 'L' element of the 'info' array are the size of the
926	         key for the AEAD Algorithm from the Common Context (see
927	         Section 2.1.1), in bytes.

929	   If EdDSA asymmetric keys are used, the Edward coordinates are mapped
930	   to Montgomery coordinates using the maps defined in Sections 4.1 and
931	   4.2 of [RFC7748], before using the X25519 or X448 function defined in
932	   Section 5 of [RFC7748].  For further details, see Section 2.5.2.  ECC
933	   asymmetric keys in Montgomery or Weierstrass form are used directly
934	   in the key agreement algorithm, without coordinate mapping.

936	   After establishing a partially or completely new Security Context
937	   (see Section 2.6 and Section 12.2), the old pairwise keys MUST be
938	   deleted.  Since new Sender/Recipient Keys are derived from the new
939	   group keying material (see Section 2.2), every group member MUST use
940	   the new Sender/Recipient Keys when deriving new pairwise keys.

942	   As long as any two group members preserve the same asymmetric keys,
943	   their Diffie-Hellman shared secret does not change across updates of
944	   the group keying material.

946	2.5.2.  ECDH with Montgomery Coordinates

948	2.5.2.1.  Curve25519

950	   The y-coordinate of the other endpoint's Ed25519 public key is
951	   decoded as specified in Section 5.1.3 of [RFC8032].  The Curve25519
952	   u-coordinate is recovered as u = (1 + y) / (1 - y) (mod p) following
953	   the map in Section 4.1 of [RFC7748].  Note that the mapping is not
954	   defined for y = 1, and that y = -1 maps to u = 0 which corresponds to
955	   the neutral group element and thus will result in a degenerate shared
956	   secret.  Therefore, implementations MUST abort if the y-coordinate of
957	   the other endpoint's Ed25519 public key is 1 or -1 (mod p).

959	   The private signing key byte strings (i.e., the lower 32 bytes used
960	   for generating the public key, see Step 1 of Section 5.1.5 of
961	   [RFC8032]) are decoded the same way for signing in Ed25519 and scalar
962	   multiplication in X25519.  Hence, in order to compute the shared
963	   secret, the endpoint applies the X25519 function to the Ed25519
964	   private signing key byte string and the encoded u-coordinate byte
965	   string as specified in Section 5 of [RFC7748].

967	2.5.2.2.  Curve448

969	   The y-coordinate of the other endpoint's Ed448 public key is decoded
970	   as specified in Section 5.2.3. of [RFC8032].  The Curve448
971	   u-coordinate is recovered as u = y^2 * (d * y^2 - 1) / (y^2 - 1) (mod
972	   p) following the map from "edwards448" in Section 4.2 of [RFC7748],
973	   and also using the relation x^2 = (y^2 - 1)/(d * y^2 - 1) from the
974	   curve equation.  Note that the mapping is not defined for y = 1 or
975	   -1.  Therefore, implementations MUST abort if the y-coordinate of the
976	   peer endpoint's Ed448 public key is 1 or -1 (mod p).

978	   The private signing key byte strings (i.e., the lower 57 bytes used
979	   for generating the public key, see Step 1 of Section 5.2.5 of
980	   [RFC8032]) are decoded the same way for signing in Ed448 and scalar
981	   multiplication in X448.  Hence, in order to compute the shared
982	   secret, the endpoint applies the X448 function to the Ed448 private
983	   signing key byte string and the encoded u-coordinate byte string as
984	   specified in Section 5 of [RFC7748].

986	2.5.3.  Usage of Sequence Numbers

988	   When using any of its Pairwise Sender Keys, a sender endpoint
989	   including the 'Partial IV' parameter in the protected message MUST
990	   use the current fresh value of the Sender Sequence Number from its
991	   Sender Context (see Section 2.2).  That is, the same Sender Sequence
992	   Number space is used for all outgoing messages protected with Group
993	   OSCORE, thus limiting both storage and complexity.

995	   When combining communications with the group mode and the pairwise
996	   mode, this may result in the Partial IV values moving forward more
997	   often than when using OSCORE [RFC8613].  This can happen when a
998	   client engages in frequent or long sequences of one-to-one exchanges
999	   with servers in the group, by sending requests over unicast.  In
1000	   turn, this contributes to a sooner exhaustion of the Sender Sequence
1001	   Number space of the client, which would then require to take actions
1002	   for deriving a new Sender Context before resuming communications in
1003	   the group (see Section 2.6.2).

1005	2.5.4.  Security Context for Pairwise Mode

1007	   If the pairwise mode is supported, the Security Context additionally
1008	   includes the Pairwise Key Agreement Algorithm and the pairwise keys,
1009	   as described at the beginning of Section 2.

1011	   The pairwise keys as well as the shared secrets used in their
1012	   derivation (see Section 2.5.1) may be stored in memory or recomputed
1013	   every time they are needed.  The shared secret changes only when a
1014	   public/private key pair used for its derivation changes, which
1015	   results in the pairwise keys also changing.  Additionally, the
1016	   pairwise keys change if the Sender ID changes or if a new Security
1017	   Context is established for the group (see Section 2.6.3).  In order
1018	   to optimize protocol performance, an endpoint may store the derived
1019	   pairwise keys for easy retrieval.

1021	   In the pairwise mode, the Sender Context includes the Pairwise Sender
1022	   Keys to use with the other endpoints (see Figure 1).  In order to
1023	   identify the right key to use, the Pairwise Sender Key for endpoint X
1024	   may be associated with the Recipient ID of endpoint X, as defined in
1025	   the Recipient Context (i.e., the Sender ID from the point of view of
1026	   endpoint X).  In this way, the Recipient ID can be used to lookup for
1027	   the right Pairwise Sender Key. This association may be implemented in
1028	   different ways, e.g., by storing the pair (Recipient ID, Pairwise
1029	   Sender Key) or linking a Pairwise Sender Key to a Recipient Context.

1031	2.6.  Update of Security Context

1033	   It is RECOMMENDED that the long-term part of the Security Context is
1034	   stored in non-volatile memory, or that it can otherwise be reliably
1035	   accessed throughout the operation of the group, e.g., after device
1036	   reboots.  However, also data in the long-term part of the Security
1037	   Context may need to be updated, for example due to scheduled key
1038	   renewal, new or re-joining members in the group, or the fact that the
1039	   endpoint changes Sender ID (see Section 2.6.3).

1041	   The data in the varying part of the Security Context are updated by
1042	   the endpoint when executing the security protocol, but may be lost
1043	   (see Section 2.6.1) or become outdated by exhaustion of Sender
1044	   Sequence Numbers (see Section 2.6.2).

1046	2.6.1.  Loss of the Varying Part of the Security Context

1048	   An endpoint may lose the varying part of its Security Context due to
1049	   accidental events, e.g., if a reboot occurred in an unprepared way
1050	   (see Section 2.6.1.1) or due to a deliberately deleted Recipient
1051	   Context (see Section 2.6.1.2).

1053	   If it is not feasible or practically possible to store and maintain
1054	   up-to-date the varying part in non-volatile memory (e.g., due to
1055	   limited number of write operations), the endpoint MUST be able to
1056	   detect a loss of the varying part of the Security Context, to prevent
1057	   the re-use of a nonce with the same key and to handle incoming
1058	   replayed messages.

1060	2.6.1.1.  Accidental Loss of Sender Context and/or Recipient Contexts

1062	   In case a loss of the Sender Context and/or of the Recipient Contexts
1063	   is detected (e.g., if a reboot occurred in an unprepared way), the
1064	   endpoint MUST NOT protect further messages using this Security
1065	   Context, to avoid reusing a nonce with the same key.

1067	   Before resuming its operations in the group, the endpoint MUST
1068	   retrieve new Security Context parameters from the Group Manager (see
1069	   Section 2.6.3) and use them to derive a new Sender Context and
1070	   Recipient Contexts (see Section 2.2).  Since the new Sender Context
1071	   includes newly derived encryption keys, an endpoint will not reuse
1072	   the same pair (key, nonce), even when it is a server using the
1073	   Partial IV of (old re-injected) requests to build the nonce for
1074	   protecting the responses.

1076	   From then on, the endpoint MUST use the latest installed Sender
1077	   Context to protect outgoing messages.  Newly derived Recipient
1078	   Contexts will have a Replay Window which is initialized as valid.

1080	   If an endpoint is not configured as a silent server and is not able
1081	   to establish an updated Sender Context, e.g., because of lack of
1082	   connectivity with the Group Manager, then the endpoint MUST NOT
1083	   protect further messages using the current Security Context and MUST
1084	   NOT accept incoming messages from other group members, as it is
1085	   currently unable to detect possible replays.

1087	   If an endpoint is configured as a silent server and is not able to
1088	   establish an updated Security Context, e.g., because of lack of
1089	   connectivity with the Group Manager, then the endpoint MUST NOT
1090	   accept incoming messages from other group members, as it is currently
1091	   unable to detect possible replays.

1093	2.6.1.2.  Deliberately Deleted Recipient Contexts

1095	   The Security Context may contain a large and variable number of
1096	   Recipient Contexts.  While Group OSCORE in itself does not establish
1097	   a maximum number of Recipient Contexts, there are circumstances by
1098	   which implementations might choose to discard Recipient Contexts or
1099	   have to do so in accordance with enforced application policies.  Such
1100	   circumstances include the need to reclaim memory or other resources
1101	   on the node hosting the endpoint, for example because the predefined
1102	   maximum number of Recipient Contexts has been reached in the Security
1103	   Context (see Section 2.2).

1105	   When a Recipient Context is deleted, this not only results in losing
1106	   information about previously received messages from the corresponding
1107	   other endpoint.  It also results in the inability to be aware of the
1108	   Security Contexts from which information has been lost.

1110	   Therefore, if the Recipient Context is derived again from the same
1111	   Security Context, there is a risk that a replayed message is not
1112	   detected.  If any Recipient Context associated with any peer has ever
1113	   been deleted from the current Security Context, then the Replay
1114	   Window of any new Recipient Context in this Security Context MUST be
1115	   initialized as invalid.  An exception applies when the deleted
1116	   Recipient Context was created upon receiving a message and that
1117	   message was not verified successfully (see Section 7.2, Section 7.4,
1118	   Section 8.4, and Section 8.6).  Messages associated with a Recipient
1119	   Context that has an invalid Replay Window MUST NOT be delivered to
1120	   the application.

1122	   If the endpoint receives a message to be processed with any such new
1123	   Recipient Context whose Replay Window is invalid, then the endpoint
1124	   MUST take one of the following courses of action.

1126	   *  The endpoint discards the message.

1128	   *  The endpoint follows the procedure based on the CoAP Echo Option
1129	      [RFC9175] and specified in Section 9, in order to establish a
1130	      valid Replay Window.  In particular, the endpoint MUST use its
1131	      Partial IV when generating the nonce and MUST include the Partial
1132	      IV in the response message conveying the Echo Option.  If the
1133	      endpoint supports the CoAP Echo Option, then it is RECOMMENDED to
1134	      take this course of action.

1136	   *  The endpoint retrieves or waits for new Security Context
1137	      parameters from the Group Manager and derives new Sender and
1138	      Recipient Contexts, as defined in Section 2.6.1.1.  In this case
1139	      the Replay Windows of all Recipient Contexts become valid if they
1140	      are not already.  In particular, any invalid Replay Window is re-
1141	      initialized as valid and with 0 as its current lower limit.

1143	2.6.2.  Exhaustion of Sender Sequence Number Space

1145	   Since an endpoint increments its Sender Sequence Number for each new
1146	   outgoing message including a Partial IV, an endpoint can eventually
1147	   exhaust the Sender Sequence Number space.

1149	   Implementations MUST be able to detect an exhaustion of Sender
1150	   Sequence Number space, after the endpoint has consumed the largest
1151	   usable value.  This may be influenced by additional limitations
1152	   besides the mere 40-bit size limit of the Partial IV.

1154	   Upon exhausting the Sender Sequence Number space, the endpoint MUST
1155	   NOT use this Security Context to protect further messages including a
1156	   Partial IV.

1158	   When approaching the exhaustion of the Sender Sequence Number space,
1159	   the endpoint SHOULD inform the Group Manager, retrieve new Security
1160	   Context parameters from the Group Manager (see Section 2.6.3), and
1161	   use them to derive a new Sender Context (see Section 2.2).  It is
1162	   RECOMMENDED that the endpoint takes this course of action with some
1163	   margin, i.e., well before exhausting the Sender Sequence Number
1164	   space, in order to avoid a period of inability to protect messages
1165	   including a Partial IV.

1167	   From then on, the endpoint MUST use its latest installed Sender
1168	   Context to protect outgoing messages.

1170	2.6.3.  Retrieving New Security Context Parameters

1172	   The Group Manager can assist an endpoint with an incomplete Sender
1173	   Context to retrieve missing data of the Security Context and thereby
1174	   become fully operational in the group again.  The two main options
1175	   for the Group Manager are: i) assignment of a new Sender ID to the
1176	   endpoint (see Section 2.6.3.1); and ii) establishment of a new
1177	   Security Context for the group (see Section 2.6.3.2).  The update of
1178	   the Replay Window in each of the Recipient Contexts is discussed in
1179	   Section 2.6.1.

1181	   As group membership changes, or as group members get new Sender IDs
1182	   (see Section 2.6.3.1), so do the relevant Recipient IDs that the
1183	   other endpoints need to keep track of.  As a consequence, group
1184	   members may end up retaining stale Recipient Contexts that are no
1185	   longer useful to verify incoming secure messages.

1187	   The Recipient ID ('kid') SHOULD NOT be considered as a persistent and
1188	   reliable identifier of a group member.  Such an indication can be
1189	   achieved only by using that member's public key, when verifying
1190	   countersignatures of received messages (in group mode), or when
1191	   verifying messages integrity-protected with pairwise keying material
1192	   derived from authentication credentials and associated asymmetric
1193	   keys (in pairwise mode).

1195	   Furthermore, applications MAY define policies to: i) delete
1196	   (long-)unused Recipient Contexts and reduce the impact on storage
1197	   space; as well as ii) check with the Group Manager that an
1198	   authentication credential with the public key included therein is
1199	   currently the one associated with a 'kid' value, after a number of
1200	   consecutive failed verifications.

1202	2.6.3.1.  New Sender ID for the Endpoint

1204	   The Group Manager may assign a new Sender ID to an endpoint, while
1205	   leaving the Gid, Master Secret, and Master Salt unchanged in the
1206	   group.  In this case, the Group Manager assigns a Sender ID that has
1207	   not been used in the group since the latest time when the current Gid
1208	   value was assigned to the group (see Section 12.2).

1210	   Having retrieved the new Sender ID, and potentially other missing
1211	   data for the long-term part of the Security Context, the endpoint can
1212	   derive a new Sender Context (see Section 2.2).  When doing so, the
1213	   endpoint resets the Sender Sequence Number in its Sender Context to
1214	   0, and derives a new Sender Key. This is in turn used to possibly
1215	   derive new Pairwise Sender Keys.

1217	   From then on, the endpoint MUST use its latest installed Sender
1218	   Context to protect outgoing messages.

1220	   The assignment of a new Sender ID may be the result of different
1221	   processes.  The endpoint may request a new Sender ID, e.g., because
1222	   of the impending exhaustion of the Sender Sequence Number space (see
1223	   Section 2.6.2).  An endpoint may request to re-join the group, e.g.,
1224	   because of losing the varying part of its Security Context (see
1225	   Section 2.6.1), and is provided with a new Sender ID together with
1226	   the latest data for the long-term part of the Security Context.

1228	   For the other group members, the Recipient Context corresponding to
1229	   the old Sender ID becomes stale (see Section 12.2).

1231	2.6.3.2.  New Security Context for the Group

1233	   The Group Manager may establish a new Security Context for the group
1234	   (see Section 12.2).  The Group Manager does not necessarily establish
1235	   a new Security Context for the group if one member has an outdated
1236	   Security Context (see Section 2.6.3.1), unless that was already
1237	   planned or required for other reasons.

1239	   All the group members need to acquire new Security Context parameters
1240	   from the Group Manager.  Once having acquired new Security Context
1241	   parameters, each group member performs the following actions.

1243	   *  From then on, it MUST NOT use the current Security Context to
1244	      start processing new messages for the considered group.

1246	   *  It completes any ongoing message processing for the considered
1247	      group.

1249	   *  It derives and installs a new Security Context.  In particular:

1251	      -  It re-derives the keying material stored in its Sender Context
1252	         and Recipient Contexts (see Section 2.2).  The Master Salt used
1253	         for the re-derivations is the updated Master Salt parameter if
1254	         provided by the Group Manager, or the empty byte string
1255	         otherwise.

1257	      -  It resets its Sender Sequence Number in its Sender Context to
1258	         0.

1260	      -  It re-initializes the Replay Window of each Recipient Context
1261	         as valid and with 0 as its current lower limit.

1263	      -  For each long exchange where it is a client and that it wants
1264	         to keep active, it sets the Response Number of each associated
1265	         server as not initialized (see Section 5.1).

1267	   From then on, it can resume processing new messages for the
1268	   considered group.  In particular:

1270	   *  It MUST use its latest installed Sender Context to protect
1271	      outgoing messages.

1273	   *  It SHOULD use only its latest installed Recipient Contexts to
1274	      process incoming messages, unless application policies admit to
1275	      temporarily retain and use the old, recent, Security Context (see
1276	      Section 14.5.1).

1278	   The distribution of a new Gid and Master Secret may result in
1279	   temporarily misaligned Security Contexts among group members.  In
1280	   particular, this may result in a group member not being able to
1281	   process messages received right after a new Gid and Master Secret
1282	   have been distributed.  A discussion on practical consequences and
1283	   possible ways to address them, as well as on how to handle the old
1284	   Security Context, is provided in Section 14.5.

1286	3.  The COSE Object

1288	   Building on Section 5 of [RFC8613], this section defines how to use
1289	   COSE [RFC9052] to wrap and protect data in the original message.
1290	   Like OSCORE, Group OSCORE uses the untagged COSE_Encrypt0 structure
1291	   with an Authenticated Encryption with Associated Data (AEAD)
1292	   algorithm.  Unless otherwise specified, the following modifications
1293	   to what is defined for OSCORE apply for both the group mode and the
1294	   pairwise mode of Group OSCORE.

1296	3.1.  Countersignature

1298	   When protecting a message in group mode, the 'unprotected' field MUST
1299	   additionally include the following parameter:

1301	   *  Countersignature0 version 2: its value is set to the
1302	      countersignature of the COSE object.

1304	      The countersignature is computed by the sender as described in
1305	      Sections 3.2 and 3.3 of [RFC9338], by using its private key and
1306	      according to the Signature Algorithm in the Security Context.

1308	      In particular, the Countersign_structure contains the context text
1309	      string "CounterSignature0", the external_aad as defined in
1310	      Section 3.4 of this document, and the ciphertext of the COSE
1311	      object as payload.

1313	3.1.1.  Clarifications on Using a Countersignature

1315	   The literature commonly refers to a countersignature as a signature
1316	   computed by an entity A over a document already protected by a
1317	   different entity B.

1319	   However, the COSE_Countersignature0 structure belongs to the set of
1320	   abbreviated countersignatures defined in Sections 3.2 and 3.3 of
1321	   [RFC9338], which were designed primarily to deal with the problem of
1322	   encrypted group messaging, but where it is required to know who
1323	   originated the message.

1325	   Since the parameters for computing or verifying the abbreviated
1326	   countersignature generated by A are provided by the same context used
1327	   to describe the security processing performed by B and to be
1328	   countersigned, these structures are applicable also when the two
1329	   entities A and B are actually the same one, like the sender of a
1330	   Group OSCORE message protected in group mode.

1332	3.2.  The 'kid' and 'kid context' parameters

1334	   The value of the 'kid' parameter in the 'unprotected' field of
1335	   response messages MUST be set to the Sender ID of the endpoint
1336	   transmitting the message, if the request was protected in group mode.
1337	   That is, unlike in [RFC8613], the 'kid' parameter is always present
1338	   in responses to a request that was protected in group mode.

1340	   The value of the 'kid context' parameter in the 'unprotected' field
1341	   of request messages MUST be set to the ID Context, i.e., the Group
1342	   Identifier value (Gid) of the group.  That is, unlike in [RFC8613],
1343	   the 'kid context' parameter is always present in requests.

1345	3.3.  Nonce Computation

1347	   The nonce is constructed like in OSCORE, with the difference that
1348	   Step 4 in Section 5.2 of [RFC8613] is replaced with:

1350	   4.  and then XOR with X bytes from the Common IV's start, where X is
1351	       the length in bytes of the nonce.

1353	   For example, if X = 7 and the Common IV is
1354	   0x00112233445566778899aabbcc (13 bytes), then the bytes to XOR are
1355	   0x00112233445566 (7 bytes).

1357	   The constructed nonce is used both by the AEAD Algorithm (see
1358	   Section 2.1.1) and by the Group Encryption Algorithm (see
1359	   Section 2.1.7), independent of whether they are AEAD or plain
1360	   encryption algorithms.  Algorithms that do not use a nonce are not
1361	   supported, as per Section 2.1.7.

1363	3.4.  Additional Authenticated Data

1365	   The external_aad of the Additional Authenticated Data (AAD) is
1366	   different compared to OSCORE [RFC8613] and is defined in this
1367	   section.

1369	   The same external_aad structure is used in group mode and pairwise
1370	   mode for encryption/decryption (see Section 5.3 of [RFC9052]), as
1371	   well as in group mode for computing and verifying the
1372	   countersignature (see Sections 3.2 and 3.3 of [RFC9338]).

1374	   In particular, the external_aad includes also the Signature
1375	   Algorithm, the Group Encryption Algorithm, the Pairwise Key Agreement
1376	   Algorithm, the value of the 'kid context' in the COSE object of the
1377	   request, the OSCORE Option of the protected message, the sender's
1378	   authentication credential, and the Group Manager's authentication
1379	   credential.

1381	   The external_aad SHALL be a CBOR array wrapped in a bstr object as
1382	   defined below, following the notation of [RFC8610]:

1384	     external_aad = bstr .cbor aad_array

1386	     aad_array = [
1387	        oscore_version : uint,
1388	        algorithms : [alg_aead : int / tstr / null,
1389	                      alg_group_enc : int / tstr / null,
1390	                      alg_signature : int / tstr / null,
1391	                      alg_pairwise_key_agreement : int / tstr / null],
1392	        request_kid : bstr,
1393	        request_piv : bstr,
1394	        options : bstr,
1395	        request_kid_context : bstr,
1396	        OSCORE_option : bstr,
1397	        sender_cred : bstr,
1398	        gm_cred : bstr
1399	     ]
1400	                           Figure 2: external_aad

1402	   Compared with Section 5.4 of [RFC8613], the aad_array has the
1403	   following differences.

1405	   *  The 'algorithms' array is extended as follows.

1407	      The parameter 'alg_aead' MUST be set to the CBOR simple value null
1408	      (0xf6) if the parameter AEAD Algorithm is not set in the Common
1409	      Context of the Security Context used (see Section 2.1.1).
1410	      Otherwise, regardless of whether the endpoint supports the
1411	      pairwise mode or not, this parameter MUST specify AEAD Algorithm
1412	      from the Common Context (see Section 2.1.1) as per Section 5.4 of
1413	      [RFC8613].

1415	      Furthermore, the 'algorithms' array additionally includes:

1417	      -  'alg_group_enc', which specifies Group Encryption Algorithm
1418	         from the Common Context of the Security Context used (see
1419	         Section 2.1.7).  This parameter MUST be set to the CBOR simple
1420	         value null (0xf6) if the parameter Group Encryption Algorithm
1421	         in the Common Context is not set.  Otherwise, regardless of
1422	         whether the endpoint supports the group mode or not, this
1423	         parameter MUST specify Group Encryption Algorithm as a CBOR
1424	         integer or text string, consistently with the "Value" field in
1425	         the "COSE Algorithms" Registry for this algorithm.

1427	      -  'alg_signature', which specifies Signature Algorithm from the
1428	         Common Context of the Security Context used (see
1429	         Section 2.1.8).  This parameter MUST be set to the CBOR simple
1430	         value null (0xf6) if the parameter Signature Algorithm in the
1431	         Common Context is not set.  Otherwise, regardless of whether
1432	         the endpoint supports the group mode or not, this parameter
1433	         MUST specify Signature Algorithm as a CBOR integer or text
1434	         string, consistently with the "Value" field in the "COSE
1435	         Algorithms" Registry for this algorithm.

1437	      -  'alg_pairwise_key_agreement', which specifies Pairwise Key
1438	         Agreement Algorithm from the Common Context of the Security
1439	         Context used (see Section 2.1.10).  This parameter MUST be set
1440	         to the CBOR simple value null (0xf6) if Pairwise Key Agreement
1441	         Algorithm in the Common Context is not set.  Otherwise,
1442	         regardless of whether the endpoint supports the pairwise mode
1443	         or not, this parameter MUST specify Pairwise Key Agreement
1444	         Algorithm as a CBOR integer or text string, consistently with
1445	         the "Value" field in the "COSE Algorithms" Registry for this
1446	         algorithm.

1448	   *  The new element 'request_kid_context' contains the value of the
1449	      'kid context' in the COSE object of the request (see Section 3.2).

1451	      This enables endpoints to safely keep a long exchange active
1452	      beyond a possible change of Gid (i.e., of ID Context), following a
1453	      group rekeying (see Section 12.2).  In fact, it ensures that every
1454	      response within a long exchange cryptographically matches with
1455	      only one request (i.e., the request associated with that long
1456	      exchange), rather than with multiple requests that were protected
1457	      with different keying material but share the same 'request_kid'
1458	      and 'request_piv' values.

1460	   *  The new element 'OSCORE_option', containing the value of the
1461	      OSCORE Option present in the protected message, encoded as a
1462	      binary string.  This prevents the attack described in Section 14.7
1463	      when using the group mode, as further explained in Section 14.7.2.

1465	      Note for implementation: this construction requires the OSCORE
1466	      Option of the message to be generated and finalized before
1467	      computing the ciphertext of the COSE_Encrypt0 object (when using
1468	      the group mode or the pairwise mode) and before calculating the
1469	      countersignature (when using the group mode).  Also, the aad_array
1470	      needs to be large enough to contain the largest possible OSCORE
1471	      Option.

1473	   *  The new element 'sender_cred', containing the sender's
1474	      authentication credential.  This parameter MUST be set to a CBOR
1475	      byte string, which encodes the sender's authentication credential
1476	      in its original binary representation made available to other
1477	      endpoints in the group (see Section 2.4).

1479	   *  The new element 'gm_cred', containing the Group Manager's
1480	      authentication credential.  This parameter MUST be set to a CBOR
1481	      byte string, which encodes the Group Manager's authentication
1482	      credential in its original binary representation made available to
1483	      other endpoints in the group (see Section 2.4).  This prevents the
1484	      attack described in Section 14.8.

1486	4.  OSCORE Header Compression

1488	   Group OSCORE relies on a header compression mechanism similar to the
1489	   one used by OSCORE and specified in Section 4.1.  Examples are
1490	   provided in Section 4.3.

1492	4.1.  Encoding of the OSCORE Option Value and Group OSCORE Payload

1494	   The OSCORE header compression defined in Section 6 of [RFC8613] is
1495	   used for compactly encoding the COSE_Encrypt0 object specified in
1496	   Section 3 of this document, with the following differences.

1498	   *  When the Group OSCORE message is protected in group mode, the
1499	      message payload SHALL encode the ciphertext of the COSE object,
1500	      concatenated with the encrypted countersignature of the COSE
1501	      object.  That is:

1503	      -  The plain, original countersignature of the COSE object, namely
1504	         SIGNATURE, is specified in the "Countersignature0 version 2"
1505	         parameter within the 'unprotected' field of the COSE object
1506	         (see Section 3.1).

1508	      -  The encrypted countersignature, namely ENC_SIGNATURE, is
1509	         computed as

1511	         ENC_SIGNATURE = SIGNATURE XOR KEYSTREAM

1513	         where KEYSTREAM is derived as per Section 4.2.

1515	   *  When the Group OSCORE message is protected in pairwise mode, the
1516	      message payload SHALL encode the ciphertext of the COSE object.

1518	   *  This document defines the usage of the sixth least significant
1519	      bit, called "Group Flag", in the first byte of the OSCORE Option
1520	      containing the OSCORE flag bits.  This flag bit is specified in
1521	      Section 15.1.

1523	   *  The Group Flag MUST be set to 1 if the Group OSCORE message is
1524	      protected using the group mode (see Section 7).

1526	   *  The Group Flag MUST be set to 0 if the Group OSCORE message is
1527	      protected using the pairwise mode (see Section 8).  The Group Flag
1528	      MUST also be set to 0 for ordinary OSCORE messages processed
1529	      according to [RFC8613].

1531	4.2.  Keystream Derivation for Countersignature Encryption

1533	   The following defines how an endpoint derives the keystream
1534	   KEYSTREAM, used to encrypt/decrypt the countersignature of an
1535	   outgoing/incoming message M protected in group mode.

1537	   The keystream SHALL be derived as follows, by using the HKDF
1538	   Algorithm from the Common Context (see Section 3.2 of [RFC8613]),
1539	   which consists of composing the HKDF-Extract and HKDF-Expand steps
1540	   [RFC5869].

1542	   KEYSTREAM = HKDF(salt, IKM, info, L)

1544	   The input parameters of HKDF are as follows.

1546	   *  salt takes as value the Partial IV (PIV) used to protect M.  Note
1547	      that, if M is a response, salt takes as value either: i) the fresh
1548	      Partial IV generated by the server and included in the response;
1549	      or ii) the same Partial IV of the request generated by the client
1550	      and not included in the response.

1552	   *  IKM is the Signature Encryption Key from the Common Context (see
1553	      Section 2.1.9).

1555	   *  info is the serialization of a CBOR array with the structure
1556	      defined below, following the notation of [RFC8610]:

1558	      info = [
1559	        id : bstr,
1560	        id_context : bstr,
1561	        type : bool,
1562	        L : uint
1563	      ]

1565	   where:

1567	   *  id is the Sender ID of the endpoint that generated PIV.

1569	   *  id_context is the ID Context (Gid) used when protecting M.

1571	      Note that, in the case of group rekeying, a server might use a
1572	      different Gid when protecting a response, compared to the Gid that
1573	      it used to verify (that the client used to protect) the request,
1574	      see Section 7.3.

1576	   *  type is the CBOR simple value true (0xf5) if M is a request, or
1577	      the CBOR simple value false (0xf4) otherwise.

1579	   *  L is the size of the countersignature, as per Signature Algorithm
1580	      from the Common Context (see Section 2.1.8), in bytes.

1582	4.3.  Examples of Compressed COSE Objects

1584	   This section covers a list of OSCORE Header Compression examples of
1585	   Group OSCORE used in group mode (see Section 4.3.1) or in pairwise
1586	   mode (see Section 4.3.2).

1588	   The examples assume that the COSE_Encrypt0 object is set (which means
1589	   the CoAP message and cryptographic material is known).  Note that the
1590	   examples do not include the full CoAP unprotected message or the full
1591	   Security Context, but only the input necessary to the compression
1592	   mechanism, i.e., the COSE_Encrypt0 object.  The output is the
1593	   compressed COSE object as defined in Section 4.1 and divided into two
1594	   parts, since the object is transported in two CoAP fields: OSCORE
1595	   Option and payload.

1597	   The examples assume that the plaintext (see Section 5.3 of [RFC8613])
1598	   is 6 bytes long, and that the AEAD tag is 8 bytes long, hence
1599	   resulting in a ciphertext which is 14 bytes long.  When using the
1600	   group mode, the COSE_Countersignature0 byte string as described in
1601	   Section 3 is assumed to be 64 bytes long.

1603	4.3.1.  Examples in Group Mode

1605	   Request with ciphertext = 0xaea0155667924dff8a24e4cb35b9, kid = 0x25,
1606	   Partial IV = 5 and kid context = 0x44616c.

1608	   *  Before compression (96 bytes):

1610	      [
1611	        / protected / h'',
1612	        / unprotected / {
1613	          / kid /                           4 : h'25',
1614	          / Partial IV /                    6 : h'05',
1615	          / kid context /                  10 : h'44616c',
1616	          / Countersignature0 version 2 /  12 : h'66e6d9b0
1617	          db009f3e105a673f8855611726caed57f530f8cae9d0b168
1618	          513ab949fedc3e80a96ebe94ba08d3f8d3bf83487458e2ab
1619	          4c2f936ff78b50e33c885e35'
1620	        },
1621	        / ciphertext / h'aea0155667924dff8a24e4cb35b9'
1622	      ]

1624	   *  After compression (85 bytes):

1626	      Flag byte: 0b00111001 = 0x39 (1 byte)

1628	      Option Value: 0x39 05 03 44 61 6c 25 (7 bytes)

1630	      Payload: 0xaea0155667924dff8a24e4cb35b9 de9e ... f1
1631	      (14 bytes + size of the encrypted countersignature)

1633	   Response with ciphertext = 0x60b035059d9ef5667c5a0710823b, kid = 0x52
1634	   and no Partial IV.

1636	   *  Before compression (88 bytes):

1638	      [
1639	        / protected / h'',
1640	        / unprotected / {
1641	          / kid /                           4 : h'52',
1642	          / Countersignature0 version 2 /  12 : h'f5b659b8
1643	          24487eb349c5c5c8a3fe401784cade2892725438e8be0fab
1644	          daa2867ee6d29f68edb0818e50ebf98c28b923d0205f5162
1645	          e73662e27c1a3ec562a49b80'
1646	        },
1647	        / ciphertext / h'60b035059d9ef5667c5a0710823b'
1648	      ]

1650	   *  After compression (80 bytes):

1652	      Flag byte: 0b00101000 = 0x28 (1 byte)

1654	      Option Value: 0x28 52 (2 bytes)

1656	      Payload: 0x60b035059d9ef5667c5a0710823b ca1e ... b3
1657	      (14 bytes + size of the encrypted countersignature)

1659	4.3.2.  Examples in Pairwise Mode

1661	   Request with ciphertext = 0xaea0155667924dff8a24e4cb35b9, kid = 0x25,
1662	   Partial IV = 5 and kid context = 0x44616c.

1664	   *  Before compression (29 bytes):

1666	      [
1667	        / protected / h'',
1668	        / unprotected / {
1669	          / kid /           4 : h'25',
1670	          / Partial IV /    6 : h'05',
1671	          / kid context /  10 : h'44616c'
1672	        },
1673	        / ciphertext / h'aea0155667924dff8a24e4cb35b9'
1674	      ]

1676	   *  After compression (21 bytes):

1678	      Flag byte: 0b00011001 = 0x19 (1 byte)

1680	      Option Value: 0x19 05 03 44 61 6c 25 (7 bytes)

1682	      Payload: 0xaea0155667924dff8a24e4cb35b9 (14 bytes)

1684	   Response with ciphertext = 0x60b035059d9ef5667c5a0710823b and no
1685	   Partial IV.

1687	   *  Before compression (18 bytes):

1689	      [
1690	        / protected / h'',
1691	        / unprotected / {},
1692	        / ciphertext / h'60b035059d9ef5667c5a0710823b'
1693	      ]

1695	   *  After compression (14 bytes):

1697	      Flag byte: 0b00000000 = 0x00 (1 byte)

1699	      Option Value: 0x (0 bytes)

1701	      Payload: 0x60b035059d9ef5667c5a0710823b (14 bytes)

1703	5.  Message Binding, Sequence Numbers, Freshness, and Replay Protection

1705	   Like OSCORE, Group OSCORE provides message binding of responses to
1706	   requests, as well as uniqueness of (key, nonce) pairs (see Sections
1707	   7.1 and 7.2 of [RFC8613], respectively).

1709	5.1.  Supporting Multiple Responses in Long Exchanges

1711	   For each of its ongoing long exchanges, a client maintains one
1712	   Response Number for each different server.  Then, separately for each
1713	   server, the client uses the associated Response Number to perform
1714	   ordering and replay protection of responses received from that server
1715	   within that long exchange (see Section 5.3.1).

1717	   That is, the Response Number has the same purpose that the
1718	   Notification Number has in OSCORE (see Section 4.1.3.5.2 of
1719	   [RFC8613]), but a client uses it for handling any response from the
1720	   associated server within a long exchange.

1722	   Group OSCORE allows a long exchange to remain active indefinitely,
1723	   even if the group is rekeyed (thus changing the ID Context) or the
1724	   client obtains a new Sender ID.

1726	   As defined in Section 7, this is achieved by the client and server(s)
1727	   storing the 'kid' and 'kid context' used in the original request,
1728	   throughout the whole duration of the long exchange.

1730	   Upon leaving the group or before re-joining the group, a group member
1731	   MUST terminate all the ongoing long exchanges that it has started in
1732	   the group as a client.  This frees up the CoAP Token associated with
1733	   the corresponding request.

1735	5.2.  Freshness

1737	   If the application requires freshness, e.g., according to time- or
1738	   event-based policies (see Section 2.5.1 of [RFC9175]), a server can
1739	   use the approach in Section 9 as a variant of the Challenge-Response
1740	   procedure based on the Echo Option [RFC9175] before delivering
1741	   request messages from a client to the application.

1743	   Like in OSCORE [RFC8613], assuming an honest server, the message
1744	   binding guarantees that a response is not older than the request it
1745	   replies to.  Therefore, building on Section 7.3 of [RFC8613], the
1746	   following properties hold for Group OSCORE.

1748	   *  The freshness of a response can be assessed if it is received soon
1749	      after the request.

1751	      For responses within a long exchange, this assessment gets weaker
1752	      with time.  If such responses are Observe notifications [RFC7641],
1753	      it is RECOMMENDED that the client regularly re-register the
1754	      observation.

1756	      If the request was neither a group request nor an Observe request,
1757	      there is at most a single valid response and only from one,
1758	      individually targeted server in the group.  Thus, freshness can be
1759	      assessed depending on when the request was sent.

1761	   *  It is not guaranteed that a misbehaving server did not create the
1762	      response before receiving the request, i.e., Group OSCORE does not
1763	      verify server aliveness.

1765	   *  For requests and responses, the received Partial IV allows a
1766	      recipient to determine the relative order of requests or
1767	      responses.

1769	5.3.  Replay Protection

1771	   Like in OSCORE [RFC8613], the replay protection relies on the Partial
1772	   IV of incoming messages.  A server updates the Replay Window of its
1773	   Recipient Contexts based on the Partial IV values in received request
1774	   messages, which correspond to the Sender Sequence Numbers of the
1775	   clients.  Note that there can be large jumps in these Sender Sequence
1776	   Number values, for example when a client exchanges unicast messages
1777	   with other servers.  The operation of validating the Partial IV and
1778	   performing replay protection MUST be atomic.  Section 2.6.1 and
1779	   Section 2.6.3.2 describe the update of Replay Windows after the loss
1780	   of data from the Security Context and the retrieving of new Security
1781	   Context parameters.

1783	   The protection from replay of requests is performed as per
1784	   Section 7.4 of [RFC8613], separately for each client and by
1785	   leveraging the Replay Window in the corresponding Recipient Context.
1786	   The protection from replay of responses in a long exchange is
1787	   performed as defined in Section 5.3.1 of this document.

1789	5.3.1.  Replay Protection of Responses

1791	   A client uses the method defined in this section in order to check
1792	   whether a received response is a replay.

1794	   This especially applies to responses received within a long exchange,
1795	   during which multiple such responses can be received from the same
1796	   server to the corresponding request.  These include Observe
1797	   notifications [RFC7641]; and non-notification responses as a reply to
1798	   a group request, which the client can receive until the CoAP Token
1799	   value associated with the group request is freed up (see
1800	   Section 3.1.6 of [I-D.ietf-core-groupcomm-bis]).

1802	   When sending a response (both successful and error), a server MUST
1803	   include its Sender Sequence Number as Partial IV in the response,
1804	   except when sending the first response to the corresponding request,
1805	   in which case the Partial IV in the response MAY be omitted.

1807	   In order to protect against replay, the client SHALL maintain for
1808	   each ongoing long exchange one Response Number for each different
1809	   server.  The Response Number is a non-negative integer containing the
1810	   largest Partial IV of the responses received from that server during
1811	   the long exchange, while using the same Security Context.

1813	   Then, separately for each server, the client uses the associated
1814	   Response Number to perform ordering and replay protection of the
1815	   responses from that server during the long exchange, by comparing
1816	   their Partial IVs with one another and against the Response Number.

1818	   For every long exchange, the Response Number associated with a server
1819	   is initialized to the Partial IV of the response from that server
1820	   such that, within the long exchange, it is the first response from
1821	   that server to include a Partial IV and to be successfully verified
1822	   with the used Security Context.  Note that, when a new Security
1823	   Context is established in the group, the client sets the Response
1824	   Number of each associated server as not initialized (see
1825	   Section 2.6.3.2), hence later responses within the same long exchange
1826	   and protected with the new Security Context will result in a new
1827	   initialization of Response Numbers.  Furthermore, for every long
1828	   exchange, a client MUST only accept at most one response without
1829	   Partial IV from each server, and treat it as the oldest response from
1830	   that server within that long exchange.

1832	   During a long exchange, a client receiving a response containing a
1833	   Partial IV SHALL compare the Partial IV with the Response Number
1834	   associated with the replying server within that long exchange.  The
1835	   client MUST stop processing a response from a server, if that
1836	   response has a Partial IV that has been previously received from that
1837	   server during that long exchange, while using the same Security
1838	   Context.

1840	   Applications MAY decide that a client only processes responses within
1841	   a long exchange if those have a greater Partial IV than the Response
1842	   Number associated with the replying server within that long exchange.
1843	   This limits the storage overhead on the client to maintaining one
1844	   Response Number per replying server within the long exchange.
1845	   Conversely, more permissive applications can allow clients to also
1846	   process responses that have a smaller Partial IV than the Response
1847	   Number associated with the replying server.  For a client, the
1848	   ability to detect previously received Partial IVs while admitting the
1849	   processing of such responses comes at the cost of additional storage
1850	   overhead, for which a reasonable bound has to be defined by the
1851	   application.  A possible way to achieve that relies on using a
1852	   sliding Replay Window uniquely paired with the replying server within
1853	   the long exchange, similarly to that used by a server for detecting
1854	   replayed requests.

1856	   If the verification of the response succeeds, and the received
1857	   Partial IV (when included) was greater than the Response Number
1858	   associated with the replying server, then the client SHALL overwrite
1859	   that Response Number with the received Partial IV.

1861	   As long as a server uses the same Security Context to protect its
1862	   responses to the same request, the client MUST consider the response
1863	   with the highest Partial IV as the freshest response from that server
1864	   among those protected with that Security Context, regardless of the
1865	   order of arrival.  Within a long exchange, implementations need to
1866	   make sure that a response without Partial IV is considered the oldest
1867	   response from the replying server within that long exchange.

1869	   The method defined in this section is not relevant for responses to
1870	   requests that are neither group requests nor Observe requests.  In
1871	   fact, for each of such requests, there is at most one response and
1872	   only from one individually targeted server in the group.

1874	6.  Message Reception

1876	   Upon receiving a protected message, a recipient endpoint retrieves a
1877	   Security Context as in [RFC8613].  An endpoint MUST be able to
1878	   distinguish between a Security Context to process OSCORE messages as
1879	   in [RFC8613] and a Group OSCORE Security Context to process Group
1880	   OSCORE messages as defined in this document.

1882	   The way to accomplish this distinction is implementation specific.
1883	   For example, an endpoint can take into account the different
1884	   structure of the Security Context defined in Section 2, e.g., based
1885	   on the presence of Signature Algorithm and Pairwise Key Agreement
1886	   Algorithm in the Common Context.  Alternatively, at the cost of
1887	   increasing storage, implementations can use an additional parameter
1888	   in the Security Context, to explicitly mark that it is intended for
1889	   processing Group OSCORE messages.

1891	   If either of the following conditions holds, a recipient endpoint
1892	   MUST discard the incoming protected message:

1894	   *  The Group Flag is set to 0 and the retrieved Security Context is
1895	      associated with an OSCORE group, but the endpoint does not support
1896	      the pairwise mode or any of the following parameters is not set in
1897	      the Security Context: the AEAD Algorithm and the Pairwise Key
1898	      Agreement Algorithm.

1900	   *  The Group Flag is set to 1 and the retrieved Security Context is
1901	      associated with an OSCORE group, but the endpoint does not support
1902	      the group mode or any of the following parameters is not set in
1903	      the Security Context: the Group Encryption Algorithm and the
1904	      Signature Algorithm.

1906	   *  The Group Flag is set to 1 but there is no Security Context
1907	      associated with an OSCORE group.

1909	      Future specifications may define how to process incoming messages
1910	      protected with Security Contexts as in [RFC8613], when the Group
1911	      Flag bit is set to 1.

1913	   Otherwise, if a Security Context associated with an OSCORE group is
1914	   retrieved, the recipient endpoint processes the message with Group
1915	   OSCORE, using the group mode (see Section 7) if the Group Flag is set
1916	   to 1, or the pairwise mode (see Section 8) if the Group Flag is set
1917	   to 0.

1919	   Note that if the Group Flag is set to 0 and the recipient endpoint
1920	   retrieves a Security Context which is valid to process the message
1921	   but is not associated with an OSCORE group, then the message is
1922	   processed according to [RFC8613].

1924	7.  Message Processing in Group Mode

1926	   When using the group mode, messages are protected and processed as
1927	   specified in [RFC8613] with the modifications described in this
1928	   section.  The security objectives of the group mode are discussed in
1929	   Appendix A.2.

1931	   The possible use of the group mode is indicated by the Group Manager
1932	   as part of the group data provided to new group members when joining
1933	   the group, according to which the parameters Group Encryption
1934	   Algorithm and Signature Algorithm in the Security Context are set
1935	   (see Section 2).

1937	   During all the steps of the message processing, an endpoint MUST use
1938	   the same Security Context for the considered group.  That is, an
1939	   endpoint MUST NOT install a new Security Context for that group (see
1940	   Section 2.6.3.2) until the message processing is completed.

1942	   The group mode SHOULD be used to protect group requests intended for
1943	   multiple recipients or for the whole group.  This applies to both
1944	   requests directly addressed to multiple recipients, e.g., sent by the
1945	   client over multicast, as well as requests sent by the client over
1946	   unicast to a proxy that forwards them to the intended recipients over
1947	   multicast [I-D.ietf-core-groupcomm-bis].  Exceptions where the
1948	   requirement above is not fulfilled and the pairwise mode is used to
1949	   protect group requests include: the efficient discovery of a server's
1950	   address in the group (see Section 8.1); or the enabling of simple
1951	   constructions where a variation of the pairwise mode protects
1952	   requests possibly intended to multiple servers, in such a way that
1953	   the corresponding responses are effectively cacheable by
1954	   intermediaries (e.g., see [I-D.amsuess-core-cachable-oscore]).

1956	   As per [RFC7252][I-D.ietf-core-groupcomm-bis], group requests sent
1957	   over multicast MUST be Non-confirmable, and thus are not
1958	   retransmitted by the CoAP messaging layer.  Instead, applications
1959	   should store such outgoing messages for a predefined, sufficient
1960	   amount of time, in order to correctly perform potential
1961	   retransmissions at the application layer.  If performed, these
1962	   retransmissions are repetitions of previous protected messages, which
1963	   the sender endpoint does not protect again with Group OSCORE.

1965	   According to Section 5.2.3 of [RFC7252], responses to Non-confirmable
1966	   group requests SHOULD also be Non-confirmable, but endpoints MUST be
1967	   prepared to receive Confirmable responses in reply to a Non-
1968	   confirmable group request.  Confirmable group requests are
1969	   acknowledged when sent over non-multicast transports, as specified in
1970	   [RFC7252].

1972	   Furthermore, endpoints in the group locally perform error handling
1973	   and processing of invalid messages according to the same principles
1974	   adopted in [RFC8613].  In addition, a recipient MUST stop processing
1975	   and reject any message that is malformed and that does not follow the
1976	   format specified in Section 3 of this document, or that is not
1977	   cryptographically validated in a successful way as per the processing
1978	   defined in Section 7.2 and Section 7.4 of this document.

1980	   In either case, it is RECOMMENDED that a server does not send back
1981	   any error message in reply to a received request if either of the
1982	   following conditions holds:

1984	   *  The server is not able to identify whether the received request is
1985	      a group request, i.e., as sent to all servers in the group.

1987	   *  The server identifies the received request as a group request.

1989	   This prevents servers from replying with multiple error messages to a
1990	   client sending a group request, so avoiding the risk of flooding and
1991	   possibly congesting the network.

1993	7.1.  Protecting the Request

1995	   When using the group mode to protect a request, a client proceeds as
1996	   described in Section 8.1 of [RFC8613] with the following
1997	   modifications.

1999	   *  In Step 2, the Additional Authenticated Data is modified as
2000	      described in Section 3 of this document.

2002	   *  In Step 4, the encryption of the COSE object is modified as
2003	      described in Section 3 of this document.  The encoding of the
2004	      compressed COSE object is modified as described in Section 4 of
2005	      this document.  In particular, the Group Flag MUST be set to 1.
2006	      The Group Encryption Algorithm from the Common Context MUST be
2007	      used.

2009	   *  In Step 5, the countersignature is computed and the format of the
2010	      OSCORE message is modified as described in Section 3 and Section 4
2011	      of this document.  In particular, the payload of the Group OSCORE
2012	      message includes also the encrypted countersignature.

2014	   In addition, the following applies when sending a request that
2015	   establishes a long exchange.

2017	   *  If the client intends to keep the long exchange active beyond a
2018	      possible change of Sender ID, the client MUST store the value of
2019	      the 'kid' parameter from the request, and retain it until the long
2020	      exchange is terminated.  Even in case the client is individually
2021	      rekeyed and receives a new Sender ID from the Group Manager (see
2022	      Section 2.6.3.1), the client MUST NOT update the stored 'kid'
2023	      parameter value associated with the long exchange and the
2024	      corresponding request.

2026	   *  If the client intends to keep the long exchange active beyond a
2027	      possible change of ID Context following a group rekeying (see
2028	      Section 12.2), then the following applies.

2030	      -  The client MUST store the value of the 'kid context' parameter
2031	         from the request, and retain it until the long exchange is
2032	         terminated.  Upon establishing a new Security Context with a
2033	         new Gid as ID Context (see Section 2.6.3.2), the client MUST
2034	         NOT update the stored 'kid context' parameter value associated
2035	         with the long exchange and the corresponding request.

2037	      -  The client MUST store an invariant identifier of the group,
2038	         which is immutable even if the Security Context of the group is
2039	         re-established.  For example, this invariant identifier can be
2040	         the "group name" in [I-D.ietf-ace-key-groupcomm-oscore], where
2041	         it is used for joining the group and retrieving the current
2042	         group keying material from the Group Manager.

2044	         After a group rekeying, the client might have missed both the
2045	         rekeying messages and the servers' first responses that are
2046	         protected with the new Security Context and include the new ID
2047	         Context (Gid) in the 'kid context' parameter (see Section 7.3).
2048	         In such a case, while still not knowing the new ID Context
2049	         (Gid) used in the group, the client is able to retrieve the
2050	         current group keying material from the Group Manager, using the
2051	         invariant identifier to unambiguously refer to the group.

2053	7.2.  Verifying the Request

2055	   Upon receiving a protected request with the Group Flag set to 1,
2056	   following the procedure in Section 6, a server proceeds as described
2057	   in Section 8.2 of [RFC8613] with the following modifications.

2059	   *  In Step 2, the decoding of the compressed COSE object follows
2060	      Section 4 of this document.  In particular:

2062	      -  If the server discards the request due to not retrieving a
2063	         Security Context associated with the OSCORE group, the server
2064	         MAY respond with a 4.01 (Unauthorized) error message.  When
2065	         doing so, the server MAY set an Outer Max-Age Option with value
2066	         zero, and MAY include a descriptive string as diagnostic
2067	         payload.

2069	      -  If the received 'kid context' matches an existing ID Context
2070	         (Gid) but the received 'kid' does not match any Recipient ID in
2071	         this Security Context, then the server MAY create a new
2072	         Recipient Context for this Recipient ID and initialize it
2073	         according to Section 3 of [RFC8613], and also retrieve the
2074	         authentication credential associated with the Recipient ID to
2075	         be stored in the new Recipient Context.  Such a configuration
2076	         is application specific.  If the application does not specify
2077	         dynamic derivation of new Recipient Contexts, then the server
2078	         SHALL stop processing the request.

2080	   *  In Step 4, the Additional Authenticated Data is modified as
2081	      described in Section 3 of this document.

2083	   *  In Step 6, the server also verifies the countersignature by using
2084	      the public key from the client's authentication credential stored
2085	      in the associated Recipient Context.  In particular:

2087	      -  If the server does not have the public key of the client yet,
2088	         the server MUST stop processing the request and MAY respond
2089	         with a 5.03 (Service Unavailable) response.  The response MAY
2090	         include a Max-Age Option, indicating to the client the number
2091	         of seconds after which to retry.  If the Max-Age Option is not
2092	         present, Section 5.10.5 of [RFC7252] specifies a default retry
2093	         time of 60 seconds.

2095	      -  The signature verification as defined below SHOULD be performed
2096	         before decrypting the COSE object.  An exception applies to
2097	         implementations that cannot perform the two steps in this
2098	         order.  Those implementations MUST ensure that no access to the
2099	         plaintext is possible before a successful signature
2100	         verification and MUST prevent any possible leak of time-related
2101	         information that can yield side-channel attacks.

2103	      -  The server retrieves the encrypted countersignature
2104	         ENC_SIGNATURE from the message payload, and computes the
2105	         original countersignature SIGNATURE as

2107	         SIGNATURE = ENC_SIGNATURE XOR KEYSTREAM

2109	         where KEYSTREAM is derived as per Section 4.2.

2111	      -  The server verifies the original countersignature SIGNATURE as
2112	         described in Sections 3.2 and 3.3 of [RFC9338] by using the
2113	         client's public key and according to the Signature Algorithm in
2114	         the Security Context.

2116	         In particular, the Countersign_structure contains the context
2117	         text string "CounterSignature0", the external_aad as defined in
2118	         Section 3.4 of this document, and the ciphertext of the COSE
2119	         object as payload.

2121	      -  If the signature verification fails, the server SHALL stop
2122	         processing the request, SHALL NOT update the Replay Window, and
2123	         MAY respond with a 4.00 (Bad Request) response.  Such a
2124	         response MAY include an Outer Max-Age Option with value zero,
2125	         and its diagnostic payload MAY contain a string, which, if
2126	         present, MUST be "Decryption failed" as if the decryption of
2127	         the COSE object had failed.

2129	      -  When decrypting the COSE object using the Recipient Key, the
2130	         Group Encryption Algorithm from the Common Context MUST be
2131	         used.

2133	   *  Additionally, if the used Recipient Context was created upon
2134	      receiving this request and the message is not verified
2135	      successfully, the server MAY delete that Recipient Context.  When
2136	      this behavior is specified by the application, it mitigates
2137	      attacks that aim at overloading the server's storage.

2139	      If the server deletes the used Recipient Context in this
2140	      particular circumstance, then this deletion does not require the
2141	      server to initialize as invalid the Replay Window of any new
2142	      Recipient Context created later within the Security Context (see
2143	      Section 2.6.1.2).

2145	   A server SHOULD NOT process a request if the received Recipient ID
2146	   ('kid') is equal to its own Sender ID in its own Sender Context.
2147	   However, in some applications the server can prepare a request to be
2148	   sent to itself (e.g., see
2149	   [I-D.ietf-core-observe-multicast-notifications]), in which case such
2150	   requests would be expected.

2152	   In addition, the following applies if the request establishes a long
2153	   exchange and the server intends to reply with multiple responses.

2155	   *  The server MUST store the value of the 'kid' parameter from the
2156	      request, and retain it until the last response has been sent.  The
2157	      server MUST NOT update the stored value of the 'kid' parameter
2158	      associated with the request, even if the client is individually
2159	      rekeyed and starts using a new Sender ID received from the Group
2160	      Manager (see Section 2.6.3.1).

2162	   *  The server MUST store the value of the 'kid context' parameter
2163	      from the request, and retain it until the last response has been
2164	      sent, i.e., beyond a possible change of ID Context following a
2165	      group rekeying (see Section 12.2).  That is, upon establishing a
2166	      new Security Context with a new Gid as ID Context (see
2167	      Section 2.6.3.2), the server MUST NOT update the stored value of a
2168	      'kid context' parameter associated with the request.

2170	7.3.  Protecting the Response

2172	   When using the group mode to protect a response, a server proceeds as
2173	   described in Section 8.3 of [RFC8613] with the following
2174	   modifications.

2176	   Note that the server always protects a response with the Sender
2177	   Context from its latest Security Context, and that establishing a new
2178	   Security Context resets the Sender Sequence Number to 0 (see
2179	   Section 2.6.3.1 and Section 2.6.3.2).

2181	   *  In Step 2, the Additional Authenticated Data is modified as
2182	      described in Section 3 of this document.

2184	      In addition, the following applies if the server intends to reply
2185	      with multiple responses within the long exchange established by
2186	      the corresponding request.

2188	      -  The server MUST use the stored value of the 'kid' parameter
2189	         from the request (see Section 7.2), as value for the
2190	         'request_kid' parameter in the external_aad (see Section 3.4).

2192	      -  The server MUST use the stored value of the 'kid context'
2193	         parameter from the request (see Section 7.2), as value for the
2194	         'request_kid_context' parameter in the external_aad (see
2195	         Section 3.4).

2197	   *  In Step 3, if either of the following conditions holds, the server
2198	      MUST include its Sender Sequence Number as Partial IV in the
2199	      response and use it to build the nonce to protect the response.
2200	      This prevents the server from reusing the nonce from the request
2201	      together with the same encryption key.

2203	      -  The response is not the first response that the server sends to
2204	         the request.

2206	      -  The server is using a different Security Context for the
2207	         response than the one that was used to verify the request (see
2208	         Section 12.2).

2210	   *  In Step 4, the encryption of the COSE object is modified as
2211	      described in Section 3 of this document.  The encoding of the
2212	      compressed COSE object is modified as described in Section 4 of
2213	      this document.  In particular, the Group Flag MUST be set to 1.
2214	      The Group Encryption Algorithm from the Common Context MUST be
2215	      used.

2217	      In addition, the following applies.

2219	      -  If the server is using a different ID Context (Gid) for the
2220	         response than the one that was used to verify the request (see
2221	         Section 12.2) and this is the first response from the server to
2222	         that request, then the new ID Context MUST be included in the
2223	         'kid context' parameter of the response.

2225	      -  The server may be replying to a request that was protected with
2226	         an old Security Context.  After completing the establishment of
2227	         a new Security Context, the server MUST protect all the
2228	         responses to that request with the Sender Context of the new
2229	         Security Context.

2231	         For each ongoing long exchange, the server can help the client
2232	         to synchronize, by including also the 'kid context' parameter
2233	         in responses following a group rekeying, with value set to the
2234	         ID Context (Gid) of the new Security Context.

2236	         If there is a known upper limit to the duration of a group
2237	         rekeying, the server SHOULD include the 'kid context' parameter
2238	         during that time.  Otherwise, the server SHOULD include it
2239	         until the Max-Age has expired for the last response sent before
2240	         the installation of the new Security Context.

2242	      -  The server can obtain a new Sender ID from the Group Manager
2243	         when individually rekeyed (see Section 2.6.3.1) or when re-
2244	         joining the group.  In such a case, the server can help the
2245	         client to synchronize by including the 'kid' parameter in a
2246	         response protected in group mode even when the request was
2247	         protected in pairwise mode (see Section 8.3).

2249	         That is, when responding to a request protected in pairwise
2250	         mode, the server SHOULD include the 'kid' parameter in a
2251	         response protected in group mode, if it is replying to that
2252	         client for the first time since the assignment of its new
2253	         Sender ID.

2255	   *  In Step 5, the countersignature is computed and the format of the
2256	      OSCORE message is modified as described in Section 3 and Section 4
2257	      of this document.  In particular the payload of the Group OSCORE
2258	      message includes also the encrypted countersignature (see
2259	      Section 4.1).

2261	7.4.  Verifying the Response

2263	   Upon receiving a protected response with the Group Flag set to 1,
2264	   following the procedure in Section 6, a client proceeds as described
2265	   in Section 8.4 of [RFC8613] with the modifications described in this
2266	   section.

2268	   Note that a client may receive a response protected with a Security
2269	   Context different from the one used to protect the corresponding
2270	   request, and that, upon the establishment of a new Security Context,
2271	   the client re-initializes its Replay Windows in its Recipient
2272	   Contexts (see Section 12.2).

2274	   *  In Step 2, the decoding of the compressed COSE object is modified
2275	      as described in Section 4 of this document.  In particular, a
2276	      'kid' may not be present if the response is a reply to a request
2277	      protected in pairwise mode.  In such a case, the client assumes
2278	      the response 'kid' to be the Recipient ID for the server for which
2279	      the request protected in pairwise mode was intended.

2281	      If the response 'kid context' matches an existing ID Context (Gid)
2282	      but the received/assumed 'kid' does not match any Recipient ID in
2283	      this Security Context, then the client MAY create a new Recipient
2284	      Context for this Recipient ID and initialize it according to
2285	      Section 3 of [RFC8613], and also retrieve the authentication
2286	      credential associated with the Recipient ID to be stored in the
2287	      new Recipient Context.  If the application does not specify
2288	      dynamic derivation of new Recipient Contexts, then the client
2289	      SHALL stop processing the response.

2291	   *  In Step 3, the Additional Authenticated Data is modified as
2292	      described in Section 3 of this document.

2294	      In addition, the following applies if the client processes a
2295	      response to a request within a long exchange.

2297	      -  The client MUST use the stored value of the 'kid' parameter
2298	         from the request (see Section 7.1), as value for the
2299	         'request_kid' parameter in the external_aad (see Section 3.4).

2301	      -  The client MUST use the stored value of the 'kid context'
2302	         parameter from the request (see Section 7.1), as value for the
2303	         'request_kid_context' parameter in the external_aad (see
2304	         Section 3.4).

2306	      This ensures that, throughout a long exchange, the client can
2307	      correctly verify the received responses, even if the client is
2308	      individually rekeyed and starts using a new Sender ID received
2309	      from the Group Manager (see Section 2.6.3.1), as well as when it
2310	      installs a new Security Context with a new ID Context (Gid)
2311	      following a group rekeying (see Section 12.2).

2313	   *  In Step 5, the client also verifies the countersignature by using
2314	      the public key from the server's authentication credential stored
2315	      in the associated Recipient Context.  In particular:

2317	      -  The signature verification as defined below SHOULD be performed
2318	         before decrypting the COSE object.  An exception applies to
2319	         implementations that cannot perform the two steps in this
2320	         order.  Those implementations MUST ensure that no access to the
2321	         plaintext is possible before a successful signature
2322	         verification and MUST prevent any possible leak of time-related
2323	         information that can yield side-channel attacks.

2325	      -  The client retrieves the encrypted countersignature
2326	         ENC_SIGNATURE from the message payload, and computes the
2327	         original countersignature SIGNATURE as

2329	         SIGNATURE = ENC_SIGNATURE XOR KEYSTREAM

2331	         where KEYSTREAM is derived as per Section 4.2.

2333	         The client verifies the original countersignature SIGNATURE.

2335	      -  If the verification of the countersignature fails, the client:
2336	         i) SHALL stop processing the response; and ii) SHALL NOT update
2337	         the Response Number associated with the server.

2339	      -  After a successful verification of the countersignature, the
2340	         client performs also the following actions in case the request
2341	         was protected in pairwise mode (see Section 8.3).

2343	         o  If the 'kid' parameter is present in the response, the
2344	            client checks whether this received 'kid' is equal to the
2345	            expected 'kid', i.e., the known Recipient ID for the server
2346	            for which the request was intended.

2348	         o  If the 'kid' parameter is not present in the response, the
2349	            client checks whether the server that has sent the response
2350	            is the same one for which the request was intended.  This
2351	            can be done by checking that the public key used to verify
2352	            the countersignature of the response is equal to the public
2353	            key included in the authentication credential Recipient Auth
2354	            Cred, which was taken as input to derive the Pairwise Sender
2355	            Key used for protecting the request (see Section 2.5.1).

2357	         In either case, if the client determines that the response has
2358	         come from a different server than the expected one, then the
2359	         client: i) SHALL discard the response and SHALL NOT deliver it
2360	         to the application; ii) SHALL NOT update the Response Number
2361	         associated with the server.

2363	         Otherwise, the client hereafter considers the received 'kid' as
2364	         the current Recipient ID for the server.

2366	   *  In Step 5, when decrypting the COSE object using the Recipient
2367	      Key, the Group Encryption Algorithm from the Common Context MUST
2368	      be used.

2370	      In addition, the client performs the following actions if the
2371	      response is received within a long exchange.

2373	      -  The ordering and the replay protection of responses received
2374	         from the server during the long exchange are performed as per
2375	         Section 5.3.1 of this document, by using the Response Number
2376	         associated with that server within that long exchange.  In case
2377	         of unsuccessful decryption and verification of a response, the
2378	         client SHALL NOT update the Response Number associated with the
2379	         server.

2381	      -  When receiving the first valid response from the server within
2382	         the long exchange, the client MUST store the kid "kid1" of that
2383	         server for that long exchange.  If the 'kid' field is included
2384	         in the OSCORE Option of the response, its value specifies
2385	         "kid1".  If the request was protected in pairwise mode (see
2386	         Section 8.3), the 'kid' field may not be present in the OSCORE
2387	         Option of the response (see Section 3.2).  In this case, the
2388	         client assumes "kid1" to be the Recipient ID for the server for
2389	         which the request was intended.

2391	      -  When receiving another valid response to the same request from
2392	         the same server - which can be identified and recognized
2393	         through the same public key used to verify the countersignature
2394	         and included in the server's authentication credential - the
2395	         client determines the kid "kid2" of the server as above for
2396	         "kid1", and MUST check whether "kid2" is equal to the stored
2397	         "kid1".

2399	         If "kid1" and "kid2" are different, the client SHOULD NOT
2400	         accept the response as valid to be delivered to the
2401	         application, and SHOULD NOT update the Response Number
2402	         associated with the server.  Exceptions can apply as the client
2403	         can retain the information required to order the responses, or
2404	         if the client application does not require response ordering
2405	         altogether.  Servers MUST NOT rely on clients tolerating this,
2406	         unless it was explicitly agreed on (e.g., as part of the
2407	         group's setup).

2409	      Note that, if "kid2" is different from "kid1" and the 'kid' field
2410	      is omitted from the response - which is possible if the request
2411	      was protected in pairwise mode - then the client will compute a
2412	      wrong keystream to decrypt the countersignature (i.e., by using
2413	      "kid1" rather than "kid2" in the 'id' field of the 'info' array in
2414	      Section 4.2), thus subsequently failing to verify the
2415	      countersignature and discarding the response.

2417	      This ensures that the client remains able to correctly perform the
2418	      ordering and replay protection of responses within a long
2419	      exchange, even if the server legitimately starts using a new
2420	      Sender ID, as received from the Group Manager when individually
2421	      rekeyed (see Section 2.6.3.1) or when re-joining the group.

2423	   *  In Step 8, if the used Recipient Context was created upon
2424	      receiving this response and the message is not verified
2425	      successfully, the client MAY delete that Recipient Context.  When
2426	      this behavior is specified by the application, it mitigates
2427	      attacks that aim at overloading the client's storage.

2429	      If the client deletes the used Recipient Context in this
2430	      particular circumstance, then this deletion does not require the
2431	      client to initialize as invalid the Replay Window of any new
2432	      Recipient Context created later within the Security Context (see
2433	      Section 2.6.1.2).

2435	7.5.  External Signature Checkers

2437	   When a message is protected in group mode, it is possible for
2438	   designated external signature checkers to verify the countersignature
2439	   of the message.  For example, an external signature checker can be an
2440	   intermediary gateway that intercepts messages protected in group mode
2441	   and ensures that they reach the intended recipients only if it
2442	   successfully verifies their countersignatures.

2444	   Since they do not join a group as members, external signature
2445	   checkers need to retrieve from the Group Manager the authentication
2446	   credentials of group members and other selected group data, such as
2447	   the current Signature Encryption Key (see Section 2.1.9).
2448	   Section 12.3 describes how the Group Manager supports signature
2449	   checkers.

2451	   When receiving a message protected in group mode, a signature checker
2452	   proceeds as follows.

2454	   *  The signature checker retrieves the encrypted countersignature
2455	      ENC_SIGNATURE from the message payload, and computes the original
2456	      countersignature SIGNATURE as
2457	      SIGNATURE = ENC_SIGNATURE XOR KEYSTREAM

2459	      where KEYSTREAM is derived as per Section 4.2.

2461	   *  The signature checker verifies the original countersignature
2462	      SIGNATURE, by using the public key of the sender endpoint as
2463	      included in that endpoint's authentication credential.  The
2464	      signature checker determines the right authentication credential
2465	      based on the ID Context (Gid) and the Sender ID of the sender
2466	      endpoint.

2468	   Note that the following applies when attempting to verify the
2469	   countersignature of a response message.

2471	   *  The response may not include a Partial IV and/or an ID Context.
2472	      In such a case, the signature checker considers the same values
2473	      from the corresponding request, i.e., the request matching with
2474	      the response by CoAP Token value.

2476	   *  The response may not include a Sender ID.  This can happen when
2477	      the response protected in group mode matches a request protected
2478	      in pairwise mode (see Section 8.1), with a case in point provided
2479	      by [I-D.amsuess-core-cachable-oscore].  In such a case, the
2480	      signature checker needs to use other means (e.g., source
2481	      addressing information of the server endpoint) to identify the
2482	      correct authentication credential including the public key to use
2483	      for verifying the countersignature of the response.

2485	   The particular actions following a successful or unsuccessful
2486	   verification of the countersignature are application specific and out
2487	   of the scope of this document.

2489	8.  Message Processing in Pairwise Mode

2491	   When using the pairwise mode of Group OSCORE, messages are protected
2492	   and processed as in [RFC8613] with the modifications described in
2493	   this section.  The security objectives of the pairwise mode are
2494	   discussed in Appendix A.2.

2496	   The possible use of the pairwise mode is indicated by the Group
2497	   Manager as part of the group data provided to new group members when
2498	   joining the group, according to which the parameters AEAD Algorithm
2499	   and Pairwise Key Agreement Algorithm in the Security Context are set
2500	   (see Section 2).

2502	   The pairwise mode takes advantage of an existing Security Context to
2503	   establish keying material shared exclusively with each other member.
2504	   For encryption and decryption operations in pairwise mode, the AEAD
2505	   Algorithm from the Common Context is used (see Section 2.1.1).

2507	   In order to use the pairwise mode in a group where the group mode is
2508	   also used (i.e., Group Encryption Algorithm and Signature Algorithm
2509	   in the Security Context are set), the signature scheme of the group
2510	   mode MUST support a combined signature and encryption scheme.  For
2511	   example, this can rely on signing operations using ECDSA, and
2512	   encryption operations using AES-CCM with keying material derived
2513	   through ECDH.

2515	   The pairwise mode does not support external verifiers of source
2516	   authentication and message integrity like the group mode does, e.g.,
2517	   for external signature checkers (see Section 7.5).

2519	   An endpoint implementing only a silent server does not support the
2520	   pairwise mode.

2522	   Endpoints using the CoAP Echo Option [RFC9175] in a group where the
2523	   AEAD Algorithm and Pairwise Key Agreement Algorithm are set MUST
2524	   support the pairwise mode.  When using the challenge-response method
2525	   defined in Section 9, this prevents the attack described in
2526	   Section 14.9, which leverages requests sent over unicast to a single
2527	   group member and protected in group mode.

2529	   The pairwise mode cannot be used to protect messages intended for
2530	   multiple recipients, as the keying material used for the pairwise
2531	   mode is shared only between two endpoints.

2533	   However, a sender can use the pairwise mode to protect a message sent
2534	   to (but not intended for) multiple recipients, if interested in a
2535	   response from only one of them.  For instance, this is useful to
2536	   support the address discovery service defined in Section 8.1, when a
2537	   single 'kid' value is indicated in the payload of a request sent to
2538	   multiple recipients, e.g., over multicast.

2540	8.1.  Pre-Conditions

2542	   In order to protect an outgoing message in pairwise mode, the sender
2543	   needs to know the authentication credential and the Recipient ID for
2544	   the recipient endpoint, as stored in the Recipient Context associated
2545	   with that endpoint (see Section 2.5.4).

2547	   Typically, the sender endpoint sends the message protected in
2548	   pairwise mode over unicast, so that the message is delivered only to
2549	   the intended recipient endpoint for which it is protected.  This
2550	   requires the sender to know the individual address of that recipient
2551	   endpoint, which the sender may not know at any given point in time.
2552	   For instance, right after having joined the group, a client may know
2553	   the authentication credential and Recipient ID for a given server,
2554	   but not the addressing information required to reach it with an
2555	   individual, one-to-one request.

2557	   In order to make addressing information of individual endpoints
2558	   available, servers in the group MAY expose a resource to which a
2559	   client can send a request targeting a set of servers, identified by
2560	   their 'kid' values specified in the request payload, or implicitly if
2561	   the request is sent in pairwise mode.  Further details of such an
2562	   interface are out of scope for this document.

2564	8.2.  Main Differences from OSCORE

2566	   The pairwise mode protects messages between two members of a group,
2567	   essentially following [RFC8613] but with the following notable
2568	   differences.

2570	   *  The 'kid' and 'kid context' parameters of the COSE object are used
2571	      as defined in Section 3.2 of this document.

2573	   *  The external_aad defined in Section 3.4 of this document is used
2574	      for the encryption and decryption process.

2576	   *  The Pairwise Sender/Recipient Keys used as Sender/Recipient keys
2577	      are derived as defined in Section 2.5 of this document.

2579	8.3.  Protecting the Request

2581	   When using the pairwise mode to protect a request, a client SHALL
2582	   proceed as described in Section 8.1 of [RFC8613] with the differences
2583	   summarized in Section 8.2 of this document.

2585	   Furthermore, when sending a request that establishes a long exchange,
2586	   what is specified in Section 7.1 of this document holds, with respect
2587	   to storing the value of the 'kid' and 'kid context' parameters, and
2588	   to storing an invariant identifier of the group.

2590	8.4.  Verifying the Request

2592	   Upon receiving a protected request with the Group Flag set to 0,
2593	   following the procedure in Section 6, a server SHALL proceed as
2594	   described in Section 8.2 of [RFC8613] with the differences summarized
2595	   in Section 8.2 of this document.  The following differences also
2596	   apply.

2598	   *  If the server discards the request due to not retrieving a
2599	      Security Context associated with the OSCORE group or to not
2600	      supporting the pairwise mode, the server MAY respond with a 4.01
2601	      (Unauthorized) error message or a 4.02 (Bad Option) error message,
2602	      respectively.  When doing so, the server MAY set an Outer Max-Age
2603	      Option with value zero, and MAY include a descriptive string as
2604	      diagnostic payload.

2606	   *  If a new Recipient Context is created for this Recipient ID, new
2607	      Pairwise Sender/Recipient Keys are also derived (see
2608	      Section 2.5.1).  The new Pairwise Sender/Recipient Keys are
2609	      deleted if the Recipient Context is deleted as a result of the
2610	      message not being successfully verified.

2612	   *  What is specified in Section 7.2 of this document holds with
2613	      respect to the following points.

2615	      -  The possible, dynamic creation and configuration of a Recipient
2616	         Context upon receiving the request.

2618	      -  The possible deletion of a Recipient Context created upon
2619	         receiving the request, in case the request is not verified
2620	         successfully.

2622	      -  The rule about processing the request where the received
2623	         Recipient ID ('kid') is equal to the server's Sender ID.

2625	      -  The storing of the value of the 'kid' and 'kid context'
2626	         parameters from the request, if the server intends to reply
2627	         with multiple responses within the long exchange established by
2628	         the request.

2630	8.5.  Protecting the Response

2632	   When using the pairwise mode to protect a response, a server SHALL
2633	   proceed as described in Section 8.3 of [RFC8613] with the differences
2634	   summarized in Section 8.2 of this document.  The following
2635	   differences also apply.

2637	   *  What is specified in Section 7.3 of this document holds with
2638	      respect to the following points.

2640	      -  The protection of a response when using a different Security
2641	         Context than the one used to verify the corresponding request
2642	         (see Section 12.2).  That is, the server always protects a
2643	         response with the Sender Context from its latest Security
2644	         Context, and establishing a new Security Context resets the
2645	         Sender Sequence Number to 0 (see Section 2.6.3.1 and
2646	         Section 2.6.3.2).

2648	      -  The use of the stored value of the 'kid' and 'kid context'
2649	         parameters, if the server intends to reply with multiple
2650	         responses within the long exchange established by the request.

2652	      -  The rules for the inclusion of the server's Sender Sequence
2653	         Number as Partial IV in a response, as used to build the nonce
2654	         to protect the response.

2656	      -  The rules for the inclusion of the ID Context (Gid) in the 'kid
2657	         context' parameter of a response, if the ID Context used for
2658	         the response differs from the one used to verify the request
2659	         (see Section 12.2), also for helping the client to synchronize.

2661	      -  The rules for the inclusion of the Sender ID in the 'kid'
2662	         parameter of a response to a request that was protected in
2663	         pairwise mode, if the server has obtained a new Sender ID from
2664	         the Group Manager when individually rekeyed (see
2665	         Section 2.6.3.1), thus helping the client to synchronize.

2667	8.6.  Verifying the Response

2669	   Upon receiving a protected response with the Group Flag set to 0,
2670	   following the procedure in Section 6, a client SHALL proceed as
2671	   described in Section 8.4 of [RFC8613] with the differences summarized
2672	   in Section 8.2 of this document.  The following differences also
2673	   apply.

2675	   *  The client may receive a response protected with a Security
2676	      Context different from the one used to protect the corresponding
2677	      request.  Also, upon the establishment of a new Security Context,
2678	      the client re-initializes its Replay Windows in its Recipient
2679	      Contexts (see Section 2.2).

2681	   *  The same as described in Section 7.4 holds with respect to
2682	      handling the 'kid' parameter of the response, when received as a
2683	      reply to a request protected in pairwise mode.  The client can
2684	      also in this case check whether the replying server is the
2685	      expected one, by relying on the server's public key.  However,
2686	      since the response is protected in pairwise mode, the public key
2687	      is not used for verifying a countersignature as in Section 7.4.

2689	      Instead, the expected server's authentication credential - namely
2690	      Recipient Auth Cred and including the server's public key - was
2691	      taken as input to derive the Pairwise Recipient Key used to
2692	      decrypt and verify the response (see Section 2.5.1).

2694	   *  If a new Recipient Context is created for this Recipient ID, new
2695	      Pairwise Sender/Recipient Keys are also derived (see
2696	      Section 2.5.1).  The new Pairwise Sender/Recipient Keys are
2697	      deleted if the Recipient Context is deleted as a result of the
2698	      message not being successfully verified.

2700	   *  What is specified in Section 7.4 of this document holds with
2701	      respect to the following points.

2703	      -  The possible, dynamic creation and configuration of a Recipient
2704	         Context upon receiving the response.

2706	      -  The use of the stored value of the 'kid' and 'kid context'
2707	         parameters, when processing a response received within a long
2708	         exchange.

2710	      -  The performing of ordering and replay protection for responses
2711	         received within a long exchange.

2713	      -  The possible deletion of a Recipient Context created upon
2714	         receiving the response, in case the response is not verified
2715	         successfully.

2717	9.  Challenge-Response Based Freshness and Replay Window Recovery

2719	   This section describes how a server endpoint can verify freshness of
2720	   a request by means of a challenge-response exchange with a client
2721	   using the Echo Option for CoAP specified in Section 2 of [RFC9175].
2722	   The same mechanism, with small alterations, is also used by the
2723	   server when first processing a request using a Recipient Context
2724	   whose Replay Window was initialized as invalid.

2726	   If the application requires freshness, e.g., according to time- or
2727	   event-based policies (see Section 2.5.1 of [RFC9175]), a server
2728	   proceeds as described below upon receiving a request from a
2729	   particular client for the first time.

2731	   The server processes the message as described in this document, but,
2732	   even if valid, does not deliver it to the application.  Instead, the
2733	   server replies to the client with a Group OSCORE protected 4.01
2734	   (Unauthorized) response message, including only the Echo Option and
2735	   no diagnostic payload.  The server MUST use its Partial IV when
2736	   generating the nonce for protecting the response conveying the Echo
2737	   Option, and MUST include the Partial IV in the response.

2739	   The Echo Option value SHOULD NOT be reused; if it is reused, it MUST
2740	   be highly unlikely to have been recently used with this client.
2741	   Since this response is protected with the Security Context used in
2742	   the group, the client will consider the response valid upon
2743	   successfully decrypting and verifying it.

2745	   The server stores the Echo Option value included in the response
2746	   together with the pair (gid,kid), where 'gid' is the Group Identifier
2747	   of the OSCORE group and 'kid' is the Sender ID of the client in the
2748	   group.  These are specified in the 'kid context' and 'kid' fields of
2749	   the OSCORE Option of the request, respectively.  After a group
2750	   rekeying has been completed and a new Security Context has been
2751	   established in the group, which results also in a new Group
2752	   Identifier (see Section 12.2), the server MUST delete all the stored
2753	   Echo values associated with members of the group.

2755	   After receiving a 4.01 (Unauthorized) response that includes an Echo
2756	   Option and originates from a verified group member, a subsequent
2757	   client request sent to that server and echoing the Echo Option value
2758	   MUST be a message sent unicast to that server.

2760	   If in the group the AEAD Algorithm and Pairwise Key Agreement
2761	   Algorithm are set in the Security Context, the client MUST use the
2762	   pairwise mode to protect the request, as per Section 8.3.  Note that,
2763	   as defined in Section 8, endpoints that are members of such a group
2764	   and that use the Echo Option support the pairwise mode.  In a group
2765	   where the AEAD Algorithm and Pairwise Key Agreement Algorithm are not
2766	   set, only the group mode can be used.  Hence, requests including the
2767	   Echo Option can be protected only with the Group Mode, with the
2768	   caveat due to the risk for those requests to be redirected to a
2769	   different server than the intended one, as discussed in Section 14.9.

2771	   The client does not necessarily resend the same request, but can
2772	   instead send a more recent one if the application permits it.  This
2773	   allows the client to not retain previously sent requests for full
2774	   retransmission, unless the application explicitly requires otherwise.
2775	   In either case, the client uses a fresh Sender Sequence Number value
2776	   from its own Sender Context.  If the client stores requests for
2777	   possible retransmission with the Echo Option, it should not store a
2778	   given request for longer than a preconfigured time interval.  Note
2779	   that the unicast request echoing the Echo Option is correctly treated
2780	   and processed, since the 'kid context' field including the Group
2781	   Identifier of the OSCORE group is still present in the OSCORE Option
2782	   as part of the COSE object (see Section 3).

2784	   Upon receiving the unicast request including the Echo Option, the
2785	   server performs the following verifications.

2787	   *  If the server does not store an Echo Option value for the pair
2788	      (gid,kid), it considers: i) the time t1 when it has established
2789	      the Security Context used to protect the received request; and ii)
2790	      the time t2 when the request has been received.  Since a valid
2791	      request cannot be older than the Security Context used to protect
2792	      it, the server verifies that (t2 - t1) is less than the largest
2793	      amount of time acceptable to consider the request fresh.

2795	   *  If the server stores an Echo Option value for the pair (gid,kid)
2796	      associated with that same client in the same group, the server
2797	      verifies that the option value equals that same stored value
2798	      previously sent to that client.

2800	   If the verifications above fail, the server MUST NOT process the
2801	   request further and MAY send a 4.01 (Unauthorized) response including
2802	   an Echo Option, hence performing a new challenge-response exchange.

2804	   If the verifications above are successful, the server considers the
2805	   Recipient Context associated with the sender client and proceeds as
2806	   follows.

2808	   *  If the Replay Window is invalid, the steps below occur.

2810	      1.  The server updates the Replay Window by marking as received
2811	          the Sender Sequence Number from the latest received request.
2812	          This becomes the lower limit of the Replay Window, while all
2813	          the greater Sender Sequence Number values within the Replay
2814	          Window are marked as not received.

2816	      2.  The server makes the Replay Window valid, and accepts the
2817	          request as fresh.

2819	   *  If the Replay Window is already valid, the server discards the
2820	      verification result and accepts the request as fresh or treats it
2821	      as a replay, according to the existing Replay Window.

2823	   A server should not deliver requests from a given client to the
2824	   application until one valid request from that same client has been
2825	   verified as fresh via an echoed Echo Option included therein.  A
2826	   server may perform the challenge-response described above at any
2827	   time, e.g., after a device reboot occurred in an unprepared way.  A
2828	   client has to be ready to perform the challenge-response based on the
2829	   Echo Option if a server starts it.

2831	   Message freshness is further discussed in Section 14.14.

2833	10.  Implementation Compliance

2835	   Like in [RFC8613], HKDF SHA-256 is the mandatory-to-implement HKDF.

2837	   An endpoint may support only the group mode, or only the pairwise
2838	   mode, or both.

2840	   For endpoints that support the group mode, the following applies.

2842	   *  For endpoints that use authenticated encryption, the AEAD
2843	      algorithm AES-CCM-16-64-128 defined in Section 4.2 of [RFC9053] is
2844	      mandatory to implement as Group Encryption Algorithm (see
2845	      Section 2.1.7).

2847	   *  For endpoints that use non-authenticated encryption, the algorithm
2848	      A128CBC defined in Section 5 of [RFC9459] is mandatory to
2849	      implement as Group Encryption Algorithm (see Section 2.1.7).

2851	   *  Section 6 of [RFC9459] mandates that COSE libraries supporting
2852	      either the AES-CTR or AES-CBC algorithm and accepting Additional
2853	      Authenticated Data (AAD) as input must return an error if one of
2854	      these non-AEAD content encryption algorithms is selected.

2856	      In case the used Group Encryption Algorithm (see Section 2.1.7)
2857	      does not provide integrity protection, the following applies.

2859	      When invoking the execution of the Group Encryption Algorithm, the
2860	      Group OSCORE implementation MUST NOT provide any AAD to the COSE
2861	      library, unless AAD is always expected as input.  In the latter
2862	      case, the AAD will not be protected by the Group Encryption
2863	      Algorithm, which is unable to do so.

2865	      If the used COSE library adheres to the mandate in Section 6 of
2866	      [RFC9459], then a Group OSCORE implementation requires that the
2867	      COSE library supports using the Group Encryption Algorithm without
2868	      taking AAD as input.

2870	   *  For many constrained IoT devices, it is problematic to support
2871	      more than one signature algorithm.  The following applies with
2872	      respect to the Signature Algorithm (see Section 2.1.8).

2874	      Less constrained endpoints MUST implement at least one of the
2875	      following and SHOULD implement both: the EdDSA signature algorithm
2876	      together with the elliptic curve Ed25519 [RFC8032]; the ECDSA
2877	      signature algorithm together with the elliptic curve P-256.

2879	      Constrained endpoints MUST implement at least one of the following
2880	      and, if affordable, SHOULD implement both: the EdDSA signature
2881	      algorithm together with the elliptic curve Ed25519 [RFC8032]; the
2882	      ECDSA signature algorithm together with the elliptic curve P-256.

2884	   *  Endpoints that implement the ECDSA signature algorithm MAY use
2885	      "deterministic ECDSA" as specified in [RFC6979].  Pure
2886	      deterministic elliptic-curve signature algorithms such as
2887	      deterministic ECDSA and EdDSA have the advantage of not requiring
2888	      access to a source of high-quality randomness.  However, these
2889	      signature algorithms have been shown vulnerable to some side-
2890	      channel and fault injection attacks due to their determinism,
2891	      which can result in extracting a device's private key.  As
2892	      suggested in Section 2.1.1 of [RFC9053], this can be addressed by
2893	      combining both randomness and determinism
2894	      [I-D.irtf-cfrg-det-sigs-with-noise].

2896	   For endpoints that support the pairwise mode, the following applies.

2898	   *  The AEAD algorithm AES-CCM-16-64-128 defined in Section 4.2 of
2899	      [RFC9053] is mandatory to implement as AEAD Algorithm (see
2900	      Section 2.1.1).

2902	   *  The ECDH-SS + HKDF-256 algorithm specified in Section 6.3.1 of
2903	      [RFC9053] is mandatory to implement as Pairwise Key Agreement
2904	      Algorithm (see Section 2.1.10).

2906	   *  The following applies with respect to ECDH curves.

2908	      Less constrained endpoints MUST implement at least one of the
2909	      following ECDH curves and SHOULD implement both: the X25519 curve
2910	      [RFC7748]; the P-256 curve.

2912	      Constrained endpoints MUST implement at least one of the following
2913	      ECDH curves and, if affordable, SHOULD implement both: the X25519
2914	      curve [RFC7748]; the P-256 curve.

2916	   Constrained IoT devices may alternatively represent Montgomery curves
2917	   and (twisted) Edwards curves [RFC7748] in the short-Weierstrass form
2918	   Wei25519, with which the algorithms ECDSA25519 and ECDH25519 can be
2919	   used for signature operations and Diffie-Hellman secret calculation,
2920	   respectively [I-D.ietf-lwig-curve-representations].

2922	11.  Web Linking

2924	   The use of Group OSCORE or OSCORE [RFC8613] MAY be indicated by a
2925	   target "gosc" attribute in a web link [RFC8288] to a resource, e.g.,
2926	   using a link-format document [RFC6690] if the resource is accessible
2927	   over CoAP.

2929	   The "gosc" attribute is a hint indicating that the destination of
2930	   that link is only accessible using Group OSCORE or OSCORE, and
2931	   unprotected access to it is not supported.  Note that this is simply
2932	   a hint, it does not include any security context material or any
2933	   other information required to run Group OSCORE or OSCORE.

2935	   A value MUST NOT be given for the "gosc" attribute; any present value
2936	   MUST be ignored by parsers.  The "gosc" attribute MUST NOT appear
2937	   more than once in a given link-value; occurrences after the first
2938	   MUST be ignored by parsers.

2940	   When a link-value includes the "gosc" attribute, the link-value MUST
2941	   also include the "osc" attribute defined in Section 9 of [RFC8613].
2942	   If the endpoint parsing the link-value supports Group OSCORE and
2943	   understands the "gosc" attribute, then the parser MUST ignore the
2944	   "osc" attribute, which is overshadowed by the "gosc" attribute.

2946	   The example in Figure 3 shows a use of the "gosc" attribute: the
2947	   client does resource discovery on a server and gets back a list of
2948	   resources, one of which includes the "gosc" attribute indicating that
2949	   the resource is protected with Group OSCORE or OSCORE.  The link-
2950	   format notation (see Section 5 of [RFC6690]) is used.

2952	                     REQ: GET /.well-known/core

2954	                     RES: 2.05 Content
2955	                         </sensors/temp>;gosc;osc,
2956	                         </sensors/light>;if="sensor"

2958	       Figure 3: Example of using the "gosc" attribute in a web link.

2960	12.  The Group Manager

2962	   As with OSCORE, endpoints communicating with Group OSCORE need to
2963	   establish the relevant Security Context.  Group OSCORE endpoints need
2964	   to acquire OSCORE input parameters, information about the group(s)
2965	   and about other endpoints in the group(s).

2967	   Every group is associated with a Group Manager that is responsible
2968	   for distributing security parameters and keying material within the
2969	   group, among other tasks.  The details of how the Group Manager
2970	   interacts with (candidate) group members or with external entities
2971	   like signature checkers, as well as the protocols used for those
2972	   interactions, are out of scope.

2974	   The Group Manager assigns unique Group Identifiers (Gids) to the
2975	   groups under its control.  Within each of such groups, the Group
2976	   Manager assigns unique Sender IDs (and thus Recipient IDs) to the
2977	   respective group members.  The maximum length of Sender IDs depends
2978	   on the length of the nonce for the algorithms used in the group (see
2979	   Section 2.2).

2981	   The Gid value assigned to a group is associated with a dedicated
2982	   space for the values of Sender ID and Recipient ID of the members of
2983	   that group.  When an endpoint (re-)joins a group, it is provided with
2984	   the current Gid to use in the group.  The Group Manager also assigns
2985	   an integer Key Generation Number counter to each of its groups,
2986	   identifying the current version of the keying material used in that
2987	   group.  Further details about identifiers and keys are provided in
2988	   Section 12.2.

2990	   The Group Manager maintains records of the authentication credentials
2991	   of endpoints in a group, and provides information about the group and
2992	   its members to other group members (see Section 12.1).  Optionally,
2993	   the Group Manager provides information about the group and its
2994	   members to external entities with a specific role, such as signature
2995	   checkers (see Section 12.3).

2997	   The list of responsibilities of the Group Manager is compiled in
2998	   Appendix D.

3000	   One realization of a Group Manager is specified in
3001	   [I-D.ietf-ace-key-groupcomm-oscore], where the process by which an
3002	   endpoint (re-)joins a group is based on the ACE framework for
3003	   authentication and authorization in constrained environments
3004	   [RFC9200].

3006	12.1.  Set-up of New Endpoints

3008	   From the Group Manager, an endpoint acquires group data such as the
3009	   Gid and OSCORE input parameters including its own Sender ID, with
3010	   which it can derive the Sender Context.

3012	   When joining the group or later on as a group member, an endpoint can
3013	   also retrieve from the Group Manager the authentication credential of
3014	   the Group Manager as well as the authentication credential and other
3015	   information associated with other members of the group, with which it
3016	   can derive the corresponding Recipient Context.  An application can
3017	   configure a group member to asynchronously retrieve information about
3018	   Recipient Contexts, e.g., by Observing [RFC7641] a resource at the
3019	   Group Manager to get updates on the group membership.

3021	   Upon endpoints' joining, the Group Manager collects their
3022	   authentication credentials and MUST verify proof of possession of the
3023	   respective private key.  As an example, such proof of possession is
3024	   possible to achieve during the join process provided by the
3025	   realization of Group Manager specified in
3026	   [I-D.ietf-ace-key-groupcomm-oscore].  Together with the requested
3027	   authentication credentials of other group members, the Group Manager
3028	   MUST provide the joining endpoints with the Sender ID of the
3029	   associated group members and the current Key Generation Number in the
3030	   group (see Section 12.2).

3032	   An endpoint may join a group, for example, by explicitly interacting
3033	   with the responsible Group Manager, or by being configured with some
3034	   tool performing the tasks of the Group Manager.  When becoming
3035	   members of a group, endpoints are not required to know how many and
3036	   what endpoints are in the same group.

3038	   Communications that the Group Manager has with joining endpoints and
3039	   group members MUST be secured.  Specific details on how to secure
3040	   such communications are out of the scope of this document.

3042	   The Group Manager MUST verify that the joining endpoint is authorized
3043	   to join the group.  To this end, the Group Manager can directly
3044	   authorize the joining endpoint, or expect it to provide authorization
3045	   evidence previously obtained from a trusted entity.  Further details
3046	   about the authorization of joining endpoints are out of the scope of
3047	   this document.

3049	   In case of successful authorization check, the Group Manager provides
3050	   the joining endpoint with the keying material to initialize the
3051	   Security Context.  The actual provisioning of keying material and
3052	   parameters to the joining endpoint is out of the scope of this
3053	   document.

3055	12.2.  Management of Group Keying Material

3057	   In order to establish a new Security Context for a group, the Group
3058	   Manager MUST generate and assign to the group a new Group Identifier
3059	   (Gid) and a new value for the Master Secret parameter.  When doing
3060	   so, a new value for the Master Salt parameter MAY also be generated
3061	   and assigned to the group.  When establishing the new Security
3062	   Context, the Group Manager SHOULD preserve the current value of the
3063	   Sender ID of each group member in order to ensure an efficient key
3064	   rollover.  Exceptions can apply if there are compelling reasons for
3065	   making available again some of the Sender ID values currently used.

3067	   The specific group key management scheme used to distribute new
3068	   keying material is out of the scope of this document.  A simple group
3069	   key management scheme is defined in
3070	   [I-D.ietf-ace-key-groupcomm-oscore].  When possible, the delivery of
3071	   rekeying messages should use a reliable transport, in order to reduce
3072	   chances of group members missing a rekeying instance.  The use of an
3073	   unreliable transport MUST NOT forego enforcing congestion control as
3074	   appropriate for that transport.

3076	   The set of group members should not be assumed as fixed, i.e., the
3077	   group membership is subject to changes, possibly on a frequent basis.

3079	   The Group Manager MUST rekey the group without undue delay when one
3080	   or more endpoints leave the group.  An endpoint may leave the group
3081	   at own initiative, or may be evicted from the group by the Group
3082	   Manager, e.g., in case the endpoint is compromised, or is suspected
3083	   to be compromised (as determined by the Group Manager through its own
3084	   means or based on information that it obtains from a trusted source
3085	   such as an Intrusion Detection System or an issuer of authentication
3086	   credentials).  In either case, rekeying the group excludes such
3087	   endpoints from future communications in the group, and thus preserves
3088	   forward security.  If a network node is compromised or suspected to
3089	   be compromised, the Group Manager MUST evict from the group all the
3090	   endpoints hosted by that node that are members of the group and rekey
3091	   the group accordingly.

3093	   If required by the application, the Group Manager MUST also rekey the
3094	   group when one or more new joining endpoints are added to the group,
3095	   thus preserving backward security.

3097	   Separately for each group, the value of the Key Generation Number
3098	   increases by one each time the Group Manager distributes new keying
3099	   material to that group (see below).

3101	   The establishment of the new Security Context for the group takes the
3102	   following steps.

3104	   1.  The Group Manager MUST increment the Key Generation Number for
3105	       the group by 1.  It is up to the Group Manager what actions to
3106	       take when a wrap-around of the Key Generation Number is detected.

3108	   2.  The Group Manager MUST build a set of stale Sender IDs including:

3110	       *  The Sender IDs that, during the current Gid, were both
3111	          assigned to an endpoint and subsequently relinquished (see
3112	          Section 2.6.3.1).

3114	       *  The current Sender IDs of the group members that the upcoming
3115	          group rekeying aims to exclude from future group
3116	          communications, if any.

3118	   3.  The Group Manager rekeys the group, by distributing:

3120	       *  The new keying material, i.e., the new Master Secret, the new
3121	          Gid and (optionally) the new Master Salt.

3123	       *  The new Key Generation Number from Step 1.

3125	       *  The set of stale Sender IDs from Step 2.

3127	       Further information may be distributed, depending on the specific
3128	       group key management scheme used in the group.

3130	   When receiving the new group keying material, a group member
3131	   considers the received stale Sender IDs and performs the following
3132	   actions.

3134	   *  The group member MUST remove every authentication credential
3135	      associated with a stale Sender ID from its list of group members'
3136	      authentication credentials used in the group.

3138	   *  The group member MUST delete each of its Recipient Contexts used
3139	      in the group whose corresponding Recipient ID is a stale Sender
3140	      ID.

3142	   After that, the group member installs the new keying material and
3143	   derives the corresponding new Security Context.

3145	   A group member might miss one or more consecutive instances of group
3146	   rekeying.  As a result, the group member will retain old group keying
3147	   material with Key Generation Number GEN_OLD.  Eventually, the group
3148	   member can notice the discrepancy, e.g., by repeatedly failing to
3149	   verify incoming messages, or by explicitly querying the Group Manager
3150	   for the current Key Generation Number.  Once the group member gains
3151	   knowledge of having missed a group rekeying, it MUST delete the old
3152	   keying material it stores.

3154	   Then, the group member proceeds according to the following steps.

3156	   1.  The group member retrieves from the Group Manager the current
3157	       group keying material, together with the current Key Generation
3158	       Number GEN_NEW.  The group member MUST NOT install the obtained
3159	       group keying material yet.

3161	   2.  The group member asks the Group Manager for the set of stale
3162	       Sender IDs between GEN_OLD and GEN_NEW.

3164	   3.  If no exact and complete indication can be obtained from the
3165	       Group Manager, the group member MUST remove all the
3166	       authentication credentials from its list of group members'
3167	       authentication credentials used in the group and MUST delete all
3168	       its Recipient Contexts used in the group.

3170	       Otherwise, the group member MUST remove every authentication
3171	       credential associated with a stale Sender ID from its list of
3172	       group members' authentication credentials used in the group, and
3173	       MUST delete each of its Recipient Contexts used in the group
3174	       whose corresponding Recipient ID is a stale Sender ID.

3176	   4.  The group member installs the current group keying material, and
3177	       derives the corresponding new Security Context.

3179	   Alternatively, the group member can re-join the group.  In such a
3180	   case, the group member MUST take one of the following two actions.

3182	   *  First, the group member performs Steps 2 and 3 above.  Then, the
3183	      group member re-joins the group.

3185	   *  The group member re-joins the group with the same roles it
3186	      currently has in the group, and, during the re-join process, it
3187	      asks the Group Manager for the authentication credentials of all
3188	      the current group members.

3190	      Then, given Z the set of authentication credentials received from
3191	      the Group Manager, the group member removes every authentication
3192	      credential which is not in Z from its list of group members'
3193	      authentication credentials used in the group, and deletes each of
3194	      its Recipient Contexts used in the group that does not include any
3195	      of the authentication credentials in Z.

3197	   By removing authentication credentials and deleting Recipient
3198	   Contexts associated with stale Sender IDs, it is ensured that a
3199	   recipient endpoint storing the latest group keying material does not
3200	   store the authentication credentials of sender endpoints that are not
3201	   current group members.  This in turn allows group members to rely on
3202	   stored authentication credentials to confidently verify the group
3203	   membership of sender endpoints, when receiving incoming messages
3204	   protected in group mode (see Section 7).

3206	   Strictness in managing the authentication credentials and Recipient
3207	   Contexts associated with other group members is required for two
3208	   reasons.  First, as further discussed in Section 14.1, it ensures
3209	   that the group mode can be used securely, even in a group where the
3210	   Group Encryption Algorithm does not provide integrity protection (see
3211	   Section 2.1.7) and external signature checkers are used (see
3212	   Section 7.5).  Second, it ensures that the wrong (old) authentication
3213	   credential associated with a group member A is never used with a
3214	   Sender ID that used to be associated with A and has been later issued
3215	   to a different group member B (see Section 12.2.1.2), thus preventing
3216	   the need to recover from an identity mix-up.

3218	12.2.1.  Recycling of Identifiers

3220	   This section specifies how the Group Manager handles and possibly
3221	   reassigns Gid values and Sender ID values in a group.

3223	12.2.1.1.  Recycling of Group Identifiers

3225	   Since the Gid value changes every time a group is rekeyed, it can
3226	   happen that, after several rekeying instances, the whole space of Gid
3227	   values has been used for the group in question.  When this happens,
3228	   the Group Manager has no available Gid values to use that have never
3229	   been assigned to the group during the group's lifetime.

3231	   The occurrence of such an event and how long it would take to occur
3232	   depend on the format and encoding of Gid values used in the group
3233	   (see, e.g., Appendix C), as well as on the frequency of rekeying
3234	   instances yielding a change of Gid value.  Independently for each
3235	   group under its control, the Group Manager can take one of the two
3236	   following approaches.

3238	   *  The Group Manager does not reassign Gid values.  That is, once the
3239	      whole space of Gid values has been used for a group, the Group
3240	      Manager terminates the group and may re-establish a new group.

3242	   *  While the Gid value changes every time a group is rekeyed, the
3243	      Group Manager can reassign Gid values previously used during a
3244	      group's lifetime.  By doing so, the group can continue to exist
3245	      even once the whole space of Gid values has been used.

3247	      The Group Manager MAY support and use this approach, according to
3248	      what is specified in Section 12.2.1.1.1.

3250	12.2.1.1.1.  Reassignment of Group Identifiers

3252	   If the Group Manager performs the reassignment of Gid values
3253	   previously used during a group's lifetime, the Group Manager MUST
3254	   take additional actions when handling Gid values and rekeying the
3255	   group, as specified below.

3257	   When a node (re-)joins the group and it is provided with the current
3258	   Gid to use in the group, the Group Manager considers such a Gid as
3259	   the Birth Gid of that endpoint for that group.  For each group
3260	   member, the Group Manager MUST store the latest corresponding Birth
3261	   Gid until that member leaves the group.  In case the endpoint has in
3262	   fact re-joined the group, the newly determined Birth Gid overwrites
3263	   the one currently stored.

3265	   When establishing a new Security Context for the group, the Group
3266	   Manager takes the additional following step between Steps 1 and 2 of
3267	   Section 12.2.

3269	   A.  The Group Manager MUST check if the new Gid to be distributed is
3270	   equal to the Birth Gid of any of the current group members.  If any
3271	   of such "elder members" is found in the group, then:

3273	   *  The Group Manager MUST evict the elder members from the group.
3274	      That is, the Group Manager MUST terminate their membership and, in
3275	      the following steps, it MUST rekey the group in such a way that
3276	      the new keying material is not provided to those evicted elder
3277	      members.

3279	      This ensures that any response from the same server to the request
3280	      of a long exchange can never successfully match against the
3281	      request of two different long exchanges.

3283	      The excluded elder members could eventually re-join the group,
3284	      thus terminating any of their ongoing long exchanges (see
3285	      Section 5.1).

3287	      Therefore, it is ensured by construction that no client can have
3288	      with the same server two ongoing long exchanges, such that the two
3289	      respective requests were protected using the same Partial IV, Gid,
3290	      and Sender ID.

3292	12.2.1.2.  Recycling of Sender IDs

3294	   From the moment T_start when a Gid is assigned to a group until the
3295	   moment when a new Gid is assigned to that same group, the following
3296	   restrictions apply within the group.

3298	   *  The Group Manager MUST NOT assign a Sender ID that was already the
3299	      Sender ID of an endpoint in the group at T_start.

3301	   *  The Group Manager MUST NOT assign a given Sender ID more than
3302	      once.

3304	   That is, under the ongoing use of the current Gid, a given Sender ID
3305	   is not reassigned to the same or a different endpoint.  This prevents
3306	   from reusing a Sender ID ('kid') with the same triple (Gid, Master
3307	   Secret, Master Salt).  Within these restrictions, the Group Manager
3308	   can assign a Sender ID used under an old Gid value (including under a
3309	   same, recycled Gid value), thus avoiding Sender ID values to
3310	   irrecoverably grow in size.

3312	   Even when an endpoint joining a group is recognized as a current
3313	   member of that group, e.g., through the ongoing secure communication
3314	   association, the Group Manager MUST assign a new Sender ID different
3315	   than the one currently used by the endpoint in the group, unless the
3316	   group is rekeyed first and a new Gid value is established.

3318	12.2.1.3.  Relation between Identifiers and Keying Material

3320	   Figure 4 overviews the different identifiers and keying material
3321	   components, considering their relation and possible reuse across
3322	   group rekeying.

3324	 Components changed in lockstep
3325	     upon a group rekeying
3326	 +----------------------------+            * Changing a kid does not
3327	 |                            |              need changing the Group ID
3328	 | Master               Group |<--> kid1
3329	 | Secret <---> o <--->  ID   |            * A kid is not reassigned
3330	 |              ^             |<--> kid2     under the ongoing usage of
3331	 |              |             |              the current Group ID
3332	 |              |             |<--> kid3
3333	 |              v             |            * Upon changing the Group ID,
3334	 |         Master Salt        | ... ...      every current kid should
3335	 |         (optional)         |              be preserved for efficient
3336	 |                            |              key rollover
3337	 | The Key Generation Number  |
3338	 | is incremented by 1        |            * After changing Group ID, an
3339	 |                            |              unused kid can be assigned,
3340	 +----------------------------+              even if it was used before
3341	                                             the Group ID change

3343	         Figure 4: Relations among keying material components.

3345	12.3.  Support for Signature Checkers

3347	   The Group Manager may serve signature checkers, e.g., intermediary
3348	   gateways, which verify countersignatures of messages protected in
3349	   group mode (see Section 7.5).  These entities do not join a group as
3350	   members, but can retrieve authentication credentials of group members
3351	   and other selected group data from the Group Manager.

3353	   In order to verify countersignatures of messages in a group, a
3354	   signature checker needs to retrieve the following information about
3355	   the group:

3357	   *  The current ID Context (Gid) used in the group.

3359	   *  The authentication credentials of the group members and of the
3360	      Group Manager.

3362	      If the signature checker is provided with a CWT or a CCS for a
3363	      given entity, then the authentication credential associated with
3364	      that entity is the untagged CWT or CCS.

3366	      If the signature checker is provided with a chain or a bag of
3367	      X.509 / C509 certificates, or of CWTs, or of CCSs for a given
3368	      entity, then the authentication credential associated with that
3369	      entity is the end-entity certificate or end-entity untagged CWT /
3370	      CCS.

3372	   *  The current Signature Encryption Key (see Section 2.1.9).

3374	   *  The identifiers of the algorithms used in the group (see
3375	      Section 2), i.e.: i) Group Encryption Algorithm and Signature
3376	      Algorithm; and ii) AEAD Algorithm and Pairwise Key Agreement
3377	      Algorithm, if such parameters are set in the Common Context (see
3378	      Section 2.1.1 and Section 2.1.10).

3380	   A signature checker MUST be authorized before it can retrieve such
3381	   information, for example with the use of
3382	   [I-D.ietf-ace-key-groupcomm-oscore].

3384	13.  Implementation Status

3386	   This section is to be removed before publishing as an RFC.

3388	   Note to RFC Editor: when deleting this section, please also delete
3389	   RFC 7942 from the references of this document.

3391	   (Boilerplate as per Section 2.1 of [RFC7942]:)

3393	   This section records the status of known implementations of the
3394	   protocol defined by this specification at the time of posting of this
3395	   Internet-Draft, and is based on a proposal described in [RFC7942].
3396	   The description of implementations in this section is intended to
3397	   assist the IETF in its decision processes in progressing drafts to
3398	   RFCs.  Please note that the listing of any individual implementation
3399	   here does not imply endorsement by the IETF.  Furthermore, no effort
3400	   has been spent to verify the information presented here that was
3401	   supplied by IETF contributors.  This is not intended as, and must not
3402	   be construed to be, a catalog of available implementations or their
3403	   features.  Readers are advised to note that other implementations may
3404	   exist.

3406	   According to [RFC7942], "this will allow reviewers and working groups
3407	   to assign due consideration to documents that have the benefit of
3408	   running code, which may serve as evidence of valuable experimentation
3409	   and feedback that have made the implemented protocols more mature.
3410	   It is up to the individual working groups to use this information as
3411	   they see fit".

3413	13.1.  Implementation #1

3415	   *  Responsible organization: RISE Research Institutes of Sweden AB

3417	   *  Implementation's name: Group OSCORE for Eclipse Californium
3418	   *  Available at: https://github.com/rikard-sics/californium/tree/
3419	      group_oscore

3421	   *  Description: Implementation in Java, building on Eclipse
3422	      Californium, see:

3424	      -  https://github.com/eclipse-californium/californium

3426	      -  http://eclipse.dev/californium/

3428	   *  Implementation's level of maturity: prototype

3430	   *  The implementation supports:

3432	      -  The group mode and the pairwise mode.

3434	      -  Mapping of public keys for the curve Ed25519 into Montgomery
3435	         coordinates to use with X25519.

3437	      -  The following COSE encryption algorithms: AES-CCM-16-64-128,
3438	         AES-CCM-16-128-128, AES-CCM-16-64-256, AES-CCM-16-128-256,
3439	         AES_CCM-64-64-128, AES-CCM-64-128-128, AES-CCM-64-64-256, AES-
3440	         CCM-64-128-256, A128GCM, A192GCM, A256GCM, ChaCha20/Poly1305,
3441	         A128CBC, A192CBC, A256CBC.

3443	      -  The following HKDF algorithms: HKDF SHA-256 (identified as the
3444	         COSE Algorithm "HMAC 256/256") and HKDF SHA-512 (identified as
3445	         the COSE Algorithm "HMAC 512/512").

3447	      -  The following COSE signature algorithms: ECDSA with curves
3448	         P-256, P-384, and P-521, as well as EdDSA with curve Ed25519.

3450	      -  The following COSE key agreement algorithms: ECDH-SS + HKDF-256
3451	         and ECDH-SS + HKDF-512, both of which using either keys of COSE
3452	         Key Type "EC2" with the curve P-256, P-384, and P-521, or keys
3453	         of COSE Key Type "OKP" key with X25519.

3455	      -  The following authentication credential format: CWT Claims Sets
3456	         (CCSs).

3458	   *  Version compatibility: From version -23 onwards.

3460	   *  Licensing: according to the same dual license of Eclipse
3461	      Californium, i.e., according to the "Eclipse Distribution License
3462	      1.0" and the "Eclipse Public License 2.0".  See:

3464	      -  https://github.com/eclipse-californium/californium/blob/main/
3465	         LICENSE

3467	      -  https://www.eclipse.org/org/documents/edl-v10.php

3469	      -  https://www.eclipse.org/legal/epl-2.0/

3471	   *  Contact information: Rikard Höglund - rikard.hoglund@ri.se

3473	   *  Information last updated on: 2025-02-06

3475	13.2.  Implementation #2

3477	   *  Implementation's name: aiocoap

3479	   *  Available at: https://codeberg.org/aiocoap/aiocoap

3481	   *  Description: A Python CoAP library with support for multiple
3482	      transports and security mechanisms.  The library provides also
3483	      utility programs.

3485	   *  Implementation's level of maturity: Stable support for OSCORE;
3486	      Group OSCORE is minimal.

3488	   *  The implementation supports:

3490	      -  The group mode and the pairwise mode.

3492	      -  Mapping of public keys for the curve Ed25519 into Montgomery
3493	         coordinates to use with X25519.

3495	      -  The following COSE encryption algorithms: 1-3, 10-13, 24,
3496	         30-33, -65531

3498	      -  The following HKDF algorithms: HKDF SHA-256, -384, -512.

3500	      -  The following COSE signature algorithms: EdDSA on Ed25519,
3501	         ECDSA w/ SHA-256 on P-256

3503	      -  The following COSE key agreement algorithms: ECDH on P-256 and
3504	         curve25519.

3506	      -  The following authentication credential format: currently n/a
3507	         (user provides pairs of credentials and keys)

3509	   *  Version compatibility: -23

3511	   *  Licensing: MIT
3512	   *  Implementation experience: Mostly smooth; the differentiation
3513	      between the regular and the group AEAD algorithm, and more
3514	      generally finding the right parameters to input into the
3515	      (abstracted) KDF part, was tedious and error prone (because Group
3516	      OSCORE largely relies on OSCORE extension points that were
3517	      anticipated, but that was not).

3519	   *  Contact information: Christian Amsüss - christian@amsuess.com

3521	   *  Information last updated on: 2025-02-06

3523	13.3.  Interoperability

3525	   The two implementations mentioned in Section 13.1 and Section 13.2
3526	   have successfully completed interoperability tests.

3528	   That occurred multiple times when covering earlier versions of the
3529	   protocol, as well as specifically for version -23 of the Internet
3530	   Draft, during the IETF 121 meeting in Dublin (Ireland) in November
3531	   2024 and later on in February 2025.

3533	   The scenarios considered during the interoperability tests are as
3534	   follows:

3536	   *  (A) Authentication credential format: CWT Claims Sets (CCSs).

3538	   *  (B) Message protection:

3540	      -  (B1) Both requests and responses protected in group mode.

3542	      -  (B2) Requests protected in group mode and responses protected
3543	         in pairwise mode.

3545	      -  (B3) Requests protected in pairwise mode and responses
3546	         protected in group mode.

3548	      -  (B4) Both requests and responses protected in pairwise mode.

3550	   *  (C) Signature algorithm: EdDSA with curve Ed25519.

3552	   *  (D) HKDF algorithms: HKDF SHA-256.

3554	   *  (E) Key agreement algorithms: ECDH-SS + HKDF-256, following a
3555	      mapping of public keys for the curve Ed25519 into Montgomery
3556	      coordinates to use with X25519.

3558	   *  (F) The following pairs of (Group Encryption Algorithm, AEAD
3559	      Algorithm), for all the cases B1, B2, B3, and B4 above:

3561	      -  (AES-CCM-16-64-128, AES-CCM-16-64-128).

3563	      -  (ChaCha20/Poly1305, ChaCha20/Poly1305).

3565	      -  (AES-CCM-16-64-128, ChaCha20/Poly1305).

3567	      -  (ChaCha20/Poly1305, AES-CCM-16-64-128).

3569	      -  (A128CBC, AES-CCM-16-64-128).

3571	14.  Security Considerations

3573	   The same considerations from Appendix D of [RFC8613] on the security
3574	   properties of OSCORE hold for Group OSCORE, with the differences
3575	   discussed in the following.  Those considerations are about the
3576	   reference threat model, the support for Proxy operations, the
3577	   protection of message fields, and the uniqueness of (key, nonce)
3578	   pairs (which is further discussed in Section 14.3 of this document).

3580	   For Group OSCORE, the Sender Context and Recipient Context
3581	   additionally contain asymmetric keys, which are used to provide
3582	   source authentication: in group mode, by means of countersignatures
3583	   (see Section 14.1); in pairwise mode, by using Diffie-Hellman (see
3584	   Section 14.2).  The key pair can, for example, be generated by the
3585	   endpoint or provisioned during manufacturing.

3587	   Note that, even if an endpoint is authorized to be a group member and
3588	   to take part in group communications, there is a risk that it behaves
3589	   inappropriately.  For instance, it can forward the content of
3590	   messages in the group to unauthorized entities.  However, in many use
3591	   cases, the devices in the group belong to a common authority and are
3592	   configured by a commissioner (see Appendix B), which limits this risk
3593	   in practice and enables a prompt detection/reaction in case of
3594	   misbehaving.

3596	   With respect to unprotected message fields, the following holds.
3597	   First, the 'kid context' of request messages is part of the
3598	   Additional Authenticated Data, making it possible to keep long
3599	   exchanges active safely beyond a possible change of ID Context (Gid)
3600	   following a group rekeying (see Section 3.4).  Second, the
3601	   countersignature included in a Group OSCORE message protected in
3602	   group mode is also computed over the value of the OSCORE Option,
3603	   which is also part of the Additional Authenticated Data used in the
3604	   signing process.  This is further discussed in Section 14.7 of this
3605	   document.

3607	   In accordance with [RFC8613], all elements used in Group OSCORE as
3608	   opaque binary values (e.g., Sender ID, ID Context) are not to be
3609	   interpreted as text, Unicode, or otherwise.  Implementations ought
3610	   not to apply encoding transformations to the content of those
3611	   elements, e.g., UTF-8 decoding [RFC3629] or normalization.
3612	   Information elements that may contain text such as those found within
3613	   authentication credentials (e.g., X.509 distinguished names, CWT
3614	   claims, or JSON Web Key fields) are to be treated as opaque
3615	   structured data and to be interpreted only according to the rules of
3616	   the credential format as defined in their respective specifications.
3617	   This avoids misinterpretation, Unicode normalization attacks, or
3618	   mismatches in identity comparison.

3620	   As discussed in Section 6.2.3 of [I-D.ietf-core-groupcomm-bis], Group
3621	   OSCORE addresses security attacks against CoAP listed in Sections
3622	   11.2–11.6 of [RFC7252], especially when run over IP multicast.

3624	   Group OSCORE does not aim to meet the following properties:

3626	   *  Verification of server aliveness, as discussed in Section 5.2.

3628	   *  Protection of network addressing information, as discussed in
3629	      Section 14.9.

3631	   *  Management of group membership and group keying material, which is
3632	      entrusted to the Group Manager (see Section 12).  Related security
3633	      considerations are discussed in Section 14.4 and Section 14.5.

3635	   *  Confidentiality protection of the OSCORE Option.  Related privacy
3636	      considerations are discussed in Section 14.18.

3638	   The rest of this section first discusses security aspects to be taken
3639	   into account when using Group OSCORE.  Then it goes through aspects
3640	   covered in the security considerations of OSCORE (see Section 12 of
3641	   [RFC8613]), and discusses how they hold when Group OSCORE is used.

3643	14.1.  Security of the Group Mode

3645	   The group mode defined in Section 7 relies on shared group keying
3646	   material to protect communication within a group.  Using the group
3647	   mode has the implications discussed below.  This section uses the
3648	   term 'group members' to describe endpoints which possess the latest
3649	   version of the group keying material.

3651	   *  Source authentication of messages sent to a group is ensured
3652	      through a countersignature, which is computed by the sender
3653	      endpoint using its own private key and then appended to the
3654	      message payload.  The countersignature is also encrypted using a
3655	      keystream derived from the group keying material (see Section 4.1
3656	      and Section 4.2).  This ensures group privacy, i.e., an attacker
3657	      cannot track an endpoint over two groups by linking messages
3658	      between the two groups unless the attacker is also a member of
3659	      both groups.

3661	   *  Messages are encrypted at a group level (group-level data
3662	      confidentiality), i.e., they can be decrypted by any member of the
3663	      group, but not by an external adversary or other external entities
3664	      other than the Group Manager responsible for the group.

3666	   *  If the used Group Encryption Algorithm provides integrity
3667	      protection, then it also ensures group authentication and proof of
3668	      group membership, but not source authentication.  That is, it
3669	      ensures that a message sent to a group has been sent by a member
3670	      of that group, but not necessarily by the alleged sender.  In
3671	      fact, any group member is able to derive the Sender Key used by
3672	      the actual sender endpoint, and thus can compute a valid
3673	      authentication tag.  Therefore, the message content could
3674	      originate from any of the current group members.

3676	      Furthermore, if the used Group Encryption Algorithm does not
3677	      provide integrity protection, then it does not ensure any level of
3678	      message authentication or proof of group membership.

3680	      On the other hand, proof of group membership is always ensured by
3681	      construction through the strict management of the group keying
3682	      material (see Section 12.2).  That is, the group is rekeyed when
3683	      members leave and the current group members are informed of former
3684	      group members.  Thus, a current group member storing the latest
3685	      group keying material does not store the authentication credential
3686	      of any former group member.

3688	      This allows a recipient endpoint to rely on the stored
3689	      authentication credentials and public keys included therein, in
3690	      order to always confidently verify the group membership of a
3691	      sender endpoint when processing an incoming message, i.e., to
3692	      verify that the sender endpoint was a group member when it signed
3693	      the message.  In turn, this prevents a former group member from
3694	      possibly re-signing and injecting in the group a stored message
3695	      that was protected with old keying material.  A case in point is
3696	      discussed in Section 14.1.1.

3698	   The security properties of the group mode are summarized below.

3700	   1.  Asymmetric source authentication, by means of a countersignature.

3702	   2.  Symmetric group authentication, by means of an authentication tag
3703	       (only for Group Encryption Algorithms providing integrity
3704	       protection).

3706	   3.  Symmetric group confidentiality, by means of symmetric
3707	       encryption.

3709	   4.  Proof of group membership, by strictly managing the group keying
3710	       material, as well as by means of integrity tags when using a
3711	       Group Encryption Algorithm that provides also integrity
3712	       protection.

3714	   5.  Group privacy, by encrypting the countersignature.

3716	   The group mode fulfills the security properties above while also
3717	   displaying the following benefits.  First, the use of a Group
3718	   Encryption Algorithm that does not provide integrity protection
3719	   results in a minimal communication overhead, by limiting the message
3720	   payload to the ciphertext without integrity tag together with the
3721	   encrypted countersignature.  Second, it is possible to deploy semi-
3722	   trusted entities such as signature checkers (see Section 12.3), which
3723	   can break property 5, but cannot break properties 1, 2, 3, and 4.

3725	14.1.1.  Example of Need for Proof of Group Membership

3727	   As a case in point, the importance of reliable proof of group
3728	   membership is evident in a group where the Group Encryption Algorithm
3729	   does not provide integrity protection.  Suppose a group member leaves
3730	   the group and, after the group rekeying, associates with the group as
3731	   external signature checker (see Section 7.5).  When doing so, it
3732	   obtains from the Group Manager the new Signature Encryption Key, from
3733	   which it can derive keystreams for encrypting and decrypting the
3734	   countersignatures of messages protected in group mode.

3736	   However, when participating in the group rekeying, the current group
3737	   members deleted the Recipient Context and authentication credential
3738	   of the former group member.  Consequently, the signature checker is
3739	   not able to successfully inject messages protected in group mode, as
3740	   encrypted with the old group keying material, signed with its own
3741	   private key, and with the countersignature encrypted by means of the
3742	   latest Signature Encryption Key. That is, if the signature checker
3743	   attempts to do that, then the group members will fail to verify the
3744	   messages from the signature checker and thus will discard those
3745	   messages.

3747	14.2.  Security of the Pairwise Mode

3749	   The pairwise mode defined in Section 8 protects messages by using
3750	   pairwise symmetric keys, derived from the static-static Diffie-
3751	   Hellman shared secret computed from the asymmetric keys of the sender
3752	   and recipient endpoint (see Section 2.5).

3754	   The used AEAD Algorithm MUST provide integrity protection.
3755	   Therefore, the pairwise mode ensures both pairwise data-
3756	   confidentiality and source authentication of messages, without using
3757	   countersignatures.  Furthermore, the recipient endpoint achieves
3758	   proof of group membership for the sender endpoint, since only current
3759	   group members have the required keying material to derive a valid
3760	   Pairwise Sender/Recipient Key.

3762	   Finally, the pairwise mode ensures group privacy, i.e., an attacker
3763	   cannot track an endpoint over two groups by linking messages between
3764	   the two groups unless the attacker is also a member of both groups.
3765	   This follows from two different groups using different and
3766	   uncorrelated group keying material, which yields different and
3767	   uncorrelated pairwise keys for the same endpoint in any two groups.
3768	   Therefore, the authentication tags generated by an endpoint in a
3769	   group have no correlation with those generated by the same endpoint
3770	   in another group.

3772	   The security properties of the pairwise mode are summarized below.

3774	   1.  Symmetric source authentication, by means of an authentication
3775	       tag.

3777	   2.  Symmetric pairwise confidentiality, by means of symmetric
3778	       encryption.

3780	   3.  Proof of group membership, by strictly managing the group keying
3781	       material, as well as by means of integrity tags.

3783	   4.  Group privacy, by virtue of the uncorrelated pairwise keys used
3784	       in any two different groups.

3786	   The long-term storing of the Diffie-Hellman shared secret is a
3787	   potential security issue.  In fact, if the shared secret of two group
3788	   members is leaked, a third group member can exploit it to derive
3789	   their pairwise keys and use those to impersonate either of the two
3790	   group members to the other, or to decrypt previously stored messages
3791	   exchanged between those two members and protected with their pairwise
3792	   keys.  The possibility of such leakage should be considered more
3793	   likely than the leakage of a private key, which could be rather
3794	   protected at a significantly higher level than generic memory, e.g.,
3795	   by using a Trusted Platform Module.  Therefore, there is a trade-off
3796	   between the maximum amount of time a same shared secret is stored and
3797	   the frequency of its re-computing.

3799	14.3.  Uniqueness of (key, nonce)

3801	   The proof for uniqueness of (key, nonce) pairs in Appendix D.4 of
3802	   [RFC8613] is also valid in group communication scenarios.  That is,
3803	   given an OSCORE group:

3805	   *  Uniqueness of Sender IDs within the group is enforced by the Group
3806	      Manager.  In fact, from the moment when a Gid is assigned to a
3807	      group until the moment when a new Gid is assigned to that same
3808	      group, the Group Manager does not reassign a Sender ID within the
3809	      group (see Section 12.2.1.2).

3811	   *  The case A in Appendix D.4 of [RFC8613] concerns all requests as
3812	      well as all responses including a Partial IV (e.g., Observe
3813	      notifications [RFC7641] or any other subsequent responses after
3814	      the first one).  In this case, the same considerations from
3815	      [RFC8613] apply here as well.

3817	   *  The case B in Appendix D.4 of [RFC8613] concerns responses not
3818	      including a Partial IV (e.g., a single response to a request).  In
3819	      this case, the same considerations from [RFC8613] apply here as
3820	      well.

3822	   As a consequence, each message encrypted/decrypted with the same
3823	   Sender Key is processed by using a different (ID_PIV, PIV) pair.
3824	   This means that nonces used by any fixed encrypting endpoint are
3825	   unique.  Thus, each message is processed with a different (key,
3826	   nonce) pair.

3828	14.4.  Management of Group Keying Material

3830	   The protocol described in this document should take into account the
3831	   risk of compromise of group members.  In particular, this document
3832	   specifies that a key management scheme for secure revocation and
3833	   renewal of Security Contexts and group keying material MUST be
3834	   adopted.

3836	   [I-D.ietf-ace-key-groupcomm-oscore] specifies a simple rekeying
3837	   scheme for renewing the Security Context in a group.

3839	   Alternative rekeying schemes that are more scalable with the group
3840	   size may be needed in dynamic, large groups where endpoints can join
3841	   and leave at any time, in order to limit the impact on performance
3842	   due to the Security Context and keying material update.

3844	14.4.1.  Denial of Service

3846	   An adversary may leverage the loss of Sender Contexts and/or
3847	   Recipient Contexts as described in Section 2.6.1.1, in order to
3848	   perform a Denial of Service attack and prevent some group members
3849	   from communicating altogether.

3851	   That is, the adversary can first block the communication path between
3852	   the Group Manager and some individual group members.  This can be
3853	   achieved, for instance, by injecting fake responses to DNS queries
3854	   for the Group Manager hostname, or by removing a network link used
3855	   for routing traffic towards the Group Manager.

3857	   Then, the adversary can induce an unprepared reboot for some
3858	   endpoints in the group, e.g., by triggering a short power outage.
3859	   After that, such endpoints that have lost their Sender Context and/or
3860	   Recipient Contexts following the reboot would not be able to obtain
3861	   new Security Context parameters from the Group Manager, as specified
3862	   in Section 2.6.1.1.  Thus, they would not be able to further
3863	   communicate in the group until connectivity with the Group Manager is
3864	   restored.

3866	14.5.  Update of Security Context and Key Rotation

3868	   A group member can receive a message shortly after the group has been
3869	   rekeyed, and new security parameters and keying material have been
3870	   distributed by the Group Manager.

3872	   This may result in a client using an old Security Context to protect
3873	   a request, and a server using a different new Security Context to
3874	   protect a corresponding response.  As a consequence, clients may
3875	   receive a response protected with a Security Context different from
3876	   the one used to protect the corresponding request.

3878	   In particular, a server may first get a request protected with the
3879	   old Security Context, then install the new Security Context, and only
3880	   after that produce a response to send back to the client.  In such a
3881	   case, as specified in Section 7.3, the server MUST protect the
3882	   potential response using the new Security Context.  Specifically, the
3883	   server MUST include its Sender Sequence Number as Partial IV in the
3884	   response and use it to build the nonce to protect the response.  This
3885	   prevents the nonce from the request from being reused with the new
3886	   Security Context.

3888	   The client will process that response using the new Security Context,
3889	   provided that it has installed the new security parameters and keying
3890	   material before the message processing.

3892	   In case block-wise transfer [RFC7959] is used, the same
3893	   considerations from Section 10.3 of [RFC9594] hold.

3895	   Furthermore, as described below, a group rekeying may temporarily
3896	   result in misaligned Security Contexts between the sender and
3897	   recipient of a given message.

3899	14.5.1.  Late Update on the Sender

3901	   In this case, the sender protects a message using the old Security
3902	   Context, i.e., before having installed the new Security Context.
3903	   However, the recipient receives the message after having installed
3904	   the new Security Context, and is thus unable to correctly process it.

3906	   A possible way to ameliorate this issue is to preserve the old
3907	   retained Security Context for a maximum amount of time defined by the
3908	   application.  By doing so, the recipient can still try to process the
3909	   received message using the old retained Security Context.

3911	   This makes particular sense when the recipient is a client, that
3912	   would hence be able to process incoming responses protected with the
3913	   old retained Security Context used to protect the associated request.
3914	   If, as typically expected, the old Gid is not included in the
3915	   response, then the client will first fail to process the response
3916	   using the latest Security Context, and then use the old retained
3917	   Security Context as a second attempt.

3919	   Instead, a recipient server can immediately process an incoming
3920	   request with the old retained Security Context, as signaled by the
3921	   old Gid that is always included in requests.  However, the server
3922	   could simply discard such an incoming request, which is preferable
3923	   from a security point of view.

3925	   This tolerance preserves the processing of secure messages throughout
3926	   a long-lasting key rotation, as group rekeying processes may likely
3927	   take a long time to complete, especially in large groups.  On the
3928	   other hand, a former (compromised) group member can abusively take
3929	   advantage of this, and send messages protected with the old retained
3930	   Security Context.  Therefore, a conservative application policy
3931	   should not permit the retention of old Security Contexts.

3933	14.5.2.  Late Update on the Recipient

3935	   In this case, the sender protects a message using the new Security
3936	   Context, but the recipient receives that message before having
3937	   installed the new Security Context.  Therefore, the recipient would
3938	   not be able to correctly process the message and hence discards it.

3940	   If the recipient installs the new Security Context shortly after that
3941	   and the sender endpoint retransmits the message, the former will
3942	   still be able to receive and correctly process the message.

3944	   In any case, the recipient should actively ask the Group Manager for
3945	   an updated Security Context according to an application-defined
3946	   policy, for instance after a given number of unsuccessfully decrypted
3947	   incoming messages.

3949	14.6.  Collision of Group Identifiers

3951	   In case endpoints are deployed in multiple groups managed by
3952	   different non-synchronized Group Managers, it is possible for Group
3953	   Identifiers of different groups to coincide.

3955	   This does not impair the security of the AEAD Algorithm and of the
3956	   Group Encryption Algorithm.  In fact, as long as the Master Secret is
3957	   different for different groups and this condition holds over time,
3958	   keys are different among different groups.

3960	   In case multiple groups use the same IP multicast address, the entity
3961	   assigning that address may help limiting the chances to experience
3962	   such collisions of Group Identifiers.  In particular, it may allow
3963	   the Group Managers of those groups using the same IP multicast
3964	   address to share their respective list of assigned Group Identifiers
3965	   currently in use.

3967	14.7.  Cross-group Message Injection

3969	   A given endpoint is allowed to and would likely use the same pair
3970	   (private key, authentication credential) in multiple OSCORE groups,
3971	   possibly administered by different Group Managers.

3973	   When a sender endpoint sends a message protected in pairwise mode to
3974	   a recipient endpoint in an OSCORE group, a malicious group member may
3975	   attempt to inject the message to a different OSCORE group also
3976	   including the same endpoints (see Section 14.7.1).

3978	   This relies on altering the content of the OSCORE Option in such a
3979	   way that the MAC in the ciphertext will still be correctly validated,
3980	   which has a success probability depending on the size of the MAC.

3982	   As discussed in Section 14.7.2, the attack is practically infeasible
3983	   if the message is protected in group mode, thanks to the
3984	   countersignature also bound to the OSCORE Option through the
3985	   Additional Authenticated Data used in the signing process (see
3986	   Section 3.4).

3988	14.7.1.  Attack Description

3990	   Let us consider:

3992	   *  Two OSCORE groups G1 and G2, with ID Context (Group ID) Gid1 and
3993	      Gid2, respectively.  Both G1 and G2 use the AEAD cipher AES-CCM-
3994	      16-64-128, i.e., the MAC of the ciphertext is 8 bytes in size.

3996	   *  A sender endpoint X which is member of both G1 and G2, and uses
3997	      the same pair (private key, authentication credential) in both
3998	      groups.  The endpoint X has Sender ID Sid1 in G1 and Sender ID
3999	      Sid2 in G2.  The pairs (Sid1, Gid1) and (Sid2, Gid2) identify the
4000	      same authentication credential of X in G1 and G2, respectively.

4002	   *  A recipient endpoint Y which is member of both G1 and G2, and uses
4003	      the same pair (private key, authentication credential) in both
4004	      groups.  The endpoint Y has Sender ID Sid3 in G1 and Sender ID
4005	      Sid4 in G2.  The pairs (Sid3, Gid1) and (Sid4, Gid2) identify the
4006	      same authentication credential of Y in G1 and G2, respectively.

4008	   *  A malicious endpoint Z is also member of both G1 and G2.  Hence, Z
4009	      is able to derive the Sender Keys used by X in G1 and G2.

4011	   When X sends a message M1 addressed to Y in G1 and protected in
4012	   pairwise mode, Z can intercept M1, and attempt to forge a valid
4013	   message M2 to be injected in G2, making it appear as still sent by X
4014	   to Y and valid to be accepted.

4016	   In more detail, Z intercepts and stops message M1, and forges a
4017	   message M2 by changing the value of the OSCORE Option from M1 as
4018	   follows: the 'kid context' is set to G2 (rather than G1); and the
4019	   'kid' is set to Sid2 (rather than Sid1).  Then, Z injects message M2
4020	   as addressed to Y in G2.

4022	   Upon receiving M2, there is a probability equal to 2^-64 that Y
4023	   successfully verifies the same unchanged MAC by using the Pairwise
4024	   Recipient Key associated with X in G2.

4026	   Note that Z does not know the pairwise keys of X and Y, since it does
4027	   not know and is not able to compute their shared Diffie-Hellman
4028	   secret.  Therefore, Z is not able to check offline if a performed
4029	   forgery is actually valid, before sending the forged message to G2.

4031	14.7.2.  Attack Prevention in Group Mode

4033	   When a Group OSCORE message is protected in group mode, the
4034	   countersignature is also computed over the value of the OSCORE
4035	   Option, which is part of the Additional Authenticated Data used in
4036	   the signing process (see Section 3.4).

4038	   That is, other than over the ciphertext, the countersignature is
4039	   computed over: the ID Context (Gid) and the Partial IV, which are
4040	   always present in requests; as well as the Sender ID of the message
4041	   originator, which is always present in requests as well as in
4042	   responses to requests protected in group mode.

4044	   Since the signing process also takes as input the ciphertext of the
4045	   COSE_Encrypt0 object, the countersignature is bound not only to the
4046	   intended OSCORE group, hence to the triplet (Master Secret, Master
4047	   Salt, ID Context), but also to a specific Sender ID in that group and
4048	   to its specific symmetric key used for AEAD encryption, hence to the
4049	   quartet (Master Secret, Master Salt, ID Context, Sender ID).

4051	   This makes it practically infeasible to perform the attack described
4052	   in Section 14.7.1, since it would require the adversary to
4053	   additionally forge a valid countersignature that replaces the
4054	   original one in the forged message M2.

4056	14.8.  Prevention of Group Cloning Attack

4058	   Both when using the group mode and the pairwise mode, the message
4059	   protection covers also the Group Manager's authentication credential.
4060	   This is included in the Additional Authenticated Data used in the
4061	   signing process and/or in the integrity-protected encryption process
4062	   (see Section 3.4).

4064	   By doing so, an endpoint X member of a group G1 cannot perform the
4065	   following attack.

4067	   1.  X sets up a group G2 where it acts as Group Manager.

4069	   2.  X makes G2 a "clone" of G1, i.e., G1 and G2 use the same
4070	       algorithms and have the same Master Secret, Master Salt, and ID
4071	       Context.

4073	   3.  X collects a message M sent to G1 and injects it in G2.

4075	   4.  Members of G2 accept M and believe it to be originated in G2.

4077	   The attack above is effectively prevented, since message M is
4078	   protected by including the authentication credential of G1's Group
4079	   Manager in the Additional Authenticated Data.  Therefore, members of
4080	   G2 do not successfully verify and decrypt M, since they correctly use
4081	   the authentication credential of X as Group Manager of G2 when
4082	   attempting to.

4084	14.9.  Group OSCORE for Unicast Requests

4086	   If a request is intended to be sent over unicast as addressed to a
4087	   single group member, it is NOT RECOMMENDED for the client to protect
4088	   the request by using the group mode as defined in Section 7.1.

4090	   This does not include the case where the client sends a request over
4091	   unicast to a proxy, to be forwarded to multiple intended recipients
4092	   over multicast [I-D.ietf-core-groupcomm-bis].  In this case, the
4093	   client typically protects the request with the group mode, even
4094	   though it is sent to the proxy over unicast (see Section 7).

4096	   If the client uses the group mode with its own Sender Key to protect
4097	   a unicast request to a group member, an on-path adversary can, right
4098	   then or later on, redirect that request to one/many different group
4099	   member(s) over unicast, or to the whole OSCORE group over multicast.
4100	   By doing so, the adversary can induce the target group member(s) to
4101	   perform actions intended for one group member only.  Note that the
4102	   adversary can be external, i.e., they do not need to also be a member
4103	   of the OSCORE group.

4105	   This is due to the fact that the client is not able to indicate the
4106	   single intended recipient in a way which is secure and possible to
4107	   process for Group OSCORE on the server side.  In particular, Group
4108	   OSCORE does not protect network addressing information such as the IP
4109	   address of the intended recipient server.  It follows that the
4110	   server(s) receiving the redirected request cannot verify whether that
4111	   was the original intention of the client, and would thus simply
4112	   assume so.

4114	   The impact of such an attack depends especially on the REST method of
4115	   the request, i.e., the Inner CoAP Code of the OSCORE request message.
4116	   In particular, safe methods such as GET and FETCH would trigger
4117	   (several) unintended responses from the targeted server(s), while not
4118	   resulting in destructive behavior.  On the other hand, non safe
4119	   methods such as PUT, POST, and PATCH/iPATCH would result in the
4120	   target server(s) taking active actions on their resources and
4121	   possible cyber-physical environment, with the risk of destructive
4122	   consequences and possible implications for safety.

4124	   A client can instead use the pairwise mode as defined in Section 8.3,
4125	   in order to protect a request sent to a single group member by using
4126	   pairwise keying material (see Section 2.5).  This prevents the attack
4127	   discussed above by construction, as only the intended server is able
4128	   to derive the pairwise keying material used by the client to protect
4129	   the request.

4131	   Before delivering to the application an incoming request protected in
4132	   group mode that was sent over unicast, a server should carefully
4133	   consider the impact that processing the request would have, without
4134	   dismissing the possibility that the request reception was in fact the
4135	   result of the attack discussed above.  This is especially important
4136	   for endpoints implementing only a silent server, since they do not
4137	   support the pairwise mode and thus are able to process only requests
4138	   protected in group mode.  Application policies can also define
4139	   specific exceptional cases where it is safe for a server to deliver
4140	   such requests to the application, which can then take a final
4141	   decision about whether acting on the request or not.  For instance,
4142	   such decision can leverage an application-level unique identifier of
4143	   the server specified in the payload of the request.

4145	   In a group where the AEAD Algorithm and Pairwise Key Agreement
4146	   Algorithm are set in the Security Context, an endpoint supporting the
4147	   pairwise mode SHOULD use it to protect requests sent to a single
4148	   group member over unicast.  Using the group mode to protect such
4149	   requests would make the request possible to decrypt and verify for
4150	   any other group member; this may sometimes be a desired property
4151	   (e.g. see [I-D.ietf-core-observe-multicast-notifications]).

4153	   The use of block-wise transfers [RFC7959] with group communication
4154	   for CoAP is as discussed in Section 3.8 of
4155	   [I-D.ietf-core-groupcomm-bis].  Note that, after the first request
4156	   targeting all servers in the group over multicast, a client can
4157	   switch to sending unicast requests for retrieving further blocks from
4158	   the servers.  In particular, after a first block-wise request that
4159	   targets all servers in the group and includes the CoAP Block2 Option,
4160	   the retrieval of further blocks can use unicast requests, which
4161	   should therefore be protected using the pairwise mode.  Similarly, if
4162	   the first request that targeted all servers in the group did not
4163	   include the CoAP Block2 Option and the corresponding responses
4164	   included the Block2 Option at the servers' own initiative, then the
4165	   retrieval of further blocks can use unicast requests, which should
4166	   therefore be protected using the pairwise mode.

4168	   Additional considerations are discussed in Section 9, with respect to
4169	   requests including a CoAP Echo Option [RFC9175] that have to be sent
4170	   over unicast, as a challenge-response method for servers to achieve
4171	   freshness or to initialize as valid a previously invalid Replay
4172	   Window.

4174	14.10.  End-to-end Protection

4176	   The same considerations from Section 12.1 of [RFC8613] hold for Group
4177	   OSCORE.

4179	   Additionally, (D)TLS and Group OSCORE can be combined for protecting
4180	   message exchanges occurring over unicast.  However, it is not
4181	   possible to combine (D)TLS and Group OSCORE for protecting message
4182	   exchanges where messages are sent over multicast.

4184	14.11.  Master Secret

4186	   Group OSCORE derives the Security Context using the same construction
4187	   used by OSCORE, and by using the Group Identifier of a group as the
4188	   related ID Context.  Hence, the same required properties of the
4189	   Security Context parameters discussed in Section 3.3 of [RFC8613]
4190	   hold for this document.

4192	   With particular reference to the OSCORE Master Secret, it has to be
4193	   kept secret among the members of the respective OSCORE group and the
4194	   Group Manager responsible for that group.  Also, the Master Secret
4195	   must have a good amount of randomness, and the Group Manager can
4196	   generate it offline using a good random number generator.  This
4197	   includes the case where the Group Manager rekeys the group by
4198	   generating and distributing a new Master Secret.  Randomness
4199	   requirements for security are described in [RFC4086].

4201	14.12.  Replay Protection

4203	   As in OSCORE [RFC8613], Group OSCORE relies on Sender Sequence
4204	   Numbers included in the COSE message field 'Partial IV' and used to
4205	   build nonces.

4207	   Note that the Partial IV of an endpoint does not necessarily grow
4208	   monotonically.  For instance, upon exhaustion of the endpoint's
4209	   Sender Sequence Number space, the endpoint's Partial IV space also
4210	   gets exhausted.  As discussed in Section 2.6.3, this results either
4211	   in the endpoint being individually rekeyed and getting a new Sender
4212	   ID, or in the establishment of a new Security Context in the group.
4213	   Therefore, uniqueness of (key, nonce) pairs (see Section 14.3) is
4214	   preserved when a new Security Context is established.

4216	   Since one-to-many communication such as multicast usually involves
4217	   unreliable transports, the simplification of the Replay Window to a
4218	   size of 1 suggested in Section 7.4 of [RFC8613] is not viable with
4219	   Group OSCORE, unless exchanges in the group rely only on unicast
4220	   messages.

4222	   A server's Replay Window may be initialized as invalid (see
4223	   Section 2.6.1).  The server can either retrieve a new Group OSCORE
4224	   Security Context, or make a Replay Window valid (see Section 9)
4225	   before accepting further incoming messages from other group members.

4227	14.13.  Message Ordering

4229	   Assuming that the other endpoint is honest, Group OSCORE provides
4230	   relative ordering of received messages.  For a given Group OSCORE
4231	   Security Context, the received Partial IV (when included) allows the
4232	   recipient endpoint to determine the order in which requests or
4233	   responses were sent by the other endpoint.

4235	   If the Partial IV was omitted in a response, this indicates that it
4236	   was the oldest response from the sender endpoint to the corresponding
4237	   request (like notification responses in OSCORE, see Section 7.4.1 of
4238	   [RFC8613]).  A received response is not older than the corresponding
4239	   request.

4241	14.14.  Message Freshness

4243	   As in OSCORE, Group OSCORE provides only the guarantee that the
4244	   request is not older than the Group OSCORE Security Context used to
4245	   protect it.  Other aspects of freshness are discussed in Section 5.2.

4247	   The challenge-response approach described in Section 9 provides an
4248	   assurance of freshness of the request without depending on the
4249	   honesty of the client.  However, it can result in an impact on
4250	   performance which is undesirable or unbearable, especially in large
4251	   groups where many endpoints at the same time might join as new
4252	   members.

4254	   Endpoints configured as silent servers are not able to perform the
4255	   challenge-response described above, as they do not store a Sender
4256	   Context to secure the 4.01 (Unauthorized) response to the client.
4257	   Thus, silent servers should adopt alternative approaches to make
4258	   their Replay Windows valid.  For example, a silent server can
4259	   retrieve or wait for new Security Context parameters from the Group
4260	   Manager and derive new Recipient Contexts.  When doing so, the Replay
4261	   Windows of all Recipient Contexts become valid if they are not
4262	   already.  In particular, any invalid Replay Window is re-initialized
4263	   as valid and with 0 as its current lower limit.

4265	   Since requests including the Echo Option are sent over unicast, a
4266	   server can be the victim of the attack discussed in Section 14.9 if
4267	   such requests are protected in group mode.  Instead, protecting those
4268	   requests with the pairwise mode prevents the attack above.  In fact,
4269	   only the server involved in the challenge-response exchange is able
4270	   to derive the pairwise key used by the client to protect the request
4271	   including the Echo Option.

4273	   In either case, an internal on-path adversary would not be able to
4274	   transpose the Echo Option value of two different unicast requests,
4275	   sent by a same client to any two different servers in the group.  In
4276	   fact, even if the group mode was used, this would require the
4277	   adversary to forge the countersignature of both requests.  As a
4278	   consequence, each of the two servers remains able to selectively
4279	   accept a request with the Echo Option only if it is waiting for that
4280	   exact integrity-protected Echo Option value, and is thus the intended
4281	   recipient.

4283	14.15.  Client Aliveness

4285	   Like in OSCORE (see Section 12.5 of [RFC8613]), a server may verify
4286	   the aliveness of the client by using the CoAP Echo Option [RFC9175]
4287	   as described in Section 9.

4289	   In the interest of avoiding otherwise unnecessary uses of such an
4290	   approach, the server can exploit the fact that the received request
4291	   cannot be older than the Security Context used to protect it.  This
4292	   effectively allows the server to verify the client aliveness relative
4293	   to the installation of the latest group keying material.

4295	14.16.  Cryptographic Considerations

4297	   The same considerations from Section 12.6 of [RFC8613] about the
4298	   maximum Sender Sequence Number hold for Group OSCORE.

4300	   As discussed in Section 2.6.2, an endpoint that experiences an
4301	   exhaustion of its own Sender Sequence Number space MUST NOT protect
4302	   further messages including a Partial IV, until it has derived a new
4303	   Sender Context.  This prevents the endpoint from reusing the same
4304	   nonce with the same Sender Key.

4306	   In order to renew its own Sender Context, the endpoint SHOULD inform
4307	   the Group Manager, which can either renew the whole Security Context
4308	   by means of group rekeying, or provide only that endpoint with a new
4309	   Sender ID value.  In either case, the endpoint derives a new Sender
4310	   Context, and in particular a new Sender Key.

4312	   Additionally, the same considerations from Section 12.6 of [RFC8613]
4313	   hold for Group OSCORE, about building the nonce and the secrecy of
4314	   the Security Context parameters.

4316	   The group mode uses the "encrypt-then-sign" construction, i.e., the
4317	   countersignature is computed over the COSE_Encrypt0 object (see
4318	   Section 3.1).  This is motivated by enabling signature checkers (see
4319	   Section 12.3), which do not join a group as members but are allowed
4320	   to verify countersignatures of messages protected in group mode
4321	   without being able to decrypt those messages (see Section 7.5).

4323	   If the Group Encryption Algorithm used in group mode provides
4324	   integrity protection, countersignatures of COSE_Encrypt0 with short
4325	   authentication tags do not provide the security properties associated
4326	   with the same algorithm used in COSE_Sign (see Section 6 of
4327	   [RFC9338]).  To provide 128-bit security against collision attacks,
4328	   the tag length MUST be at least 256-bits.  A countersignature of a
4329	   COSE_Encrypt0 with AES-CCM-16-64-128 provides at most 32 bits of
4330	   integrity protection.

4332	   The derivation of pairwise keys defined in Section 2.5.1 is
4333	   compatible with ECDSA and EdDSA asymmetric keys, but is not
4334	   compatible with RSA asymmetric keys.

4336	   For the public key translation from Ed25519 (Ed448) to X25519 (X448)
4337	   specified in Section 2.5.1, variable time methods can be used since
4338	   the translation operates on public information.  Any byte string of
4339	   appropriate length is accepted as a public key for X25519 (X448) in
4340	   [RFC7748].  It is therefore not necessary for security to validate
4341	   the translated public key (assuming the translation was successful).

4343	   The security of using the same key pair for Diffie-Hellman and for
4344	   signing (by considering the ECDH procedure in Section 2.5 as a Key
4345	   Encapsulation Mechanism (KEM)) is demonstrated in [Degabriele] and
4346	   [Thormarker].

4348	   Applications using ECDH (except X25519 and X448) based KEM in
4349	   Section 2.5 are assumed to verify that a peer endpoint's public key
4350	   is on the expected curve and that the shared secret is not the point
4351	   at infinity.  The KEM in [Degabriele] checks that the shared secret
4352	   is different from the point at infinity, as does the procedure in
4353	   Section 5.7.1.2 of [NIST-800-56A] which is referenced in Section 2.5.

4355	   By extending Theorem 2 of [Degabriele], [Thormarker] shows that the
4356	   same key pair can be used with X25519 and Ed25519 (X448 and Ed448)
4357	   for the KEM specified in Section 2.5.  By symmetry in the KEM used in
4358	   this document, both endpoints can consider themselves to have the
4359	   recipient role in the KEM - as discussed in Section 7 of [Thormarker]
4360	   - and rely on the mentioned proofs for the security of their key
4361	   pairs.

4363	   Theorem 3 in [Degabriele] shows that the same key pair can be used
4364	   for an ECDH based KEM and ECDSA.  The KEM uses a different KDF than
4365	   in Section 2.5, but the proof only depends on that the KDF has
4366	   certain required properties, which are the typical assumptions about
4367	   HKDF, e.g., that output keys are pseudorandom.  In order to comply
4368	   with the assumptions of Theorem 3, received public keys MUST be
4369	   successfully validated, see Section 5.6.2.3.4 of [NIST-800-56A].  The
4370	   validation MAY be performed by a trusted Group Manager.  For
4371	   [Degabriele] to apply as it is written, public keys need to be in the
4372	   expected subgroup.  For this, we rely on cofactor Diffie-Hellman as
4373	   per Section 5.7.1.2 of [NIST-800-56A], which is referenced in
4374	   Section 2.5.1.

4376	   HashEdDSA variants of Ed25519 and Ed448 are not used by COSE (see
4377	   Section 2.2 of [RFC9053]), and are not covered by the analysis in
4378	   [Thormarker].  Hence, they MUST NOT be used with the public keys used
4379	   to derive pairwise keys as specified in this document.

4381	14.17.  Message Segmentation

4383	   The same considerations from Section 12.7 of [RFC8613] hold for Group
4384	   OSCORE.

4386	14.18.  Privacy Considerations

4388	   Group OSCORE ensures end-to-end integrity protection and encryption
4389	   of the message payload and of all the options that are not used for
4390	   proxy operations.  In particular, options are processed according to
4391	   the same class U/I/E that they have for OSCORE.  Therefore, the same
4392	   privacy considerations from Section 12.8 of [RFC8613] hold for Group
4393	   OSCORE, with the following addition.

4395	   *  When protecting a message in group mode, the countersignature is
4396	      encrypted by using a keystream derived from the group keying
4397	      material (see Section 4.1 and Section 4.2).  This ensures group
4398	      privacy.  That is, an attacker cannot track an endpoint over two
4399	      groups by linking messages between the two groups, unless being
4400	      also a member of those groups.

4402	   Furthermore, the following privacy considerations hold about the
4403	   OSCORE Option, which may reveal information on the communicating
4404	   endpoints.

4406	   *  The 'kid' parameter, which is intended to help a recipient
4407	      endpoint to find the right Recipient Context, may reveal
4408	      information about the Sender Endpoint.  When both a request and
4409	      the corresponding responses include the 'kid' parameter, this may
4410	      reveal information about both a client sending a request and all
4411	      the possibly replying servers sending their own individual
4412	      response.

4414	   *  The 'kid context' parameter, which is intended to help a recipient
4415	      endpoint to find the right Security Context, reveals information
4416	      about the sender endpoint.  In particular, it reveals that the
4417	      sender endpoint is a member of a particular OSCORE group, whose
4418	      current Group ID is indicated in the 'kid context' parameter.

4420	   When receiving a group request, each of the recipient endpoints can
4421	   reply with a response that includes its Sender ID as 'kid' parameter.
4422	   All these responses will be matchable with the request through the
4423	   CoAP Token.  Thus, even if these responses do not include a 'kid
4424	   context' parameter, it becomes possible to understand that the
4425	   responder endpoints are in the same group of the requester endpoint.

4427	   Furthermore, using the approach described in Section 9 to make Replay
4428	   Windows valid may reveal when a server device goes through a reboot.
4429	   This can be mitigated by the server device storing the precise state
4430	   of the Replay Window of each known client on a clean shutdown.

4432	   Finally, the approach described in Section 14.6 to prevent collisions
4433	   of Group Identifiers from different Group Managers may reveal
4434	   information about events in the respective OSCORE groups.  In
4435	   particular, a Group Identifier changes when the corresponding group
4436	   is rekeyed.  Thus, Group Managers might use the shared list of Group
4437	   Identifiers to infer the rate and patterns of group membership
4438	   changes triggering a group rekeying, e.g., due to newly joined
4439	   members or evicted (compromised) members.  In order to alleviate this
4440	   privacy concern, it should be hidden from the Group Managers which
4441	   exact Group Manager has currently assigned which Group Identifiers in
4442	   its OSCORE groups.

4444	15.  IANA Considerations

4446	   Note to RFC Editor: Please replace "[RFC-XXXX]" with the RFC number
4447	   of this document and delete this paragraph.

4449	   This document has the following actions for IANA.

4451	15.1.  OSCORE Flag Bits Registry

4453	   IANA is asked to add the following entry to the "OSCORE Flag Bits"
4454	   registry within the "Constrained RESTful Environments (CoRE)
4455	   Parameters" registry group.

4457	   +==========+=======+===================================+============+
4458	   | Bit      | Name  | Description                       | Reference  |
4459	   | Position |       |                                   |            |
4460	   +==========+=======+===================================+============+
4461	   | 2        | Group | For using a Group OSCORE          | [RFC-XXXX] |
4462	   |          | Flag  | Security Context, set to 1        |            |
4463	   |          |       | if the message is protected       |            |
4464	   |          |       | with the group mode               |            |
4465	   +----------+-------+-----------------------------------+------------+

4467	          Table 1: Registrations in the OSCORE Flag Bits Registry

4469	15.2.  Target Attributes Registry

4471	   IANA is asked to add the following entry to the "Target Attributes"
4472	   registry within the "Constrained RESTful Environments (CoRE)
4473	   Parameters" registry group.

4475	   Attribute Name: gosc
4476	   Brief Description: Hint: resource only accessible
4477	                      using Group OSCORE or OSCORE
4478	   Change Controller: IETF
4479	   Reference: [RFC-XXXX]

4481	16.  References

4483	16.1.  Normative References

4485	   [COSE.Algorithms]
4486	              IANA, "COSE Algorithms",
4487	              <https://www.iana.org/assignments/cose/
4488	              cose.xhtml#algorithms>.

4490	   [I-D.ietf-core-groupcomm-bis]
4491	              Dijk, E. and M. Tiloca, "Group Communication for the
4492	              Constrained Application Protocol (CoAP)", Work in
4493	              Progress, Internet-Draft, draft-ietf-core-groupcomm-bis-
4494	              14, 2 July 2025, <https://datatracker.ietf.org/doc/html/
4495	              draft-ietf-core-groupcomm-bis-14>.

4497	   [NIST-800-56A]
4498	              Barker, E., Chen, L., Roginsky, A., Vassilev, A., and R.
4499	              Davis, "Recommendation for Pair-Wise Key-Establishment
4500	              Schemes Using Discrete Logarithm Cryptography - NIST
4501	              Special Publication 800-56A, Revision 3", April 2018,
4502	              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/
4503	              NIST.SP.800-56Ar3.pdf>.

4505	   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
4506	              Requirement Levels", BCP 14, RFC 2119,
4507	              DOI 10.17487/RFC2119, March 1997,
4508	              <https://www.rfc-editor.org/rfc/rfc2119>.

4510	   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,
4511	              "Randomness Requirements for Security", BCP 106, RFC 4086,
4512	              DOI 10.17487/RFC4086, June 2005,
4513	              <https://www.rfc-editor.org/rfc/rfc4086>.

4515	   [RFC5869]  Krawczyk, H. and P. Eronen, "HMAC-based Extract-and-Expand
4516	              Key Derivation Function (HKDF)", RFC 5869,
4517	              DOI 10.17487/RFC5869, May 2010,
4518	              <https://www.rfc-editor.org/rfc/rfc5869>.

4520	   [RFC6979]  Pornin, T., "Deterministic Usage of the Digital Signature
4521	              Algorithm (DSA) and Elliptic Curve Digital Signature
4522	              Algorithm (ECDSA)", RFC 6979, DOI 10.17487/RFC6979, August
4523	              2013, <https://www.rfc-editor.org/rfc/rfc6979>.

4525	   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
4526	              Application Protocol (CoAP)", RFC 7252,
4527	              DOI 10.17487/RFC7252, June 2014,
4528	              <https://www.rfc-editor.org/rfc/rfc7252>.

4530	   [RFC7641]  Hartke, K., "Observing Resources in the Constrained
4531	              Application Protocol (CoAP)", RFC 7641,
4532	              DOI 10.17487/RFC7641, September 2015,
4533	              <https://www.rfc-editor.org/rfc/rfc7641>.

4535	   [RFC7748]  Langley, A., Hamburg, M., and S. Turner, "Elliptic Curves
4536	              for Security", RFC 7748, DOI 10.17487/RFC7748, January
4537	              2016, <https://www.rfc-editor.org/rfc/rfc7748>.

4539	   [RFC8032]  Josefsson, S. and I. Liusvaara, "Edwards-Curve Digital
4540	              Signature Algorithm (EdDSA)", RFC 8032,
4541	              DOI 10.17487/RFC8032, January 2017,
4542	              <https://www.rfc-editor.org/rfc/rfc8032>.

4544	   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
4545	              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
4546	              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

4548	   [RFC8288]  Nottingham, M., "Web Linking", RFC 8288,
4549	              DOI 10.17487/RFC8288, October 2017,
4550	              <https://www.rfc-editor.org/rfc/rfc8288>.

4552	   [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
4553	              Definition Language (CDDL): A Notational Convention to
4554	              Express Concise Binary Object Representation (CBOR) and
4555	              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
4556	              June 2019, <https://www.rfc-editor.org/rfc/rfc8610>.

4558	   [RFC8613]  Selander, G., Mattsson, J., Palombini, F., and L. Seitz,
4559	              "Object Security for Constrained RESTful Environments
4560	              (OSCORE)", RFC 8613, DOI 10.17487/RFC8613, July 2019,
4561	              <https://www.rfc-editor.org/rfc/rfc8613>.

4563	   [RFC8949]  Bormann, C. and P. Hoffman, "Concise Binary Object
4564	              Representation (CBOR)", STD 94, RFC 8949,
4565	              DOI 10.17487/RFC8949, December 2020,
4566	              <https://www.rfc-editor.org/rfc/rfc8949>.

4568	   [RFC9052]  Schaad, J., "CBOR Object Signing and Encryption (COSE):
4569	              Structures and Process", STD 96, RFC 9052,
4570	              DOI 10.17487/RFC9052, August 2022,
4571	              <https://www.rfc-editor.org/rfc/rfc9052>.

4573	   [RFC9053]  Schaad, J., "CBOR Object Signing and Encryption (COSE):
4574	              Initial Algorithms", RFC 9053, DOI 10.17487/RFC9053,
4575	              August 2022, <https://www.rfc-editor.org/rfc/rfc9053>.

4577	   [RFC9175]  Amsüss, C., Preuß Mattsson, J., and G. Selander,
4578	              "Constrained Application Protocol (CoAP): Echo, Request-
4579	              Tag, and Token Processing", RFC 9175,
4580	              DOI 10.17487/RFC9175, February 2022,
4581	              <https://www.rfc-editor.org/rfc/rfc9175>.

4583	   [RFC9338]  Schaad, J., "CBOR Object Signing and Encryption (COSE):
4584	              Countersignatures", STD 96, RFC 9338,
4585	              DOI 10.17487/RFC9338, December 2022,
4586	              <https://www.rfc-editor.org/rfc/rfc9338>.

4588	   [RFC9459]  Housley, R. and H. Tschofenig, "CBOR Object Signing and
4589	              Encryption (COSE): AES-CTR and AES-CBC", RFC 9459,
4590	              DOI 10.17487/RFC9459, September 2023,
4591	              <https://www.rfc-editor.org/rfc/rfc9459>.

4593	16.2.  Informative References

4595	   [Degabriele]
4596	              Degabriele, J. P., Lehmann, A., Paterson, K. G., Smart, N.
4597	              P., and M. Strefler, "On the Joint Security of Encryption
4598	              and Signature in EMV", December 2011,
4599	              <https://eprint.iacr.org/2011/615>.

4601	   [I-D.amsuess-core-cachable-oscore]
4602	              Amsüss, C. and M. Tiloca, "Cacheable OSCORE", Work in
4603	              Progress, Internet-Draft, draft-amsuess-core-cachable-
4604	              oscore-11, 6 July 2025,
4605	              <https://datatracker.ietf.org/doc/html/draft-amsuess-core-
4606	              cachable-oscore-11>.

4608	   [I-D.ietf-ace-key-groupcomm-oscore]
4609	              Tiloca, M. and F. Palombini, "Key Management for Group
4610	              Object Security for Constrained RESTful Environments
4611	              (Group OSCORE) Using Authentication and Authorization for
4612	              Constrained Environments (ACE)", Work in Progress,
4613	              Internet-Draft, draft-ietf-ace-key-groupcomm-oscore-18, 28
4614	              August 2025, <https://datatracker.ietf.org/doc/html/draft-
4615	              ietf-ace-key-groupcomm-oscore-18>.

4617	   [I-D.ietf-core-groupcomm-proxy]
4618	              Tiloca, M. and E. Dijk, "Proxy Operations for CoAP Group
4619	              Communication", Work in Progress, Internet-Draft, draft-
4620	              ietf-core-groupcomm-proxy-05, 3 September 2025,
4621	              <https://datatracker.ietf.org/doc/html/draft-ietf-core-
4622	              groupcomm-proxy-05>.

4624	   [I-D.ietf-core-observe-multicast-notifications]
4625	              Tiloca, M., Höglund, R., Amsüss, C., and F. Palombini,
4626	              "Observe Notifications as CoAP Multicast Responses", Work
4627	              in Progress, Internet-Draft, draft-ietf-core-observe-
4628	              multicast-notifications-12, 7 July 2025,
4629	              <https://datatracker.ietf.org/doc/html/draft-ietf-core-
4630	              observe-multicast-notifications-12>.

4632	   [I-D.ietf-core-oscore-capable-proxies]
4633	              Tiloca, M. and R. Höglund, "OSCORE-capable Proxies", Work
4634	              in Progress, Internet-Draft, draft-ietf-core-oscore-
4635	              capable-proxies-05, 3 September 2025,
4636	              <https://datatracker.ietf.org/doc/html/draft-ietf-core-
4637	              oscore-capable-proxies-05>.

4639	   [I-D.ietf-cose-cbor-encoded-cert]
4640	              Mattsson, J. P., Selander, G., Raza, S., Höglund, J., and
4641	              M. Furuhed, "CBOR Encoded X.509 Certificates (C509
4642	              Certificates)", Work in Progress, Internet-Draft, draft-
4643	              ietf-cose-cbor-encoded-cert-15, 18 August 2025,
4644	              <https://datatracker.ietf.org/doc/html/draft-ietf-cose-
4645	              cbor-encoded-cert-15>.

4647	   [I-D.ietf-iotops-security-protocol-comparison]
4648	              Mattsson, J. P., Palombini, F., and M. Vučinić,
4649	              "Comparison of CoAP Security Protocols", Work in Progress,
4650	              Internet-Draft, draft-ietf-iotops-security-protocol-
4651	              comparison-09, 4 June 2025,
4652	              <https://datatracker.ietf.org/doc/html/draft-ietf-iotops-
4653	              security-protocol-comparison-09>.

4655	   [I-D.ietf-lwig-curve-representations]
4656	              Struik, R., "Alternative Elliptic Curve Representations",
4657	              Work in Progress, Internet-Draft, draft-ietf-lwig-curve-
4658	              representations-23, 21 January 2022,
4659	              <https://datatracker.ietf.org/doc/html/draft-ietf-lwig-
4660	              curve-representations-23>.

4662	   [I-D.irtf-cfrg-det-sigs-with-noise]
4663	              Mattsson, J. P., Thormarker, E., and S. Ruohomaa, "Hedged
4664	              ECDSA and EdDSA Signatures", Work in Progress, Internet-
4665	              Draft, draft-irtf-cfrg-det-sigs-with-noise-05, 3 March
4666	              2025, <https://datatracker.ietf.org/doc/html/draft-irtf-
4667	              cfrg-det-sigs-with-noise-05>.

4669	   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
4670	              10646", STD 63, RFC 3629, DOI 10.17487/RFC3629, November
4671	              2003, <https://www.rfc-editor.org/rfc/rfc3629>.

4673	   [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,
4674	              "Transmission of IPv6 Packets over IEEE 802.15.4
4675	              Networks", RFC 4944, DOI 10.17487/RFC4944, September 2007,
4676	              <https://www.rfc-editor.org/rfc/rfc4944>.

4678	   [RFC4949]  Shirey, R., "Internet Security Glossary, Version 2",
4679	              FYI 36, RFC 4949, DOI 10.17487/RFC4949, August 2007,
4680	              <https://www.rfc-editor.org/rfc/rfc4949>.

4682	   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
4683	              Housley, R., and W. Polk, "Internet X.509 Public Key
4684	              Infrastructure Certificate and Certificate Revocation List
4685	              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
4686	              <https://www.rfc-editor.org/rfc/rfc5280>.

4688	   [RFC6282]  Hui, J., Ed. and P. Thubert, "Compression Format for IPv6
4689	              Datagrams over IEEE 802.15.4-Based Networks", RFC 6282,
4690	              DOI 10.17487/RFC6282, September 2011,
4691	              <https://www.rfc-editor.org/rfc/rfc6282>.

4693	   [RFC6690]  Shelby, Z., "Constrained RESTful Environments (CoRE) Link
4694	              Format", RFC 6690, DOI 10.17487/RFC6690, August 2012,
4695	              <https://www.rfc-editor.org/rfc/rfc6690>.

4697	   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, "Terminology for
4698	              Constrained-Node Networks", RFC 7228,
4699	              DOI 10.17487/RFC7228, May 2014,
4700	              <https://www.rfc-editor.org/rfc/rfc7228>.

4702	   [RFC7942]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
4703	              Code: The Implementation Status Section", BCP 205,
4704	              RFC 7942, DOI 10.17487/RFC7942, July 2016,
4705	              <https://www.rfc-editor.org/rfc/rfc7942>.

4707	   [RFC7959]  Bormann, C. and Z. Shelby, Ed., "Block-Wise Transfers in
4708	              the Constrained Application Protocol (CoAP)", RFC 7959,
4709	              DOI 10.17487/RFC7959, August 2016,
4710	              <https://www.rfc-editor.org/rfc/rfc7959>.

4712	   [RFC8075]  Castellani, A., Loreto, S., Rahman, A., Fossati, T., and
4713	              E. Dijk, "Guidelines for Mapping Implementations: HTTP to
4714	              the Constrained Application Protocol (CoAP)", RFC 8075,
4715	              DOI 10.17487/RFC8075, February 2017,
4716	              <https://www.rfc-editor.org/rfc/rfc8075>.

4718	   [RFC8392]  Jones, M., Wahlstroem, E., Erdtman, S., and H. Tschofenig,
4719	              "CBOR Web Token (CWT)", RFC 8392, DOI 10.17487/RFC8392,
4720	              May 2018, <https://www.rfc-editor.org/rfc/rfc8392>.

4722	   [RFC9147]  Rescorla, E., Tschofenig, H., and N. Modadugu, "The
4723	              Datagram Transport Layer Security (DTLS) Protocol Version
4724	              1.3", RFC 9147, DOI 10.17487/RFC9147, April 2022,
4725	              <https://www.rfc-editor.org/rfc/rfc9147>.

4727	   [RFC9200]  Seitz, L., Selander, G., Wahlstroem, E., Erdtman, S., and
4728	              H. Tschofenig, "Authentication and Authorization for
4729	              Constrained Environments Using the OAuth 2.0 Framework
4730	              (ACE-OAuth)", RFC 9200, DOI 10.17487/RFC9200, August 2022,
4731	              <https://www.rfc-editor.org/rfc/rfc9200>.

4733	   [RFC9594]  Palombini, F. and M. Tiloca, "Key Provisioning for Group
4734	              Communication Using Authentication and Authorization for
4735	              Constrained Environments (ACE)", RFC 9594,
4736	              DOI 10.17487/RFC9594, September 2024,
4737	              <https://www.rfc-editor.org/rfc/rfc9594>.

4739	   [Thormarker]
4740	              Thormarker, E., "On using the same key pair for Ed25519
4741	              and an X25519 based KEM", April 2021,
4742	              <https://eprint.iacr.org/2021/509>.

4744	Appendix A.  Assumptions and Security Objectives

4746	   This section presents a set of assumptions and security objectives
4747	   for the protocol described in this document.  The rest of this
4748	   section refers to three types of groups:

4750	   *  Application group, i.e., a set of CoAP endpoints that share a
4751	      common pool of resources.

4753	   *  Security group, as defined in Section 1.1 of this document.  There
4754	      can be a one-to-one or a one-to-many relation between security
4755	      groups and application groups, and vice versa.

4757	   *  CoAP group, i.e., a set of CoAP endpoints where each endpoint is
4758	      configured to receive one-to-many CoAP requests, e.g., sent to the
4759	      group's associated IP multicast address and UDP port as defined in
4760	      [I-D.ietf-core-groupcomm-bis].  An endpoint may be a member of
4761	      multiple CoAP groups.  There can be a one-to-one or a one-to-many
4762	      relation between application groups and CoAP groups.  Note that a
4763	      device sending a CoAP request to a CoAP group is not necessarily
4764	      itself a member of that group: it is a member only if it also has
4765	      a CoAP server endpoint listening to requests for this CoAP group,
4766	      sent to the associated IP multicast address and port.  In order to
4767	      provide secure group communication, all members of a CoAP group as
4768	      well as all further endpoints configured only as clients sending
4769	      CoAP (multicast) requests to the CoAP group have to be member of a
4770	      security group.  There can be a one-to-one or a one-to-many
4771	      relation between security groups and CoAP groups, and vice versa.

4773	A.1.  Assumptions

4775	   The following points are assumed to be already addressed and are out
4776	   of the scope of this document.

4778	   *  Multicast communication topology: this document considers both
4779	      1-to-N (one sender and multiple recipients) and M-to-N (multiple
4780	      senders and multiple recipients) communication topologies.  The
4781	      1-to-N communication topology is the simplest group communication
4782	      scenario that would serve the needs of a typical Low-power and
4783	      Lossy Network (LLN).  Examples of use cases that benefit from
4784	      secure group communication are provided in Appendix B.

4786	      In a 1-to-N communication model, only a single client transmits
4787	      data to the CoAP group, in the form of request messages; in an
4788	      M-to-N communication model (where M and N do not necessarily have
4789	      the same value), M clients transmit data to the CoAP group.
4790	      According to [I-D.ietf-core-groupcomm-bis], any possible proxy
4791	      entity is supposed to know about the clients.  Also, every client
4792	      expects and is able to handle multiple response messages
4793	      associated with a same request sent to the CoAP group.

4795	   *  Group size: security solutions for group communication should be
4796	      able to adequately support different and possibly large security
4797	      groups.  The group size is the current number of members in a
4798	      security group.  In the use cases mentioned in this document, the
4799	      number of clients (normally the controlling devices) is expected
4800	      to be much smaller than the number of servers (i.e., the
4801	      controlled devices).  A security solution for group communication
4802	      that supports 1 to 50 clients would be able to properly cover the
4803	      group sizes required for most use cases that are relevant for this
4804	      document.  The maximum group size is expected to be in the range
4805	      of hundreds to thousands of devices, with large groups easier to
4806	      manage if including several silent servers.  Security groups
4807	      larger than that should be divided into smaller independent
4808	      groups.  One should not assume that the set of members of a
4809	      security group remains fixed.  That is, the group membership is
4810	      subject to changes, possibly on a frequent basis.

4812	   *  Communication with the Group Manager: an endpoint must use a
4813	      secure dedicated channel when communicating with the Group
4814	      Manager, also when not registered as a member of the security
4815	      group.

4817	   *  Provisioning and management of Security Contexts: a Security
4818	      Context must be established among the members of the security
4819	      group.  A secure mechanism must be used to generate, revoke and
4820	      (re-)distribute keying material, communication policies and
4821	      security parameters in the security group.  The actual
4822	      provisioning and management of the Security Context is out of the
4823	      scope of this document.

4825	   *  Multicast data security cipher suite: all members of a security
4826	      group must use the same cipher suite to provide authenticity,
4827	      integrity and confidentiality of messages in the group.  The
4828	      cipher suite is specified as part of the Security Context.

4830	   *  Ensuring backward security: a new device joining the security
4831	      group should not have access to any old Security Contexts used
4832	      before its joining.  This ensures that a new member of the
4833	      security group is not able to decrypt confidential data sent
4834	      before it has joined the security group.  The adopted key
4835	      management scheme should ensure that the Security Context is
4836	      updated to ensure backward confidentiality.  The actual mechanism
4837	      to update the Security Context and renew the group keying material
4838	      in the security group upon a new member's joining has to be
4839	      defined as part of the group key management scheme.

4841	   *  Ensuring forward security: entities that leave the security group
4842	      should not have access to any future Security Contexts or message
4843	      exchanged within the security group after their leaving.  This
4844	      ensures that a former member of the security group is not able to
4845	      decrypt confidential data sent within the security group anymore.
4846	      Also, it ensures that a former member is not able to send
4847	      protected messages to the security group anymore.  The actual
4848	      mechanism to update the Security Context and renew the group
4849	      keying material in the security group upon a member's leaving has
4850	      to be defined as part of the group key management scheme.

4852	A.2.  Security Objectives

4854	   The protocol described in this document aims at fulfilling the
4855	   following security objectives:

4857	   *  Data replay protection: request messages or response messages
4858	      replayed within the security group must be detected.

4860	   *  Data confidentiality: messages sent within the security group
4861	      shall be encrypted.

4863	   *  Group-level data confidentiality: the group mode provides group-
4864	      level data confidentiality since messages are encrypted at a group
4865	      level, i.e., in such a way that they can be decrypted by any
4866	      member of the security group, but not by an external adversary or
4867	      other external entities.

4869	   *  Pairwise data confidentiality: the pairwise mode especially
4870	      provides pairwise data confidentiality, since messages are
4871	      encrypted using pairwise keying material shared between any two
4872	      group members, hence they can be decrypted only by the intended
4873	      single recipient.

4875	   *  Source message authentication: messages sent within the security
4876	      group shall be authenticated.  That is, it is essential to ensure
4877	      that a message is originated by a member of the security group in
4878	      the first place, and in particular by a specific, identifiable
4879	      member of the security group.

4881	   *  Message integrity: messages sent within the security group shall
4882	      be integrity protected.  That is, it is essential to ensure that a
4883	      message has not been tampered with, either by a group member, or
4884	      by an external adversary or other external entities which are not
4885	      members of the security group.

4887	   *  Message ordering: it must be possible to determine the ordering of
4888	      messages coming from a single sender.  Like in OSCORE [RFC8613], a
4889	      recipient endpoint can determine the relative order of requests or
4890	      responses from another sender endpoint by means of their Partial
4891	      IV.  It is not required to determine ordering of messages from
4892	      different senders.

4894	Appendix B.  List of Use Cases

4896	   Group Communication for CoAP [I-D.ietf-core-groupcomm-bis] provides
4897	   the necessary background for multicast-based CoAP communication, with
4898	   particular reference to low-power and lossy networks (LLNs) and
4899	   resource constrained environments.  The interested reader is
4900	   encouraged to first read [I-D.ietf-core-groupcomm-bis] to understand
4901	   the non-security related details.  This section discusses a number of
4902	   use cases that benefit from secure group communication, and refers to
4903	   the three types of groups from Appendix A.  Specific security
4904	   requirements for these use cases are discussed in Appendix A.

4906	   *  Lighting control: consider a building equipped with IP-connected
4907	      lighting devices, switches, and border routers.  The lighting
4908	      devices acting as servers are organized into application groups
4909	      and CoAP groups, according to their physical location in the
4910	      building.  For instance, lighting devices in a room or corridor
4911	      can be configured as members of a single application group and
4912	      corresponding CoAP group.  Those lighting devices together with
4913	      the switches acting as clients in the same room or corridor can be
4914	      configured as members of the corresponding security group.
4915	      Switches are then used to control the lighting devices by sending
4916	      on/off/dimming commands to all lighting devices in the CoAP group,
4917	      while border routers connected to an IP network backbone (which is
4918	      also multicast-enabled) can be used to interconnect routers in the
4919	      building.  Consequently, this would also enable logical groups to
4920	      be formed even if devices with a role in the lighting application
4921	      may be physically in different subnets (e.g., on wired and
4922	      wireless networks).  Connectivity between lighting devices may be
4923	      realized, for instance, by means of IPv6 and (border) routers
4924	      supporting 6LoWPAN [RFC4944][RFC6282].  Group communication
4925	      enables synchronous operation of a set of connected lights,
4926	      ensuring that the light preset (e.g., dimming level or color) of a
4927	      large set of luminaires are changed at the same perceived time.
4928	      This is especially useful for providing a visual synchronicity of
4929	      light effects to the user.  As a practical guideline, events
4930	      within a 200 ms interval are perceived as simultaneous by humans,
4931	      which is necessary to ensure in many setups.  Devices may reply
4932	      back to the switches that issue on/off/dimming commands, in order
4933	      to report about the execution of the requested operation (e.g.,
4934	      OK, failure, error) and their current operational status.  In a
4935	      typical lighting control scenario, a single switch is the only
4936	      entity responsible for sending commands to a set of lighting
4937	      devices.  In more advanced lighting control use cases, an M-to-N
4938	      communication topology would be required, for instance in case
4939	      multiple sensors (presence or day-light) are responsible to
4940	      trigger events to a set of lighting devices.  Especially in
4941	      professional lighting scenarios, the roles of client and server
4942	      are configured by the lighting commissioner, and devices strictly
4943	      follow those roles.

4945	   *  Integrated building control: enabling Building Automation and
4946	      Control Systems (BACSs) to control multiple heating, ventilation,
4947	      and air-conditioning units to predefined presets.  Controlled
4948	      units can be organized into application groups and CoAP groups in
4949	      order to reflect their physical position in the building, e.g.,
4950	      devices in the same room can be configured as members of a single
4951	      application group and corresponding CoAP group.  As a practical
4952	      guideline, events within intervals of seconds are typically
4953	      acceptable.  Controlled units are expected to possibly reply back
4954	      to the BACS issuing control commands, in order to report about the
4955	      execution of the requested operation (e.g., OK, failure, error)
4956	      and their current operational status.

4958	   *  Software and firmware updates: software and firmware updates often
4959	      comprise quite a large amount of data.  This can overload a Low-
4960	      power and Lossy Network (LLN) that is otherwise typically used to
4961	      deal with only small amounts of data, on an infrequent base.
4962	      Rather than sending software and firmware updates as unicast
4963	      messages to each individual device, multicasting such updated data
4964	      to a larger set of devices at once displays a number of benefits.
4965	      For instance, it can significantly reduce the network load and
4966	      decrease the overall time latency for propagating this data to all
4967	      devices.  Even if the complete whole update process itself is
4968	      secured, securing the individual messages is important, in case
4969	      updates consist of relatively large amounts of data.  In fact,
4970	      checking individual received data piecemeal for tampering avoids
4971	      that devices store large amounts of partially corrupted data and
4972	      that they detect tampering hereof only after all data has been
4973	      received.  Devices receiving software and firmware updates are
4974	      expected to possibly reply back, in order to provide a feedback
4975	      about the execution of the update operation (e.g., OK, failure,
4976	      error) and their current operational status.

4978	   *  Parameter and configuration update: by means of multicast
4979	      communication, it is possible to update the settings of a set of
4980	      similar devices, both simultaneously and efficiently.  Possible
4981	      parameters are related, for instance, to network load management
4982	      or network access control.  Devices receiving parameter and
4983	      configuration updates are expected to possibly reply back, to
4984	      provide a feedback about the execution of the update operation
4985	      (e.g., OK, failure, error) and their current operational status.

4987	   *  Commissioning of Low-power and Lossy Network (LLN) systems: a
4988	      commissioning device is responsible for querying all devices in
4989	      the local network or a selected subset of them, in order to
4990	      discover their presence, and be aware of their capabilities,
4991	      default configuration, and operating conditions.  Queried devices
4992	      displaying similarities in their capabilities and features, or
4993	      sharing a common physical location can be configured as members of
4994	      a single application group and corresponding CoAP group.  Queried
4995	      devices are expected to reply back to the commissioning device, in
4996	      order to notify their presence, and provide the requested
4997	      information and their current operational status.

4999	   *  Emergency multicast: a particular emergency-related information
5000	      (e.g., natural disaster) is generated and multicast by an
5001	      emergency notifier, and relayed to multiple devices.  The latter
5002	      may reply back to the emergency notifier, in order to provide
5003	      their feedback and local information related to the ongoing
5004	      emergency.  This kind of setups should additionally rely on a
5005	      fault-tolerant multicast algorithm, such as Multicast Protocol for
5006	      Low-Power and Lossy Networks (MPL).

5008	Appendix C.  Example of Group Identifier Format

5010	   This section provides an example of how the Group Identifier (Gid)
5011	   can be formatted.  That is, the Gid can be composed of two parts,
5012	   namely a Group Prefix and a Group Epoch.

5014	   For each group, the Group Prefix is constant over time and is
5015	   uniquely defined in the set of all the groups associated with the
5016	   same Group Manager.  The choice of the Group Prefix for a given
5017	   group's Security Context is application specific.  The size of the
5018	   Group Prefix directly impact on the maximum number of distinct groups
5019	   under the same Group Manager.

5021	   The Group Epoch is set to 0 upon the group's initialization, and is
5022	   incremented by 1 each time new keying material, together with a new
5023	   Gid, is distributed to the group in order to establish a new Security
5024	   Context (see Section 12.2).

5026	   As an example, a 3-byte Gid can be composed of: i) a 1-byte Group
5027	   Prefix '0xb1' interpreted as a raw byte string; and ii) a 2-byte
5028	   Group Epoch interpreted as an unsigned integer ranging from 0 to
5029	   65535.  Then, after having established the Common Context 61532 times
5030	   in the group, its Gid will assume value '0xb1f05c'.

5032	   Using an immutable Group Prefix for a group with a Group Manager that
5033	   does not reassign Gid values (see Section 12.2.1.1) limits the total
5034	   number of rekeying instances.  With a Group Manager that does
5035	   reassign Gid values, it limits the maximum active number of rekeying
5036	   instances that a CoAP observation [RFC7641] can persist through.  In
5037	   either case, the group epoch size needs to be chosen depending on the
5038	   expected rate of rekeying instances.

5040	   As discussed in Section 14.6, if endpoints are deployed in multiple
5041	   groups managed by different non-synchronized Group Managers, it is
5042	   possible that Group Identifiers of different groups coincide at some
5043	   point in time.  In this case, a recipient has to handle coinciding
5044	   Group Identifiers, and has to try using different Security Contexts
5045	   to process an incoming message, until the right one is found and the
5046	   message is correctly verified.  Therefore, it is favorable that Group
5047	   Identifiers from different Group Managers have a size that result in
5048	   a small probability of collision.  How small this probability should
5049	   be is up to system designers.

5051	Appendix D.  Responsibilities of the Group Manager

5053	   The Group Manager is responsible for performing the following tasks:

5055	   1.   Creating and managing OSCORE groups.  This includes the
5056	        assignment of a Gid to every newly created group, ensuring
5057	        uniqueness of Gids within the set of its OSCORE groups and,
5058	        optionally, the secure recycling of Gids.

5060	   2.   Defining policies for authorizing the joining of its OSCORE
5061	        groups.

5063	   3.   Handling the join process to add new endpoints as group members.

5065	   4.   Establishing the Common Context part of the Security Context,
5066	        and providing it to authorized group members during the join
5067	        process, together with the corresponding Sender Context.

5069	   5.   Updating the Key Generation Number and the Gid of its OSCORE
5070	        groups, upon renewing the respective Security Context.

5072	   6.   Generating and managing Sender IDs within its OSCORE groups, as
5073	        well as assigning and providing them to new endpoints during the
5074	        join process, or to current group members upon request of
5075	        renewal or re-joining.  This includes ensuring that:

5077	        *  Each Sender ID is unique within each of the OSCORE groups;

5079	        *  Each Sender ID is not reassigned within the same group since
5080	           the latest time when the current Gid value was assigned to
5081	           the group.  That is, the Sender ID is not reassigned even to
5082	           a current group member re-joining the same group, without a
5083	           rekeying happening first.

5085	   7.   Defining communication policies for each of its OSCORE groups,
5086	        and signaling them to new endpoints during the join process.

5088	   8.   Renewing the Security Context of an OSCORE group upon membership
5089	        change, by revoking and renewing common security parameters and
5090	        keying material (rekeying).

5092	   9.   Providing the management keying material that a new endpoint
5093	        requires to participate in the rekeying process, consistently
5094	        with the key management scheme used in the group joined by the
5095	        new endpoint.

5097	   10.  Assisting a group member that has missed a group rekeying
5098	        instance to understand which authentication credentials and
5099	        Recipient Contexts to delete, as associated with former group
5100	        members.

5102	   11.  Acting as key repository, in order to handle the authentication
5103	        credentials of the members of its OSCORE groups, and providing
5104	        such authentication credentials to other members of the same
5105	        group upon request.  The actual storage of authentication
5106	        credentials may be entrusted to a separate secure storage device
5107	        or service.

5109	   12.  Validating that the format and parameters of authentication
5110	        credentials of group members are consistent with the public key
5111	        algorithm and related parameters used in the respective OSCORE
5112	        group.

5114	   The Group Manager specified in [I-D.ietf-ace-key-groupcomm-oscore]
5115	   provides this functionality.

5117	Appendix E.  Document Updates

5119	   This section is to be removed before publishing as an RFC.

5121	E.1.  Version -26 to -27

5123	   *  Clarified "SHOULD" for the Group Manager's authentication
5124	      credential having the same format of that of the group members.

5126	   *  Avoid unnecessary details on Sequence Number wrap-around.

5128	   *  Clarified that using unreliable transports must not forego
5129	      congestion control.

5131	   *  Clarified means for the Group Manager to determine compromised
5132	      group members.

5134	   *  Normative "SHOULD" for preserving current Sender IDs upon group
5135	      rekeying.

5137	   *  Updated security considerations:

5139	      -  Explicit list of security properties of the pairwise mode.

5141	      -  Clarified group-level data confidentiality in the group mode.

5143	      -  Explicit list of security properties not aimed to be met.

5145	      -  Security considerations on treating opaque binary data as such.

5147	   *  Minor clarifications and editorial improvements.

5149	E.2.  Version -25 to -26

5151	   *  Terminology for Security Context: avoid "immutable"; use "long-
5152	      term" and "varying".

5154	   *  Reference on achieving proof of possession for group members and
5155	      Group Manager.

5157	   *  Not only CWTs but also CCSs can be tagged.

5159	   *  Exceptional handling after deleting a Recipient Context.

5161	   *  Clearer handling of incoming messages if the Replay Window is
5162	      invalid.

5164	   *  The exhaustion of Sender Sequence Numbers should be handled with
5165	      margin.

5167	   *  Highlighted overhead for accepting out-of-order responses within a
5168	      long exchange.

5170	   *  Generalization of exceptions to behaviors that are defined as
5171	      SHOULD.

5173	   *  Clearer phrasing for the requirement on early signature
5174	      verification.

5176	   *  Clearer generalization of delivery of messages protected in
5177	      pairwise mode.

5179	   *  Generalized use of the Block2 Option in protected (group)
5180	      requests.

5182	   *  Clearer statements on implementation compliance.

5184	   *  Suggested means for silent servers to make Replay Windows valid
5185	      again.

5187	   *  Optional procedure for reassigning Gids moved to the document
5188	      body.

5190	   *  Specific definition of reassignment of Sender IDs in a group.

5192	   *  Discussed server-side mitigations against unicast requests
5193	      protected in group mode.

5195	   *  Removed hypothetical discussions on alternative protocol designs.

5197	   *  Discussion on Denial of Service moved to security considerations.

5199	   *  Expanded considerations on leakage of Diffie-Hellman shared
5200	      secret.

5202	   *  Editorial clarifications and fixes.

5204	E.3.  Version -24 to -25

5206	   *  Made RFC 5869 a normative reference.

5208	   *  Removed request to add a note in the "CoAP Option Numbers"
5209	      registry.

5211	   *  More precise phrasing on using the encryption nonce.

5213	E.4.  Version -23 to -24

5215	   *  Added section "Implementation Status", according to RFC 7942.

5217	   *  Fixed "P-521" (instead of "P-512").

5219	E.5.  Version -22 to -23

5221	   *  Examples of non-AEAD algorithms as Group Encryption Algorithm.

5223	   *  Implementation compliance on non-AEAD algorithms.

5225	   *  Clarified that the HKDF Algorithm must be an HMAC-based HKDF.

5227	   *  Easier description of using Common IV to compute the nonce.

5229	   *  Consistent use of "nonce", "key", and "AEAD key".

5231	   *  Repositioned content about the Group Manager.

5233	   *  Editorial improvements.

5235	E.6.  Version -21 to -22

5237	   *  Removed mentioning of the CBOR encoding of the HKDF Algorithm.

5239	   *  Rephrased consequences on loss of Recipient Contexts.

5241	   *  Removed requirement on 0 as initial value of the Key Generation
5242	      Number.

5244	   *  Improved handling of responses from a server that changes Sender
5245	      ID.

5247	   *  Relax constrictions of Block-wise with group communication.

5249	   *  Removed the concept of synchronization with the Client's Sender
5250	      Sequence Number.

5252	   *  Improved content on Challenge-Response based freshness and Replay
5253	      Window recovery.

5255	   *  Use the acronym CCSs for CWT Claims Sets.

5257	   *  Mentioned wrap-around of the Key Generation Number.

5259	   *  Added IANA consideration on the "CoAP Option Numbers" registry.

5261	   *  Updated references.

5263	   *  Editorial improvements.

5265	E.7.  Version -20 to -21

5267	   *  Updated author list.

5269	   *  Terminology: improved definition of "group request".

5271	   *  Editorial: removed quotation marks when using the CBOR simple
5272	      values true, false, and null.

5274	   *  Editorial: expanded name of the "CoRE Parameters" registry group.

5276	E.8.  Version -19 to -20

5278	   *  Change Controller for the target attribute "gosc" set to "IETF".

5280	E.9.  Version -18 to -19

5282	   *  Unified presentation of handling of multiple responses.

5284	   *  Added Rikard Höglund as Contributor.

5286	E.10.  Version -17 to -18

5288	   *  Changed document title.

5290	   *  Possible use with CoAP-mappable HTTP.

5292	   *  Added Common Context parameter "Authentication Credential Format".

5294	   *  Renamed "Group Encryption Key" to "Signature Encryption Key".
5295	      Consistent fixes in its derivation.

5297	   *  Renamed "Signature Encryption Algorithm" to "Group Encryption
5298	      Algorithm".

5300	   *  Ensured a single Common IV, also when the two encryption
5301	      algorithms have different nonce sizes.

5303	   *  Guidelines on the Pairwise Key Agreement Algorithm and derivation
5304	      of the Diffie-Hellman secret.

5306	   *  The possible use of a mode follows from the set parameters.

5308	   *  The Group Manager is always present; 'gm_cred' in the external_aad
5309	      cannot be null anymore.

5311	   *  The authentication credential of the Group Manager can have a
5312	      different format than that of the group members'.

5314	   *  Set-up of new endpoints moved to document body.

5316	   *  The encrypted countersignature is a result of the header
5317	      compression, not of COSE.

5319	   *  Revised examples of compressed and non-compressed COSE object.

5321	   *  Removed excessive requirements on group rekeying scheduling.

5323	   *  More considerations on the strictness of group key management.

5325	   *  Clearer alternatives on retaining an old Security Context.

5327	   *  Revised used of terminology on freshness.

5329	   *  Clarifications, fixes and editorial improvements.

5331	E.11.  Version -16 to -17

5333	   *  Definition and registration of the target attribute "gosc".

5335	   *  Reference update and editorial fixes.

5337	E.12.  Version -15 to -16

5339	   *  Clients "SHOULD" use the group mode for one-to-many requests.

5341	   *  Handling of multiple non-notification responses.

5343	   *  Revised presentation of security properties.

5345	   *  Improved listing of operations defined for the group mode that are
5346	      inherited by the pairwise mode.

5348	   *  Editorial improvements.

5350	E.13.  Version -14 to -15

5352	   *  Updated references and editorial fixes.

5354	E.14.  Version -13 to -14

5356	   *  Replaced "node" with "endpoint" where appropriate.

5358	   *  Replaced "owning" with "storing" (of keying material).

5360	   *  Distinction between "authentication credential" and "public key".

5362	   *  Considerations on storing whole authentication credentials.

5364	   *  Considerations on Denial of Service.

5366	   *  Recycling of Group IDs by tracking the "Birth Gid" of each group
5367	      member is now optional to support and use for the Group Manager.

5369	   *  Fine-grained suppression of error responses.

5371	   *  Changed section title "Mandatory-to-Implement Compliance
5372	      Requirements" to "Implementation Compliance".

5374	   *  "Challenge-Response Synchronization" moved to the document body.

5376	   *  RFC 7641 and draft-ietf-core-echo-request-tag as normative
5377	      references.

5379	   *  Clarifications and editorial improvements.

5381	E.15.  Version -12 to -13

5383	   *  Fixes in the derivation of the Group Encryption Key.

5385	   *  Added Mandatory-to-Implement compliance requirements.

5387	   *  Changed UCCS to CCS.

5389	E.16.  Version -11 to -12

5391	   *  No mode of operation is mandatory to support.

5393	   *  Revised parameters of the Security Context, COSE object and
5394	      external_aad.

5396	   *  Revised management of keying material for the Group Manager.

5398	   *  Informing of former members when rekeying the group.

5400	   *  Admit encryption-only algorithms in group mode.

5402	   *  Encrypted countersignature through a keystream.

5404	   *  Added public key of the Group Manager as key material and
5405	      protected data.

5407	   *  Clarifications about message processing, especially notifications.

5409	   *  Guidance for message processing of external signature checkers.

5411	   *  Updated derivation of pairwise keys, with more security
5412	      considerations.

5414	   *  Termination of ongoing observations as client, upon leaving or
5415	      before re-joining the group.

5417	   *  Recycling Group IDs by tracking the "Birth Gid" of each group
5418	      member.

5420	   *  Expanded security and privacy considerations about the group mode.

5422	   *  Removed appendices on skipping signature verification and on COSE
5423	      capabilities.

5425	   *  Fixes and editorial improvements.

5427	E.17.  Version -10 to -11

5429	   *  Loss of Recipient Contexts due to their overflow.

5431	   *  Added diagram on keying material components and their relation.

5433	   *  Distinction between anti-replay and freshness.

5435	   *  Preservation of Sender IDs over rekeying.

5437	   *  Clearer cause-effect about reset of SSN.

5439	   *  The GM provides public keys of group members with associated
5440	      Sender IDs.

5442	   *  Removed 'par_countersign_key' from the external_aad.

5444	   *  One single format for the external_aad, both for encryption and
5445	      signing.

5447	   *  Presence of 'kid' in responses to requests protected in pairwise
5448	      mode.

5450	   *  Inclusion of 'kid_context' in notifications following a group
5451	      rekeying.

5453	   *  Pairwise mode presented with OSCORE as baseline.

5455	   *  Revised examples with signature values.

5457	   *  Decoupled growth of clients' Sender Sequence Numbers and loss of
5458	      synchronization for server.

5460	   *  Sender IDs not recycled in the group under the same Gid.

5462	   *  Processing and description of the Group Flag bit in the OSCORE
5463	      Option.

5465	   *  Usage of the pairwise mode for multicast requests.

5467	   *  Clarifications on synchronization using the Echo Option.

5469	   *  General format of context parameters and external_aad elements,
5470	      supporting future registered COSE algorithms (new Appendix).

5472	   *  Fixes and editorial improvements.

5474	E.18.  Version -09 to -10

5476	   *  Removed 'Counter Signature Key Parameters' from the Common
5477	      Context.

5479	   *  New parameters in the Common Context covering the DH secret
5480	      derivation.

5482	   *  New countersignature header parameter from draft-ietf-cose-
5483	      countersign.

5485	   *  Stronger policies non non-recycling of Sender IDs and Gid.

5487	   *  The Sender Sequence Number is reset when establishing a new
5488	      Security Context.

5490	   *  Added 'request_kid_context' in the aad_array.

5492	   *  The server can respond with 5.03 if the client's public key is not
5493	      available.

5495	   *  The observer client stores an invariant identifier of the group.

5497	   *  Relaxed storing of original 'kid' for observer clients.

5499	   *  Both client and server store the 'kid_context' of the original
5500	      observation request.

5502	   *  The server uses a fresh PIV if protecting the response with a
5503	      Security Context different from the one used to protect the
5504	      request.

5506	   *  Clarifications on MTI algorithms and curves.

5508	   *  Removed optimized requests.

5510	   *  Overall clarifications and editorial revision.

5512	E.19.  Version -08 to -09

5514	   *  Pairwise keys are discarded after group rekeying.

5516	   *  Signature mode renamed to group mode.

5518	   *  The parameters for countersignatures use the updated COSE
5519	      registries.  Newly defined IANA registries have been removed.

5521	   *  Pairwise Flag bit renamed as Group Flag bit, set to 1 in group
5522	      mode and set to 0 in pairwise mode.

5524	   *  Dedicated section on updating the Security Context.

5526	   *  By default, sender sequence numbers and replay windows are not
5527	      reset upon group rekeying.

5529	   *  An endpoint implementing only a silent server does not support the
5530	      pairwise mode.

5532	   *  Separate section on general message reception.

5534	   *  Pairwise mode moved to the document body.

5536	   *  Considerations on using the pairwise mode in non-multicast
5537	      settings.

5539	   *  Optimized requests are moved as an appendix.

5541	   *  Normative support for the signature and pairwise mode.

5543	   *  Revised methods for synchronization with clients' sender sequence
5544	      number.

5546	   *  Appendix with example values of parameters for countersignatures.

5548	   *  Clarifications and editorial improvements.

5550	E.20.  Version -07 to -08

5552	   *  Clarified relation between pairwise mode and group communication
5553	      (Section 1).

5555	   *  Improved definition of "silent server" (Section 1.1).

5557	   *  Clarified when a Recipient Context is needed (Section 2).

5559	   *  Signature checkers as entities supported by the Group Manager
5560	      (Section 2.3).

5562	   *  Clarified that the Group Manager is under exclusive control of Gid
5563	      and Sender ID values in a group, with Sender ID values under each
5564	      Gid value (Section 2.3).

5566	   *  Mitigation policies in case of recycled 'kid' values
5567	      (Section 2.4).

5569	   *  More generic exhaustion (not necessarily wrap-around) of sender
5570	      sequence numbers (Sections 2.5 and 10.11).

5572	   *  Pairwise key considerations, as to group rekeying and Sender
5573	      Sequence Numbers (Section 3).

5575	   *  Added reference to static-static Diffie-Hellman shared secret
5576	      (Section 3).

5578	   *  Note for implementation about the external_aad for signing
5579	      (Sectino 4.3.2).

5581	   *  Retransmission by the application for group requests over
5582	      multicast as Non-confirmable (Section 7).

5584	   *  A server MUST use its own Partial IV in a response, if protecting
5585	      it with a different context than the one used for the request
5586	      (Section 7.3).

5588	   *  Security considerations: encryption of pairwise mode as
5589	      alternative to group-level security (Section 10.1).

5591	   *  Security considerations: added approach to reduce the chance of
5592	      global collisions of Gid values from different Group Managers
5593	      (Section 10.5).

5595	   *  Security considerations: added implications for block-wise
5596	      transfers when using the signature mode for requests over unicast
5597	      (Section 10.7).

5599	   *  Security considerations: (multiple) supported signature algorithms
5600	      (Section 10.13).

5602	   *  Security considerations: added privacy considerations on the
5603	      approach for reducing global collisions of Gid values
5604	      (Section 10.15).

5606	   *  Updates to the methods for synchronizing with clients' sequence
5607	      number (Appendix E).

5609	   *  Simplified text on discovery services supporting the pairwise mode
5610	      (Appendix G.1).

5612	   *  Editorial improvements.

5614	E.21.  Version -06 to -07

5616	   *  Updated abstract and introduction.

5618	   *  Clarifications of what pertains a group rekeying.

5620	   *  Derivation of pairwise keying material.

5622	   *  Content re-organization for COSE Object and OSCORE header
5623	      compression.

5625	   *  Defined the Pairwise Flag bit for the OSCORE Option.

5627	   *  Supporting CoAP Observe for group requests and responses.

5629	   *  Considerations on message protection across switching to new
5630	      keying material.

5632	   *  New optimized mode based on pairwise keying material.

5634	   *  More considerations on replay protection and Security Contexts
5635	      upon key renewal.

5637	   *  Security considerations on Group OSCORE for unicast requests, also
5638	      as affecting the usage of the Echo Option.

5640	   *  Clarification on different types of groups considered
5641	      (application/security/CoAP).

5643	   *  New pairwise mode, using pairwise keying material for both
5644	      requests and responses.

5646	E.22.  Version -05 to -06

5648	   *  Group IDs mandated to be unique under the same Group Manager.

5650	   *  Clarifications on parameter update upon group rekeying.

5652	   *  Updated external_aad structures.

5654	   *  Dynamic derivation of Recipient Contexts made optional and
5655	      application specific.

5657	   *  Optional 4.00 response for failed signature verification on the
5658	      server.

5660	   *  Removed client handling of duplicated responses to multicast
5661	      requests.

5663	   *  Additional considerations on public key retrieval and group
5664	      rekeying.

5666	   *  Added Group Manager responsibility on validating public keys.

5668	   *  Updates IANA registries.

5670	   *  Reference to RFC 8613.

5672	   *  Editorial improvements.

5674	E.23.  Version -04 to -05

5676	   *  Added references to draft-dijk-core-groupcomm-bis.

5678	   *  New parameter Counter Signature Key Parameters (Section 2).

5680	   *  Clarification about Recipient Contexts (Section 2).

5682	   *  Two different external_aad for encrypting and signing
5683	      (Section 3.1).

5685	   *  Updated response verification to handle Observe notifications
5686	      (Section 6.4).

5688	   *  Extended Security Considerations (Section 8).

5690	   *  New "Counter Signature Key Parameters" IANA Registry
5691	      (Section 9.2).

5693	E.24.  Version -03 to -04

5695	   *  Added the new "Counter Signature Parameters" in the Common Context
5696	      (see Section 2).

5698	   *  Added recommendation on using "deterministic ECDSA" if ECDSA is
5699	      used as countersignature algorithm (see Section 2).

5701	   *  Clarified possible asynchronous retrieval of keying material from
5702	      the Group Manager, in order to process incoming messages (see
5703	      Section 2).

5705	   *  Structured Section 3 into subsections.

5707	   *  Added the new 'par_countersign' to the aad_array of the
5708	      external_aad (see Section 3.1).

5710	   *  Clarified non reliability of 'kid' as identity identifier for a
5711	      group member (see Section 2.1).

5713	   *  Described possible provisioning of new Sender ID in case of
5714	      Partial IV wrap-around (see Section 2.2).

5716	   *  The former signature bit in the Flag Byte of the OSCORE Option
5717	      value is reverted to reserved (see Section 4.1).

5719	   *  Updated examples of compressed COSE object, now with the sixth
5720	      less significant bit in the Flag Byte of the OSCORE Option value
5721	      set to 0 (see Section 4.3).

5723	   *  Relaxed statements on sending error messages (see Section 6).

5725	   *  Added explicit step on computing the countersignature for outgoing
5726	      messages (see Sections 6.1 and 6.3).

5728	   *  Handling of just created Recipient Contexts in case of
5729	      unsuccessful message verification (see Sections 6.2 and 6.4).

5731	   *  Handling of replied/repeated responses on the client (see
5732	      Section 6.4).

5734	   *  New IANA Registry "Counter Signature Parameters" (see
5735	      Section 9.1).

5737	E.25.  Version -02 to -03

5739	   *  Revised structure and phrasing for improved readability and better
5740	      alignment with draft-ietf-core-object-security.

5742	   *  Added discussion on wrap-Around of Partial IVs (see Section 2.2).

5744	   *  Separate sections for the COSE Object (Section 3) and the OSCORE
5745	      Header Compression (Section 4).

5747	   *  The countersignature is now appended to the encrypted payload of
5748	      the OSCORE message, rather than included in the OSCORE Option (see
5749	      Section 4).

5751	   *  Extended scope of Section 5, now titled " Message Binding,
5752	      Sequence Numbers, Freshness and Replay Protection".

5754	   *  Clarifications about Non-confirmable messages in Section 5.1
5755	      "Synchronization of Sender Sequence Numbers".

5757	   *  Clarifications about error handling in Section 6 "Message
5758	      Processing".

5760	   *  Compacted list of responsibilities of the Group Manager in
5761	      Section 7.

5763	   *  Revised and extended security considerations in Section 8.

5765	   *  Added IANA considerations for the OSCORE Flag Bits Registry in
5766	      Section 9.

5768	   *  Revised Appendix D, now giving a short high-level description of a
5769	      new endpoint set-up.

5771	E.26.  Version -01 to -02

5773	   *  Terminology has been made more aligned with RFC7252 and draft-
5774	      ietf-core-object-security: i) "client" and "server" replace the
5775	      old "multicaster" and "listener", respectively; ii) "silent
5776	      server" replaces the old "pure listener".

5778	   *  Section 2 has been updated to have the Group Identifier stored in
5779	      the 'ID Context' parameter defined in draft-ietf-core-object-
5780	      security.

5782	   *  Section 3 has been updated with the new format of the Additional
5783	      Authenticated Data.

5785	   *  Major rewriting of Section 4 to better highlight the differences
5786	      with the message processing in draft-ietf-core-object-security.

5788	   *  Added Sections 7.2 and 7.3 discussing security considerations
5789	      about uniqueness of (key, nonce) and collision of group
5790	      identifiers, respectively.

5792	   *  Minor updates to Appendix A.1 about assumptions on multicast
5793	      communication topology and group size.

5795	   *  Updated Appendix C on format of group identifiers, with practical
5796	      implications of possible collisions of group identifiers.

5798	   *  Updated Appendix D.2, adding a pointer to draft-palombini-ace-key-
5799	      groupcomm about retrieval of nodes' public keys through the Group
5800	      Manager.

5802	   *  Minor updates to Appendix E.3 about Challenge-Response
5803	      synchronization of sequence numbers based on the Echo Option from
5804	      draft-ietf-core-echo-request-tag.

5806	E.27.  Version -00 to -01

5808	   *  Section 1.1 has been updated with the definition of group as
5809	      "security group".

5811	   *  Section 2 has been updated with:

5813	      -  Clarifications on establishment/derivation of Security
5814	         Contexts.

5816	      -  A table summarizing the the additional context elements
5817	         compared to OSCORE.

5819	   *  Section 3 has been updated with:

5821	      -  Examples of request and response messages.

5823	      -  Use of CounterSignature0 rather than CounterSignature.

5825	      -  Additional Authenticated Data including also the signature
5826	         algorithm, while not including the Group Identifier any longer.

5828	   *  Added Section 6, listing the responsibilities of the Group
5829	      Manager.

5831	   *  Added Appendix A (former section), including assumptions and
5832	      security objectives.

5834	   *  Appendix B has been updated with more details on the use cases.

5836	   *  Added Appendix C, providing an example of Group Identifier format.

5838	   *  Appendix D has been updated to be aligned with draft-palombini-
5839	      ace-key-groupcomm.

5841	Acknowledgments

5843	   Jiye Park contributed as a co-author of initial versions of this
5844	   document.

5846	   The authors sincerely thank Christian Amsüss, Stefan Beck, Mike
5847	   Bishop, Rolf Blom, Carsten Bormann, Esko Dijk, Patrik Fältström,
5848	   Martin Gunnarsson, Klaus Hartke, Richard Kelsey, Paul Kyzivat, Joerg
5849	   Ott, Dave Robin, Jim Schaad, Ludwig Seitz, Peter van der Stok, Erik
5850	   Thormarker, and Mališa Vučinić for their feedback and comments.

5852	   The work on this document has been partly supported by the Sweden's
5853	   Innovation Agency VINNOVA and the Celtic-Next projects CRITISEC and
5854	   CYPRESS; the H2020 projects SIFIS-Home (Grant agreement 952652) and
5855	   ARCADIAN-IoT (Grant agreement 101020259); the SSF project SEC4Factory
5856	   under the grant RIT17-0032; and the EIT-Digital High Impact
5857	   Initiative ACTIVE.

5859	Authors' Addresses

5861	   Marco Tiloca
5862	   RISE AB
5863	   Isafjordsgatan 22
5864	   SE-16440 Stockholm Kista
5865	   Sweden
5866	   Email: marco.tiloca@ri.se

5868	   Göran Selander
5869	   Ericsson AB
5870	   Torshamnsgatan 23
5871	   SE-16440 Stockholm Kista
5872	   Sweden
5873	   Email: goran.selander@ericsson.com
5874	   Francesca Palombini
5875	   Ericsson AB
5876	   Torshamnsgatan 23
5877	   SE-16440 Stockholm Kista
5878	   Sweden
5879	   Email: francesca.palombini@ericsson.com

5881	   John Preuß Mattsson
5882	   Ericsson AB
5883	   Torshamnsgatan 23
5884	   SE-16440 Stockholm Kista
5885	   Sweden
5886	   Email: john.mattsson@ericsson.com

5888	   Rikard Höglund
5889	   RISE AB
5890	   Isafjordsgatan 22
5891	   SE-16440 Stockholm Kista
5892	   Sweden
5893	   Email: rikard.hoglund@ri.se









