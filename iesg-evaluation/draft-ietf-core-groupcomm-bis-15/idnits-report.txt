idnits 2.17.1 

draft-ietf-core-groupcomm-bis-15.txt:
-(3282): Line appears to be too long, but this could be caused by non-ascii characters in UTF-8 encoding
-(3329): Line appears to be too long, but this could be caused by non-ascii characters in UTF-8 encoding
-(3344): Line appears to be too long, but this could be caused by non-ascii characters in UTF-8 encoding

  Showing Errors (**), Flaws (~~), Warnings (==), and Comments (--).
  Errors MUST be fixed before draft submission.  Flaws SHOULD be fixed before draft submission.

  Checking boilerplate required by RFC 5378 and the IETF Trust (see
  https://trustee.ietf.org/license-info):
  ----------------------------------------------------------------------------

     No issues found here.

  Checking nits according to https://www.ietf.org/id-info/1id-guidelines.txt:
  ----------------------------------------------------------------------------

  == There are 12 instances of lines with non-ascii characters in the
     document.


  Running in submission checking mode -- *not* checking nits according to
  https://www.ietf.org/id-info/checklist .
  ----------------------------------------------------------------------------


     Summary: 0 errors (**), 0 flaws (~~), 1 warning (==), 0 comments (--).

--------------------------------------------------------------------------------


2	CoRE Working Group                                               E. Dijk
3	Internet-Draft                                         IoTconsultancy.nl
4	Obsoletes: 7390 (if approved)                                  M. Tiloca
5	Updates: 7252, 7641 (if approved)                                RISE AB
6	Intended status: Standards Track                       25 September 2025
7	Expires: 29 March 2026

9	  Group Communication for the Constrained Application Protocol (CoAP)
10	                    draft-ietf-core-groupcomm-bis-15

12	Abstract

14	   The Constrained Application Protocol (CoAP) is a web transfer
15	   protocol for constrained devices and constrained networks.  In a
16	   number of use cases, constrained devices often naturally operate in
17	   groups (e.g., in a building automation scenario, all lights in a
18	   given room may need to be switched on/off as a group).  This document
19	   specifies the use of CoAP for group communication, including the use
20	   of UDP/IP multicast as the default underlying data transport.  Both
21	   unsecured and secured CoAP group communication are specified.
22	   Security is achieved by use of the Group Object Security for
23	   Constrained RESTful Environments (Group OSCORE) protocol.  The target
24	   application area of this specification is any group communication use
25	   cases that involve resource-constrained devices or networks that
26	   support CoAP.  This document replaces and obsoletes RFC 7390, while
27	   it updates RFC 7252 and RFC 7641.

29	About This Document

31	   This note is to be removed before publishing as an RFC.

33	   Status information for this document may be found at
34	   https://datatracker.ietf.org/doc/draft-ietf-core-groupcomm-bis/.

36	   Discussion of this document takes place on the Constrained RESTful
37	   Environments Working Group mailing list (mailto:core@ietf.org), which
38	   is archived at https://mailarchive.ietf.org/arch/browse/core/.
39	   Subscribe at https://www.ietf.org/mailman/listinfo/core/.

41	   Source for this draft and an issue tracker can be found at
42	   https://github.com/core-wg/groupcomm-bis.

44	Status of This Memo

46	   This Internet-Draft is submitted in full conformance with the
47	   provisions of BCP 78 and BCP 79.

49	   Internet-Drafts are working documents of the Internet Engineering
50	   Task Force (IETF).  Note that other groups may also distribute
51	   working documents as Internet-Drafts.  The list of current Internet-
52	   Drafts is at https://datatracker.ietf.org/drafts/current/.

54	   Internet-Drafts are draft documents valid for a maximum of six months
55	   and may be updated, replaced, or obsoleted by other documents at any
56	   time.  It is inappropriate to use Internet-Drafts as reference
57	   material or to cite them other than as "work in progress."

59	   This Internet-Draft will expire on 29 March 2026.

61	Copyright Notice

63	   Copyright (c) 2025 IETF Trust and the persons identified as the
64	   document authors.  All rights reserved.

66	   This document is subject to BCP 78 and the IETF Trust's Legal
67	   Provisions Relating to IETF Documents (https://trustee.ietf.org/
68	   license-info) in effect on the date of publication of this document.
69	   Please review these documents carefully, as they describe your rights
70	   and restrictions with respect to this document.  Code Components
71	   extracted from this document must include Revised BSD License text as
72	   described in Section 4.e of the Trust Legal Provisions and are
73	   provided without warranty as described in the Revised BSD License.

75	Table of Contents

77	   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   5
78	     1.1.  Scope . . . . . . . . . . . . . . . . . . . . . . . . . .   6
79	     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   7
80	     1.3.  Changes to Other Documents  . . . . . . . . . . . . . . .   7
81	   2.  Types of Groups and Their Configuration . . . . . . . . . . .   8
82	     2.1.  Types of Groups . . . . . . . . . . . . . . . . . . . . .   9
83	       2.1.1.  CoAP Group  . . . . . . . . . . . . . . . . . . . . .   9
84	       2.1.2.  Application Group . . . . . . . . . . . . . . . . . .   9
85	       2.1.3.  Security Group  . . . . . . . . . . . . . . . . . . .  10
86	       2.1.4.  Relationships Between Group Types . . . . . . . . . .  11
87	     2.2.  Group Configuration . . . . . . . . . . . . . . . . . . .  13
88	       2.2.1.  Group Naming  . . . . . . . . . . . . . . . . . . . .  13
89	       2.2.2.  Group Creation and Membership . . . . . . . . . . . .  19
90	       2.2.3.  Group Discovery . . . . . . . . . . . . . . . . . . .  20
91	       2.2.4.  Group Maintenance . . . . . . . . . . . . . . . . . .  24
92	   3.  CoAP Usage in Group Communication . . . . . . . . . . . . . .  25
93	     3.1.  Request/Response Model  . . . . . . . . . . . . . . . . .  25
94	       3.1.1.  General . . . . . . . . . . . . . . . . . . . . . . .  25
95	       3.1.2.  Response Suppression  . . . . . . . . . . . . . . . .  26
96	       3.1.3.  Repeating a Request . . . . . . . . . . . . . . . . .  26
97	       3.1.4.  Request/Response Matching and Distinguishing
98	               Responses . . . . . . . . . . . . . . . . . . . . . .  27
99	       3.1.5.  Token Reuse . . . . . . . . . . . . . . . . . . . . .  28
100	       3.1.6.  Client Handling of Multiple Responses With Same
101	               Token . . . . . . . . . . . . . . . . . . . . . . . .  29
102	     3.2.  Caching . . . . . . . . . . . . . . . . . . . . . . . . .  30
103	       3.2.1.  Freshness Model . . . . . . . . . . . . . . . . . . .  30
104	       3.2.2.  Validation Model  . . . . . . . . . . . . . . . . . .  31
105	     3.3.  URI Path Selection  . . . . . . . . . . . . . . . . . . .  32
106	     3.4.  Port Selection for UDP Transport  . . . . . . . . . . . .  33
107	     3.5.  Proxy Operation . . . . . . . . . . . . . . . . . . . . .  33
108	       3.5.1.  Forward-Proxies . . . . . . . . . . . . . . . . . . .  34
109	       3.5.2.  Reverse-Proxies . . . . . . . . . . . . . . . . . . .  35
110	       3.5.3.  Single Group Request to Multiple Proxies  . . . . . .  36
111	     3.6.  Congestion Control  . . . . . . . . . . . . . . . . . . .  37
112	       3.6.1.  Default Leisure Updates . . . . . . . . . . . . . . .  39
113	     3.7.  Observing Resources . . . . . . . . . . . . . . . . . . .  40
114	     3.8.  Block-Wise Transfer . . . . . . . . . . . . . . . . . . .  43
115	     3.9.  Transport Protocols . . . . . . . . . . . . . . . . . . .  45
116	       3.9.1.  UDP/IPv6 Multicast Transport  . . . . . . . . . . . .  45
117	       3.9.2.  UDP/IPv6 Multicast Transport over 6LoWPAN . . . . . .  45
118	       3.9.3.  UDP/IPv4 Multicast Transport  . . . . . . . . . . . .  46
119	       3.9.4.  TCP, TLS, and WebSockets  . . . . . . . . . . . . . .  46
120	       3.9.5.  Other Transports  . . . . . . . . . . . . . . . . . .  47
121	     3.10. Interworking with Other Protocols . . . . . . . . . . . .  47
122	       3.10.1.  MLDv2 and IGMPv3 . . . . . . . . . . . . . . . . . .  47
123	       3.10.2.  RPL  . . . . . . . . . . . . . . . . . . . . . . . .  48
124	       3.10.3.  MPL  . . . . . . . . . . . . . . . . . . . . . . . .  49
125	   4.  Unsecured Group Communication (NoSec Mode)  . . . . . . . . .  50
126	   5.  Secured Group Communication using Group OSCORE  . . . . . . .  50
127	     5.1.  Group OSCORE  . . . . . . . . . . . . . . . . . . . . . .  51
128	     5.2.  Secure Group Maintenance  . . . . . . . . . . . . . . . .  53
129	     5.3.  Proxy Security  . . . . . . . . . . . . . . . . . . . . .  54
130	   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  55
131	     6.1.  CoAP NoSec Mode . . . . . . . . . . . . . . . . . . . . .  55
132	     6.2.  Group OSCORE  . . . . . . . . . . . . . . . . . . . . . .  56
133	       6.2.1.  Group Key Management  . . . . . . . . . . . . . . . .  56
134	       6.2.2.  Source Authentication . . . . . . . . . . . . . . . .  57
135	       6.2.3.  Countering Attacks  . . . . . . . . . . . . . . . . .  58
136	     6.3.  Risk of Amplification . . . . . . . . . . . . . . . . . .  60
137	       6.3.1.  Mitigation with the Echo Option . . . . . . . . . . .  63
138	     6.4.  Replay of Group Requests  . . . . . . . . . . . . . . . .  64
139	     6.5.  Use of CoAP No-Response Option  . . . . . . . . . . . . .  65
140	     6.6.  6LoWPAN and MPL . . . . . . . . . . . . . . . . . . . . .  66
141	     6.7.  Wi-Fi . . . . . . . . . . . . . . . . . . . . . . . . . .  67
142	     6.8.  Monitoring  . . . . . . . . . . . . . . . . . . . . . . .  67
143	       6.8.1.  General Monitoring  . . . . . . . . . . . . . . . . .  67
144	       6.8.2.  Pervasive Monitoring  . . . . . . . . . . . . . . . .  67

146	   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  68
147	   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  68
148	     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  68
149	     8.2.  Informative References  . . . . . . . . . . . . . . . . .  71
150	   Appendix A.  Use Cases  . . . . . . . . . . . . . . . . . . . . .  75
151	     A.1.  Discovery . . . . . . . . . . . . . . . . . . . . . . . .  75
152	       A.1.1.  Distributed Device Discovery  . . . . . . . . . . . .  75
153	       A.1.2.  Distributed Service Discovery . . . . . . . . . . . .  76
154	       A.1.3.  Directory Discovery . . . . . . . . . . . . . . . . .  76
155	     A.2.  Operational Phase . . . . . . . . . . . . . . . . . . . .  80
156	       A.2.1.  Actuator Group Control  . . . . . . . . . . . . . . .  80
157	       A.2.2.  Device Group Status Request . . . . . . . . . . . . .  84
158	       A.2.3.  Network-wide Query  . . . . . . . . . . . . . . . . .  85
159	       A.2.4.  Network-wide / Group Notification . . . . . . . . . .  85
160	     A.3.  Software Update . . . . . . . . . . . . . . . . . . . . .  85
161	   Appendix B.  Examples of Group Naming for Application Groups  . .  86
162	     B.1.  Group Naming using the URI Path Component . . . . . . . .  86
163	     B.2.  Group Naming using the URI Query Component  . . . . . . .  87
164	     B.3.  Group Naming using the URI Authority Component  . . . . .  88
165	   Appendix C.  Examples of Group Discovery from CoAP Servers  . . .  89
166	     C.1.  Application Groups Associated with a CoAP Group . . . . .  89
167	     C.2.  Members of a Given Application Group  . . . . . . . . . .  90
168	     C.3.  Members of any Application Group of a Given Type  . . . .  91
169	     C.4.  Members of any Application Group in the Network . . . . .  92
170	   Appendix D.  Examples of Message Exchanges  . . . . . . . . . . .  94
171	   Appendix E.  Issues and Limitations with Forward-Proxies  . . . . 102
172	   Appendix F.  Issues and Limitations with Reverse-Proxies  . . . . 103
173	   Appendix G.  Document Updates . . . . . . . . . . . . . . . . . . 104
174	     G.1.  Version -14 to -15  . . . . . . . . . . . . . . . . . . . 104
175	     G.2.  Version -13 to -14  . . . . . . . . . . . . . . . . . . . 105
176	     G.3.  Version -12 to -13  . . . . . . . . . . . . . . . . . . . 105
177	     G.4.  Version -11 to -12  . . . . . . . . . . . . . . . . . . . 106
178	     G.5.  Version -10 to -11  . . . . . . . . . . . . . . . . . . . 107
179	     G.6.  Version -09 to -10  . . . . . . . . . . . . . . . . . . . 107
180	     G.7.  Version -08 to -09  . . . . . . . . . . . . . . . . . . . 108
181	     G.8.  Version -07 to -08  . . . . . . . . . . . . . . . . . . . 108
182	     G.9.  Version -06 to -07  . . . . . . . . . . . . . . . . . . . 108
183	     G.10. Version -05 to -06  . . . . . . . . . . . . . . . . . . . 109
184	     G.11. Version -04 to -05  . . . . . . . . . . . . . . . . . . . 109
185	     G.12. Version -03 to -04  . . . . . . . . . . . . . . . . . . . 109
186	     G.13. Version -02 to -03  . . . . . . . . . . . . . . . . . . . 110
187	     G.14. Version -01 to -02  . . . . . . . . . . . . . . . . . . . 110
188	     G.15. Version -00 to -01  . . . . . . . . . . . . . . . . . . . 111
189	   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . . 111
190	   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . 111

192	1.  Introduction

194	   The Constrained Application Protocol (CoAP) [RFC7252] is a web
195	   transfer protocol based on Representational State Transfer (REST)
196	   that is used in resource-constrained devices and in resource-
197	   constrained networks where packet sizes should be small.  This area
198	   of use is summarized as Constrained RESTful Environments (CoRE).
199	   CoAP has many similarities to HTTP [RFC9110][RFC9112] but also some
200	   key differences.

202	   In a number of use cases, constrained devices can be large in number
203	   as well as often related to each other in function or by location.
204	   For example, in a building automation scenario, all the light
205	   switches in a building may belong to one group, and all the
206	   thermostats may belong to another group.  Groups may be preconfigured
207	   before deployment or dynamically formed during operation.  If
208	   information needs to be sent to or received from a group of devices,
209	   group communication mechanisms can improve efficiency and latency of
210	   communication and reduce bandwidth requirements for a given
211	   application.  While CoAP supports group communication via multicast
212	   requests (see Section 8 of [RFC7252]), HTTP does not support any
213	   equivalent functionality.

215	   This document specifies the use of CoAP for group communication,
216	   together with UDP/IP multicast as the default transport for CoAP
217	   group communication messages.

219	   One-to-many group communication can be achieved in CoAP, by a client
220	   using UDP/IP multicast data transport to send multicast CoAP request
221	   messages.  In response, each server in the addressed group sends a
222	   response message back to the client over UDP/IP unicast.  Notable
223	   CoAP implementations that support group communication include
224	   "Eclipse Californium" [Californium], "Go-CoAP" [Go-CoAP] as well as
225	   "libcoap" [libcoap].

227	   Both unsecured and secured CoAP group communication are specified in
228	   this document.

230	   Unsecured group communication relies on the NoSec mode, whose use is
231	   strongly discouraged and is limited to specific cases (see
232	   Section 4).

234	   Secured group communication is achieved by using Group Object
235	   Security for Constrained RESTful Environments (Group OSCORE)
236	   [I-D.ietf-core-oscore-groupcomm], which in turn builds on Object
237	   Security for Constrained Restful Environments (OSCORE) [RFC8613].
238	   This method provides end-to-end application-layer security protection
239	   of CoAP messages, by using CBOR Object Signing and Encryption (COSE)
240	   [RFC9052][RFC9053].

242	   This document replaces and obsoletes [RFC7390], while it updates both
243	   [RFC7252] and [RFC7641].  A summary of the changes and additions to
244	   these documents is provided in Section 1.3.

246	   All sections in the body of this document are normative, while
247	   appendices are informative.  For additional background about use
248	   cases for CoAP group communication in resource-constrained devices
249	   and networks, see Appendix A.

251	1.1.  Scope

253	   For group communication, only those solutions that use CoAP messages
254	   over a "one-to-many" (i.e., non-unicast) transport protocol are in
255	   the scope of this document.  There are alternative methods to achieve
256	   group communication using CoAP, using unicast only.  One example is
257	   Publish-Subscribe [I-D.ietf-core-coap-pubsub] which uses a central
258	   broker server that CoAP clients access via unicast communication.
259	   These alternative methods may be usable for the same or similar use
260	   cases as the ones targeted in this document.

262	   This document defines UDP/IP multicast as the default transport
263	   protocol for CoAP group requests, as in [RFC7252].  Only the Any
264	   Source Multicast (ASM) mode [RFC5110] of IP multicast operation is in
265	   scope.  Other transport protocols (which may include broadcast, non-
266	   IP multicast, geocast, etc.) are not described in detail and are not
267	   considered.  Although UDP/IP multicast transport is assumed in most
268	   of the text in this document, we expect many of the considerations
269	   for UDP/IP multicast can be re-used for alternative transport
270	   protocols.

272	   Furthermore, this document defines Group OSCORE
273	   [I-D.ietf-core-oscore-groupcomm] as the default group communication
274	   security solution for CoAP.  Security solutions for group
275	   communication and configuration other than Group OSCORE are not
276	   considered.  General principles for secure group configuration are in
277	   scope.

279	   Finally, this document defines the foundation of how proxies operate
280	   in a group communication scenario (see Section 3.5) and compiles
281	   related issues and limitations to account for (see Appendix E and
282	   Appendix F).  While further details that are relevant to operate such
283	   proxies are not defined here, other specifications can build on the
284	   common denominator provided by this document and define specific
285	   realizations of proxies that operate in a group communication
286	   scenario.  For example, a possible realization of proxy for CoAP
287	   group communication is specified in [I-D.ietf-core-groupcomm-proxy].

289	1.2.  Terminology

291	   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
292	   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
293	   "OPTIONAL" in this document are to be interpreted as described in
294	   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
295	   capitals, as shown here.

297	   This specification requires readers to be familiar with CoAP
298	   terminology [RFC7252].  Terminology related to group communication is
299	   defined in Section 2.1.

301	   In addition, the following terms are extensively used.

303	   *  Group URI -- This is defined as a CoAP URI that has the "coap"
304	      scheme and includes in the authority component either an IP
305	      multicast address or a group hostname (e.g., a Group Fully
306	      Qualified Domain Name (FQDN)) that can be resolved to an IP
307	      multicast address.  A group URI also can contain a UDP port number
308	      in the authority component.  Group URIs follow the regular CoAP
309	      URI syntax (see Section 6 of [RFC7252]).

311	   *  Security material -- This refers to any security keys, counters,
312	      or parameters stored in a device that are required to participate
313	      in secure group communication with other devices.

315	1.3.  Changes to Other Documents

317	   This document obsoletes and replaces [RFC7390] as follows.

319	   *  It provides separate definitions for CoAP groups, application
320	      groups, and security groups, together with high-level guidelines
321	      on their configuration (see Section 2).

323	   *  It updates all the guidelines about using group communication for
324	      CoAP (see Section 3).

326	   *  It updates all sections on transport protocols and interworking
327	      with other protocols based on new IETF work done for these
328	      protocols (see Section 3.9 and Section 3.10).

330	   *  It strongly discourages unsecured group communication for CoAP
331	      based on the CoAP NoSec (No Security) mode (see Section 4 and
332	      Section 6.1), and highlights the risk of amplification attacks
333	      together with mitigations against those (see Section 6.3).

335	   *  It defines the use of Group OSCORE
336	      [I-D.ietf-core-oscore-groupcomm] as the security protocol to
337	      protect group communication for CoAP, together with high-level
338	      guidelines on secure group maintenance (see Section 5).

340	   This document updates [RFC7252] as follows.

342	   *  It updates the request/response model for group communication, as
343	      to response suppression (see Section 3.1.2) and token reuse time
344	      (see Section 3.1.5).

346	   *  It updates the freshness model and validation model to use for
347	      cached responses (see Section 3.2.1 and Section 3.2.2).

349	   *  It defines the measures against congestion risk specified in
350	      [RFC7252] to be applicable also to alternative transports other
351	      than IP multicast and defines additional guidelines to reduce
352	      congestion risks (see Section 3.6), including new values for the
353	      transmission parameter DEFAULT_LEISURE that account for secure
354	      communication with Group OSCORE (see Section 3.6.1).

356	   *  It explicitly allows the use of the IPv6 multicast address scopes
357	      realm-local (3), admin-local (4), and global (E).  In particular,
358	      it recommends that an IPv6 CoAP server supports at least link-
359	      local (2), admin-local (4), and site-local (5) scopes with the
360	      "All CoAP Nodes" multicast CoAP group (see Section 3.9.1).  Also,
361	      it recommends that the realm-local (3) scope is supported by an
362	      IPv6 CoAP server on a 6LoWPAN node (see Section 3.9.1).

364	   This document updates [RFC7641] as follows.

366	   *  It defines the use of the CoAP Observe Option in group requests,
367	      for both the GET method and the FETCH method [RFC8132], together
368	      with normative behavior for both CoAP clients and CoAP servers
369	      (see Section 3.7).

371	2.  Types of Groups and Their Configuration

373	   In the following, different group types are first defined in
374	   Section 2.1.  Then, Group configuration, including group creation and
375	   maintenance by an application, user, or commissioning entity is
376	   considered in Section 2.2.

378	2.1.  Types of Groups

380	   Three types of groups and their mutual relationships are defined in
381	   this section: CoAP group, application group, and security group.

383	2.1.1.  CoAP Group

385	   A CoAP group is defined as a set of CoAP endpoints, where each
386	   endpoint is configured to receive CoAP group messages that are sent
387	   to the group's associated IP multicast address and UDP port.  That
388	   is, CoAP groups have relevance at the level of IP networks and CoAP
389	   endpoints.

391	   An endpoint may be a member of multiple CoAP groups, by subscribing
392	   to multiple IP multicast addresses.  A node may be a member of
393	   multiple CoAP groups, by hosting multiple CoAP server endpoints on
394	   different UDP ports.  Membership(s) of an endpoint or node to a CoAP
395	   group may dynamically change over time.  A node or endpoint sending a
396	   CoAP group message to a CoAP group is not necessarily itself a member
397	   of that CoAP group: it is a member only if it also has a CoAP
398	   endpoint listening on the associated IP multicast address and UDP
399	   port associated with the CoAP group.

401	   A CoAP group is identified by information encoded within a group URI.
402	   Further details on identifying a CoAP group are provided in
403	   Section 2.2.1.1.

405	2.1.2.  Application Group

407	   An application group is a set of CoAP server endpoints (hosted on
408	   different nodes) that share a common set of CoAP resources.  That is,
409	   an application group has relevance at the application level.  For
410	   example, an application group could denote all lights in an office
411	   room or all sensors in a hallway.

413	   An endpoint may be a member of multiple application groups.  A client
414	   endpoint that sends a group communication message to an application
415	   group is not necessarily itself a member of this application group.

417	   There can be a one-to-one or a one-to-many relationship between a
418	   CoAP group and application group(s).  Such relationships are
419	   discussed in more detail in Section 2.1.4.

421	   An application group name may be explicitly encoded in the group URI
422	   of a CoAP request, for example in the URI path component.  If this is
423	   not the case, the application group is implicitly derived by the
424	   receiver, e.g., based on information in the CoAP request or other
425	   contextual information.  Further details on identifying an
426	   application group are provided in Section 2.2.1.2.

428	2.1.3.  Security Group

430	   For secure group communication, a security group is required.  A
431	   security group comprises endpoints storing shared group security
432	   material, such that they can use it to protect and verify mutually
433	   exchanged messages.

435	   That is, a client endpoint needs to be a member of a security group
436	   in order to send a valid secured group communication message to that
437	   group.  A server endpoint needs to be a member of a security group in
438	   order to receive and correctly verify a secured group communication
439	   message sent to that group.  An endpoint may be a member of multiple
440	   security groups.

442	   There can be a many-to-many relationship between security groups and
443	   CoAP groups, but often it is one-to-one.  Also, there can be a many-
444	   to-many relationship between security groups and application groups,
445	   but often it is one-to-one.  Such relationships are discussed in more
446	   detail in Section 2.1.4.

448	   Further details on identifying a security group are provided in
449	   Section 2.2.1.3.

451	   If the NoSec mode is used (see Section 4), group communication does
452	   not rely on security at the transport layer nor at the CoAP layer,
453	   hence the communicating endpoints do not refer to a security group.

455	   When a security group uses the security protocol Group OSCORE
456	   [I-D.ietf-core-oscore-groupcomm] to protect group communication (see
457	   Section 5 of this document), source authentication is achieved for
458	   messages exchanged within the group (see Section 5.1 and
459	   Section 6.2.2 of this document).  That is, even though the endpoints
460	   in the security group do share group security material, a recipient
461	   CoAP endpoint is able to verify that a message protected with Group
462	   OSCORE has actually been originated and sent by a specific and
463	   identified CoAP endpoint as a member of the security group.

465	2.1.4.  Relationships Between Group Types

467	   Using the above group type definitions, a CoAP group communication
468	   message sent by an endpoint can be associated with a tuple that
469	   contains one instance of each group type:

471	   (application group, CoAP group, security group)

473	   A special note is appropriate about the possible relationship between
474	   security groups and application groups.

476	   On one hand, multiple application groups may use the same security
477	   group.  Thus, the same group security material is used to protect the
478	   messages targeting any of those application groups.  This has the
479	   benefit that typically less storage, configuration, and updating are
480	   required for security material.  In this case, a CoAP endpoint is
481	   supposed to know the exact application group to refer to for each
482	   message that is sent or received, based on, e.g., the server port
483	   number used, the targeted resource, or the content and structure of
484	   the message payload.

486	   On the other hand, a single application group may use multiple
487	   security groups.  Thus, different messages targeting the resources of
488	   the application group can be protected with different security
489	   material.  This can be convenient, for example, if the security
490	   groups differ with respect to the cryptographic algorithms and
491	   related parameters they use.  In this case, a CoAP client can join
492	   just one of the security groups, based on what it supports and
493	   prefers, while a CoAP server in the application group would rather
494	   have to join all of them.

496	   Beyond this particular case, applications should be careful in
497	   associating a single application group to multiple security groups.
498	   In particular, it is NOT RECOMMENDED to use different security groups
499	   to reflect different access policies for resources in the same
500	   application group.

502	   In fact, being a member of a security group actually grants access
503	   only to exchange secured messages and enables authentication of group
504	   members, while access control (authorization) to use resources in the
505	   application group belongs to a separate security domain.  Therefore,
506	   access control to use resources in the application group should be
507	   separately enforced by leveraging the resource properties or through
508	   dedicated access control credentials assessed by separate means.

510	   Figure 1 summarizes the relationships between the different types of
511	   groups described above in Unified Modeling Language (UML) class
512	   diagram notation.  The class attributes in square brackets are
513	   optionally defined.

515	   +------------------------------+              +--------------------+
516	   |   Application group          |              |    CoAP group      |
517	   |..............................|              |....................|
518	   |                              |              |                    |
519	   | [ - Application group name ] +--------------+ - IP mcast address |
520	   |                              |  1...N    1  | - UDP port number  |
521	   | - Resource URI path(s)       |              |                    |
522	   |                              |              |                    |
523	   +-------------+----------------+              +---------+----------+
524	                 |  1...N                                  |  1...N
525	                 |                                         |
526	                 |                                         |
527	                 |                                         |  1...N
528	                 |                            +------------+----------+
529	                 |                            |   Security group      |
530	                 |                            |.......................|
531	                 |                            |                       |
532	                 '----------------------------+ - Security group name |
533	                                       1...N  | - Security material   |
534	                                              |                       |
535	                                              +-----------------------+

537	            Figure 1: Relationships Among Different Group Types

539	   Figure 2 provides a deployment example of the relationships between
540	   the different types of groups.  It shows six CoAP servers (Srv1-Srv6)
541	   and their respective resources hosted (/resX).  Although in real-life
542	   deployments using group communication the number of servers and
543	   resources would usually be higher, only limited numbers are shown
544	   here for ease of representation.

546	   There are three application groups (1, 2, 3) and two security groups
547	   (1, 2).  The Security Group 1 may, for example, include all lighting
548	   devices on a floor of an office building, while Security Group 2
549	   includes all Heating, Ventilation, and Air Conditioning (HVAC)
550	   devices of that floor.  Security Group 1 is used by both Application
551	   Group 1 and 2.  The Application Group 1 for example may consist of
552	   all lights in a hallway, while Application Group 2 includes all
553	   lights in a storage room.  Three clients (Cli1, Cli2, Cli3) are
554	   configured with security material for Security Group 1.  These
555	   clients may be motion sensors and a control panel (Cli3), that send
556	   multicast messages to /resA to inform the lights of any motion or
557	   user activity detected.  The control panel Cli3 additionally sends a
558	   multicast message to /resB to communicate the latest light preset
559	   selected by a user.  The latter action only influences the lighting
560	   in the storage room (Application Group 2).  Two clients (Cli2, Cli4)
561	   are configured with security material for Security Group 2.  These
562	   clients may be temperature/humidity sensors that report measurements
563	   periodically to all HVAC devices (Srv5, Srv6) in the Application
564	   Group 3, using for example /resC to report temperature and /resD to
565	   report humidity.

567	   All the shown application groups may use the same CoAP group (not
568	   shown in the figure), for example the CoAP group with site-local,
569	   site-specific multicast IP address ff15::3456 and default UDP port
570	   number 5683 on which all the shown resources are hosted for each
571	   server.  Other floors of the same building may replicate the shown
572	   structure, but using different security groups and different CoAP
573	   groups.

575	    .------------------------------.   .-----------------------------.
576	   |                                | |                               |
577	   |       +---------------------+  | |  +---------------------+      |
578	   |       | Application Group 1 |  | |  | Application Group 3 | Cli2 |
579	   |       |                     |  | |  |                     |      |
580	   | Cli1  | Srv1   Srv2   Srv3  |  | |  | Srv5   Srv6         | Cli4 |
581	   |       | /resA  /resA  /resA |  | |  | /resC  /resC        |      |
582	   | Cli2  +---------------------+  | |  | /resD  /resD        |      |
583	   |                                | |  +---------------------+      |
584	   | Cli3     Security Group 1      | |                               |
585	   |                                | |        Security Group 2       |
586	   |       +---------------------+  |  '-----------------------------'
587	   |       | Application Group 2 |  |
588	   |       |                     |  |
589	   |       | Srv1   Srv4         |  |
590	   |       | /resB  /resB        |  |
591	   |       +---------------------+  |
592	    '------------------------------'

594	           Figure 2: Deployment Example of Different Group Types

596	2.2.  Group Configuration

598	   The following defines how groups of different types are named,
599	   created, discovered, and maintained.

601	2.2.1.  Group Naming

603	   Different types of groups are named as specified below, separately
604	   for CoAP groups, application groups, and security groups.

606	2.2.1.1.  CoAP Groups

608	   A CoAP group is always defined by the two properties of IP multicast
609	   address and UDP port number (see Section 2.1.1).

611	   However, a CoAP group is for practical purposes identified and named
612	   by the authority component in the group URI.  This component includes
613	   the host subcomponent and an optional UDP port number.  The host
614	   subcomponent directly defines the IP multicast address of the CoAP
615	   group, in case the host consists of an IP literal.  The host
616	   subcomponent indirectly defines the IP multicast address of the CoAP
617	   group, in case the host consists of a hostname: resolving the
618	   hostname to an IP address in this case produces the IP multicast
619	   address.

621	   It follows that the same CoAP group might have multiple names, which
622	   can be simultaneously and interchangeably used.  For example, if the
623	   two hostnames group1.example and group1.alias.example both resolve to
624	   the IP multicast address [ff15::1234], then the following authority
625	   components are all names for the same CoAP group.

627	   *  group1.example:7700

629	   *  group1.alias.example:7700

631	   *  [ff15::1234]:7700

633	   Also note that, when using the "coap" scheme, the two authority
634	   components <HOST> and <HOST>:5683 both identify the same CoAP group,
635	   whose members listen to the CoAP default port number 5683.
636	   Therefore, building on the above, the following authority components
637	   are all names for the same CoAP group.

639	   *  group1.example

641	   *  group1.alias.example

643	   *  [ff15::1234]

645	   *  group1.example:5683

647	   *  group1.alias.example:5683

649	   *  [ff15::1234]:5683

651	   When configuring a CoAP group membership, it is recommended to
652	   configure an endpoint with an IP multicast address literal, instead
653	   of a group hostname.  This is because an infrastructure providing a
654	   name resolution service, such as DNS, may not be deployed in many
655	   constrained networks.  In case a group hostname is configured, it can
656	   be uniquely mapped to an IP multicast address via a name resolution
657	   service.  For example, this can rely on the DNS resolution process,
658	   if DNS client functionality is available in the endpoint being
659	   configured and the DNS service is supported in the network.

661	   Some examples of hierarchical CoAP group FQDN naming (and scoping)
662	   for a building control application are shown below.

664	     +=====================================+========================+
665	     | URI authority                       | Targeted group of      |
666	     |                                     | nodes                  |
667	     +=====================================+========================+
668	     | all.bldg6.example                   | "all nodes in building |
669	     |                                     | 6"                     |
670	     +-------------------------------------+------------------------+
671	     | all.west.bldg6.example              | "all nodes in west     |
672	     |                                     | wing, building 6"      |
673	     +-------------------------------------+------------------------+
674	     | all.floor1.west.bldg6.example       | "all nodes in floor 1, |
675	     |                                     | west wing, building 6" |
676	     +-------------------------------------+------------------------+
677	     | all.bu036.floor1.west.bldg6.example | "all nodes in office   |
678	     |                                     | bu036, floor 1, west   |
679	     |                                     | wing, building 6"      |
680	     +-------------------------------------+------------------------+

682	           Table 1: Examples of Hierarchical Group FQDN Naming

684	   Similarly, if supported, reverse mapping (from IP multicast address
685	   to Group FQDN) is also possible.  For example, when using an IPv6
686	   multicast address, the reverse mapping can rely on DNS and the
687	   IP6.ARPA domain (see Section 2.5 of [RFC3596]).  Reverse mapping is
688	   important, for example, in troubleshooting to translate IP multicast
689	   addresses back to human-readable hostnames to show in a diagnostics
690	   user interface.

692	2.2.1.2.  Application Groups

694	   An application group can be named through different types of
695	   identifiers, such as a name string, (integer) number, URI, or other
696	   types of strings.  The decision of whether and how an application
697	   group name is encoded and transported in a CoAP group request is
698	   application specific.

700	   This section summarizes possible methods for encoding an application
701	   group name in a CoAP group request.  Full examples for these methods
702	   are provided in Appendix B.

704	   An application group name can be explicitly encoded in a group URI.
705	   Specifically, it can be encoded within one of the following URI
706	   components:

708	   *  URI path component -- This is the most common and RECOMMENDED
709	      method to encode the application group name.  When using this
710	      method in constrained networks, an application group name APPNAME
711	      should be kept short.

713	      A best practice is to use a URI path component such that: i) it
714	      includes a path segment as delimiter with a designated value,
715	      e.g., "gp", followed by ii) a path segment containing the name of
716	      the application group, followed by iii) the path segment(s) that
717	      identify the targeted resource within the application group.  For
718	      example, both /gp/APPNAME/res1 and /base/gp/APPNAME/res1/res2
719	      conform to this practice.  The path segment used as delimiter
720	      ('gp' in the examples) should be kept short in constrained
721	      networks.

723	      Full examples are provided in Appendix B.1.

725	   *  URI query component -- This method can use the following formats.
726	      In either case, when using this method in constrained networks, an
727	      application group name APPNAME should be as short as possible.

729	      -  As a first alternative, the URI query component consists of
730	         only one parameter, which has no value and has the name of the
731	         application group as its own identifier.  The query component
732	         ?APPNAME conforms to this format.

734	      -  As a second alternative, the URI query component includes a
735	         query parameter as designated indicator, e.g., "gp", with a
736	         value equal to the name of the application group.  That is,
737	         assuming that "gp" is used as designated indicator, both the
738	         query components ?gp=APPNAME and ?par1=v1&gp=APPNAME conform to
739	         this format.

741	      Full examples are provided in Appendix B.2.

743	   *  URI authority component -- If this method is used, the application
744	      group is identified by the authority component of the group URI or
745	      a subset thereof.

747	      Because the CoAP group is also defined by the same authority
748	      component (see Section 2.2.1.1), even when using this method, a
749	      given application group is always associated with exactly one CoAP
750	      group.  (See Section 2.1.4 for background on group relationships.)

752	      Note that the host subcomponent within the authority component of
753	      the Group URI can be a group hostname, or an IP address literal.
754	      For constrained networks, using an IP address literal matching the
755	      request's destination IP address has the benefit of reducing the
756	      size of the CoAP message.  This is because the Uri-Host Option is
757	      elided from the CoAP request in this case, since its default value
758	      applies (see Sections 5.10.1 and 6.4 of [RFC7252]).

760	      Full examples are provided in Appendix B.3.

762	   Due to the CoAP client's encoding of the request URI into CoAP
763	   options (per Section 6.4 of [RFC7252]) and the possibility of the
764	   CoAP server to compose the URI again based on the options received
765	   (see Section 6.5 of [RFC7252]), the application group name
766	   information can be transported to the server and used to select the
767	   intended application group.

769	   Any other method to transport the application group name within a
770	   CoAP request, but not using the group URI, would require a new CoAP
771	   option to be defined.  Such an approach is out of the scope of this
772	   document.

774	   Finally, it is also possible to not encode the application group name
775	   in the CoAP request, yielding the most compact representation on the
776	   wire.  In this case, each CoAP server needs to determine the right
777	   application group based on contextual information, such as the CoAP
778	   group, and/or the client identity and/or the target resource.  For
779	   example, each application group on a server could support a unique
780	   set of resources, such that it does not overlap with the set of
781	   resources of any other application group.  Appendix A of [RFC9176]
782	   provides an example of a named application group registered to a
783	   Resource Directory (RD), along with the CoAP group it uses and the
784	   resources it supports.  In that example, an application group name
785	   "lights" is encoded in the "ep" (endpoint) attribute of the RD
786	   registration entry, while the CoAP group ff35:30:2001:db8:f1:0:8000:1
787	   is specified in the authority component of the URI encoded in the
788	   "base" attribute.  In subsequent group requests by a client to the
789	   "lights" group, the name of the group is not present in the request
790	   message.  Rather, the URI authority component that selects the CoAP
791	   group ff35:30:2001:db8:f1:0:8000:1 will implicitly also select the
792	   "lights" application group.

794	2.2.1.3.  Security Groups

796	   A security group can be named in many ways through different types of
797	   identifiers, such as name string, (integer) number, URI, or other
798	   types of strings.  Such a group name is generally not related to
799	   other kinds of group identifiers that may be specific to the security
800	   solution used.

802	   The name of a security group is not expected to be used in messages
803	   exchanged among its members, unless the application requires
804	   otherwise.  At the same time, it is useful to identify the security
805	   group when performing a number of side tasks related to secure group
806	   communication, such as the following ones.

808	   *  An administrator may have to request an authorization to configure
809	      security groups at an available Group Manager (see Section 5).
810	      During the authorization process, as well as during the
811	      interaction between the administrator and the Group Manager, the
812	      group name identifies the specific security group that the
813	      administrator wishes to configure and is authorized to.

815	   *  A CoAP endpoint may have to request an authorization to join a
816	      specific security group through the respective Group Manager, and
817	      thus obtain the required group security material (see Section 5).
818	      During the authorization process, as well as during the
819	      interaction between the CoAP endpoint and the Group Manager, the
820	      group name identifies the specific security group that the CoAP
821	      endpoint wishes to join and is authorized to.

823	   *  A CoAP endpoint may first need to discover the specific security
824	      groups to join through the respective Group Manager (see
825	      Section 2.2.3.1).  Results from the discovery process include the
826	      name of the security groups to join, together with additional
827	      information such as a pointer to the respective Group Manager.

829	   It is discouraged to use "NoSec" and any of its lowercase/uppercase
830	   combinations as name of a security group.  Indications that endpoints
831	   can use the NoSec mode MUST NOT rely on setting up and advertising a
832	   pseudo security group with name "NoSec" or any of its lowercase/
833	   uppercase combinations.

835	2.2.2.  Group Creation and Membership

837	   To create a CoAP group, a configuring entity defines an IP multicast
838	   address (or hostname) for the group and optionally a UDP port number
839	   in case it differs from the default CoAP port number 5683.  Then, it
840	   configures one or more devices as listeners to that IP multicast
841	   address, with a CoAP endpoint listening on the CoAP group's
842	   associated UDP port.  These endpoints/devices are the group members.

844	   The configuring entity can be, for example, a local application with
845	   pre-configuration, a user, a software developer, a cloud service, or
846	   a local commissioning tool.

848	   The devices sending CoAP requests to the CoAP group in the role of
849	   CoAP client also need to be configured with the same information,
850	   even though they are not necessarily group members.  One way to
851	   configure a client is to supply it with a group URI.

853	   The IETF does not define a mandatory protocol to accomplish CoAP
854	   group creation.  [RFC7390] defined an experimental protocol for
855	   configuring memberships of CoAP groups for unsecured group
856	   communication, based on JSON-formatted configuration resources.  The
857	   experiment is concluded as showing that the protocol has not been
858	   considered for deployment and use.

860	   For IPv6 CoAP groups, common multicast address ranges from which
861	   group addresses can be taken are ff1x::/16 and ff3x::/16.

863	   To create an application group, a configuring entity may configure a
864	   resource or a set of resources on CoAP endpoints, such that a CoAP
865	   request sent to a group URI by a configured CoAP client will be
866	   processed by one or more CoAP servers that have the matching URI path
867	   configured.  These servers are the members of the application group.

869	   To create a security group, a configuring entity defines an initial
870	   subset of the related security material.  This comprises a set of
871	   group properties including the cryptographic algorithms and
872	   parameters used in the security group, as well as additional
873	   information relevant throughout the group life-cycle, such as the
874	   security group name and description.  This task MAY be entrusted to a
875	   dedicated administrator, that interacts with a Group Manager as
876	   defined in Section 5.  After that, further security materials to
877	   protect group communications have to be generated, compatible with
878	   the configuration specified for the security group.

880	   To participate in a security group, CoAP endpoints have to be
881	   configured with the group security material used to protect
882	   communications in the associated application/CoAP groups.  The part
883	   of the process that involves secure distribution of group security
884	   material MAY use standardized communication with a Group Manager as
885	   defined in Section 5.

887	   For unsecure group communication using the NoSec mode (see
888	   Section 4), there is no security material to be provided, hence there
889	   is no security group for CoAP endpoints to participate in.

891	   The configuration of groups and membership may be performed at
892	   different moments in the life-cycle of a device.  For example, it can
893	   occur during product (software) creation, in the factory, at a
894	   reseller, on-site during first deployment, or on-site during a system
895	   reconfiguration operation.

897	2.2.3.  Group Discovery

899	   The following describes how a CoAP endpoint can discover groups by
900	   different means, i.e., by using a Resource Directory or directly from
901	   the CoAP servers that are members of such groups.

903	2.2.3.1.  Discovery through a Resource Directory

905	   It is possible for CoAP endpoints to discover application groups as
906	   well as CoAP groups, by using the RD-Groups usage pattern of the CoRE
907	   Resource Directory (RD), as defined in Appendix A of [RFC9176].

909	   In particular, an application group can be registered to the RD,
910	   specifying the reference IP multicast address of its associated CoAP
911	   group.  The registration of groups to the RD is typically performed
912	   by a Commissioning Tool.  Later on, CoAP endpoints can discover the
913	   registered application groups and related CoAP group(s), by using the
914	   lookup interface of the RD.

916	   When secure communication is provided with Group OSCORE (see
917	   Section 5), the approach described in
918	   [I-D.tiloca-core-oscore-discovery] also based on the RD can be used
919	   in order to discover the security group to join.

921	   In particular, the responsible OSCORE Group Manager registers its
922	   security groups to the RD, as links to its own corresponding
923	   resources for joining the security groups
924	   [I-D.ietf-ace-key-groupcomm-oscore].  Later on, CoAP endpoints can
925	   discover the names of the registered security groups and related
926	   application groups, by using the lookup interface of the RD, and then
927	   join the security group through the respective Group Manager.

929	2.2.3.2.  Discovery from Server Members of an Application or CoAP Group

931	   It is possible for CoAP endpoints to discover application groups and
932	   CoAP groups from the CoAP servers that are members of such groups, by
933	   using a GET request targeting the /.well-known/core resource.

935	   As discussed below, such a GET request may be sent to the IP
936	   multicast address of an already known CoAP group associated with one
937	   or more application groups; or to the "All CoAP Nodes" multicast
938	   address (see Section 12.8 of [RFC7252]), thus targeting all reachable
939	   CoAP servers in any CoAP group.  Also, the GET request may specify a
940	   query component, in order to filter the application groups of
941	   interest.

943	   These particular details concerning the GET request depend on the
944	   specific discovery action intended by the client and on application-
945	   specific means used to encode names of application groups and CoAP
946	   groups, e.g., in group URIs and/or CoRE target attributes used with
947	   resource links.

949	   The following discusses a number of methods to discover application
950	   groups and CoAP groups.  When discussing the different methods, the
951	   two assumptions below hold:

953	   *  Application group names are encoded in the path component of Group
954	      URIs (see Section 2.2.1.2).  In examples in this document, the
955	      path segment "gp" is used as designated delimiter.

957	   *  The type of an application group is encoded in the value of the
958	      CoRE Link Format attribute "rt" of a group resource.

960	      In examples presented in the following, this document considers
961	      such values for the attribute "rt" to have the semantics
962	      "g.<GROUPTYPE>", where GROUPTYPE denotes the type of the
963	      application group in question.

965	      Resource Type values can be registered in the "Resource Type (rt=)
966	      Link Target Attribute Values" IANA registry
967	      [Resource.Type.Link.Target.Attribute.Values] within the
968	      "Constrained RESTful Environments (CoRE) Parameters" registry
969	      group.  While relying on registered Resource Type values is not
970	      strictly necessary, it is encouraged in order to ensure a more
971	      effective discovery of application groups and CoAP groups.

973	   Note that the specific way of using the methods discussed below is
974	   application-specific.  That is, there is currently no standard way of
975	   encoding names of application groups and CoAP groups in group URIs
976	   and/or CoRE target attributes used with resource links.  In
977	   particular, the discovery of application groups and CoAP groups
978	   through the RD mentioned in Section 2.2.3.1 is only defined for use
979	   with an RD, i.e., not directly with CoAP servers as group members.

981	   Full examples for the different methods are provided in Appendix C.

983	   *  A CoAP client can discover all the application groups associated
984	      with a specific CoAP group.

986	      This is achieved by sending the GET request above to the IP
987	      multicast address of the CoAP group, and specifying a wildcarded
988	      group type "g.*" as resource type in the URI query parameter "rt".
989	      For example, the request can use a Group URI with path and query
990	      components "/.well-known/core?rt=g.*", so that the query matches
991	      any application group resource type.  Alternatively, the request
992	      can use a Group URI with path and query components "/.well-known/
993	      core?href=/gp/*", so that the query matches any application group
994	      resources and also matches any sub-resources of those.

996	      Through the corresponding responses, the query result is a list of
997	      resources at CoAP servers that are members of the specified CoAP
998	      group and have at least one application group associated with the
999	      CoAP group.  That is, the client gains knowledge of: i) the set of
1000	      servers that are members of the specified CoAP group and member of
1001	      any of the associated application groups; ii) for each of those
1002	      servers, the name of the application groups where the server is a
1003	      member and that are associated with the CoAP group.

1005	      A full example is provided in Appendix C.1.

1007	   *  A CoAP client can discover the CoAP servers that are members of a
1008	      specific application group, the CoAP group associated with the
1009	      application group, and optionally the resources that those servers
1010	      host for each application group.

1012	      This is achieved by sending the GET request above to the "All CoAP
1013	      Nodes" IP multicast address (see Section 12.8 of [RFC7252]), with
1014	      a particular chosen scope (e.g., site-local or realm-local) if
1015	      IPv6 is used.  Also, the request specifies the application group
1016	      name of interest in the URI query component, as defined in
1017	      Section 2.2.1.2.  For example, the request can use a Group URI
1018	      with path and query components "/.well-known/core?href=/gp/gp1" to
1019	      specify the application group with name "gp1".

1021	      Through the corresponding responses, the query result is a list of
1022	      resources at CoAP servers that are members of the specified
1023	      application group and for each application group the associated
1024	      CoAP group.  That is, the client gains knowledge of: i) the set of
1025	      servers that are members of the specified application group and of
1026	      the associated CoAP group; ii) for each of those servers,
1027	      optionally the resources it hosts within the application group.

1029	      If the client wishes to discover resources that a particular
1030	      server hosts within a particular application group, it may use
1031	      unicast discovery request(s) to this server.

1033	      A full example is provided in Appendix C.2.

1035	   *  A CoAP client can discover the CoAP servers that are members of
1036	      any application group of a specific type, the CoAP group
1037	      associated with those application groups, and optionally the
1038	      resources that those servers host as members of those application
1039	      groups.

1041	      This is achieved by sending the GET request above to the "All CoAP
1042	      Nodes" IP multicast address (see Section 12.8 of [RFC7252]), with
1043	      a particular chosen scope (e.g., site-local or realm-local) if
1044	      IPv6 is used.  Also, the request can specify the application group
1045	      type of interest in the URI query component as value of a query
1046	      parameter "rt".  For example, the request can use a Group URI with
1047	      path and query components "/.well-known/core?rt=TypeA" to specify
1048	      the application group type "TypeA".

1050	      Through the corresponding responses, the query result is a list of
1051	      resources at CoAP servers that are members of any application
1052	      group of the specified type and of the CoAP group associated with
1053	      each of those application groups.  That is, the client gains
1054	      knowledge of: i) the set of servers that are members of the
1055	      application groups of the specified type and of the associated
1056	      CoAP group; ii) optionally for each of those servers, the
1057	      resources it hosts within each of those application groups.

1059	      If the client wishes to discover resources that a particular
1060	      server hosts within a particular application group, it may use
1061	      unicast discovery request(s) to this server.

1063	      A full example is provided in Appendix C.3.

1065	   *  A CoAP client can discover the CoAP servers that are members of
1066	      any application group configured in the 6LoWPAN network of the
1067	      client, the CoAP group associated with each application group, and
1068	      optionally the resources that those servers host as members of the
1069	      application group.

1071	      This is achieved by sending the GET request above with a query
1072	      specifying a wildcarded group type in the URI query parameter for
1073	      "rt".  For example, the request can use a Group URI with path and
1074	      query components "/.well-known/core?rt=g.*", so that the query
1075	      matches any application group type.  The request is sent to the
1076	      "All CoAP Nodes" IP multicast address (see Section 12.8 of
1077	      [RFC7252]), with a particular chosen scope if IPv6 is used.

1079	      Through the corresponding responses, the query result is a list of
1080	      group resources hosted by any server in the 6LoWPAN network.  Each
1081	      group resource denotes one application group membership of a
1082	      server.  For each application group, the associated CoAP group is
1083	      obtained as the URI authority component of the corresponding
1084	      returned link.

1086	      If the client wishes to discover resources that a particular
1087	      server hosts within a particular application group, it may use
1088	      unicast discovery request(s) to this server.

1090	      Full examples are provided in Appendix C.4.

1092	2.2.4.  Group Maintenance

1094	   Maintenance of a group includes any necessary operations to cope with
1095	   changes in a system, such as: adding group members, removing group
1096	   members, changing group security material, reconfiguration of UDP
1097	   port number and/or IP multicast address, reconfiguration of the group
1098	   URI, renaming of application groups, splitting of groups, or merging
1099	   of groups.

1101	   For unsecured group communication (see Section 4), i.e., when the
1102	   NoSec mode is used, addition/removal of CoAP group members is simply
1103	   done by configuring these devices to start/stop listening to the
1104	   group IP multicast address on the group's UDP port.

1106	   For secured group communication (see Section 5), the maintenance
1107	   operations of the protocol Group OSCORE
1108	   [I-D.ietf-core-oscore-groupcomm] MUST be implemented as well.  When
1109	   using Group OSCORE, CoAP endpoints participating in group
1110	   communication are also members of a corresponding OSCORE security
1111	   group, and thus share common security material.  Additional related
1112	   maintenance operations are discussed in Section 5.2.

1114	3.  CoAP Usage in Group Communication

1116	   This section specifies the usage of CoAP in group communication, both
1117	   unsecured and secured.  This includes additional support for protocol
1118	   extensions, such as Observe (see Section 3.7) and block-wise transfer
1119	   (see Section 3.8).

1121	   How CoAP group messages are carried over various transport layers is
1122	   the subject of Section 3.9.  Finally, Section 3.10 covers the
1123	   interworking of CoAP group communication with other protocols that
1124	   may operate in the same network.

1126	3.1.  Request/Response Model

1128	3.1.1.  General

1130	   A CoAP client is an endpoint able to transmit CoAP requests and
1131	   receive CoAP responses.  Since the underlying UDP transport supports
1132	   multiplexing by means of UDP port number, there can be multiple
1133	   independent CoAP clients operational on a single host.  On each UDP
1134	   port, an independent CoAP client can be hosted.  Each independent
1135	   CoAP client sends requests that use the associated endpoint's UDP
1136	   port number as the UDP source port number of the request.

1138	   All CoAP requests that are sent via IP multicast MUST be Non-
1139	   confirmable (NON), see Section 8.1 of [RFC7252].  The Message ID in
1140	   an IP multicast CoAP message is used for optional message
1141	   deduplication by both clients and servers, as detailed in Section 4.5
1142	   of [RFC7252].  A server MAY send one or more responses to a CoAP
1143	   group request; these are always unicast messages.  The unicast
1144	   responses received by the CoAP client may carry a mixture of success
1145	   (e.g., 2.05 (Content)) and failure (e.g., 4.04 (Not Found)) response
1146	   codes, depending on the individual server processing results.

1148	   When using CoAP group communication, an amplification attack becomes
1149	   more effective than when sending a unicast request to a single
1150	   server.  That is, by spoofing the source IP address of a designated
1151	   victim in the group request sent via IP multicast, the attack may
1152	   result in multiple servers within the CoAP group sending responses to
1153	   the victim.  This is further discussed in Section 6.3, together with
1154	   available mitigations.

1156	3.1.2.  Response Suppression

1158	   A server MAY suppress its response for various reasons given in
1159	   Section 8.2 of [RFC7252].  This document adds the requirement that a
1160	   server SHOULD suppress the response in case of error or in case there
1161	   is nothing useful to respond, unless the application related to a
1162	   particular resource requires such a response to be made for that
1163	   resource.

1165	   The CoAP No-Response Option [RFC7967] can be used by a client to
1166	   influence the default response suppression on the server side.  It is
1167	   RECOMMENDED that a server supporting this option only takes it into
1168	   account when processing requests that target resources for which
1169	   influencing the default suppression has been predetermined to be
1170	   appropriate, as well as useful, in the application context.

1172	   Any default response suppression by a server SHOULD be performed
1173	   consistently, as follows: if a request on a resource produces a
1174	   particular Response Code and this response is not suppressed, then
1175	   another request on the same resource that produces a response of the
1176	   same Response Code class (see Section 3 of [RFC7252]) is also not
1177	   suppressed.  For example, if a 4.05 (Method Not Allowed) error
1178	   response code is suppressed by default on a resource, then a 4.15
1179	   (Unsupported Content-Format) error response code is also suppressed
1180	   by default for that resource.

1182	3.1.3.  Repeating a Request

1184	   Group requests sent over IP multicast generally have much higher loss
1185	   rates than messages sent over unicast, particularly in constrained
1186	   networks.  Therefore, it is more urgent to have a strategy in place
1187	   for handling the loss of group requests than the loss of unicast
1188	   responses.  To this end, CoAP clients can rely on the following two
1189	   approaches.

1191	   The first approach is the default, used in case there is no explicit
1192	   preference of the implementer.  It is supported already by all CoAP
1193	   stacks.  The application in this case implements a custom
1194	   retransmission logic that MAY trigger a new API request for
1195	   transmission (of a CoAP request) to the CoAP stack, if less responses
1196	   than expected were received.  The CoAP client then sends this group
1197	   request using a different Message ID (and the same or a different
1198	   Token value), in which case all servers that received the initial
1199	   request will again process the repeated request since it appears
1200	   within a new CoAP message with a new Message ID.  This is useful in
1201	   case a client suspects that one or more response(s) to its original
1202	   request were lost and the client needs to collect more, or even all,
1203	   responses from members of the CoAP group, even if this comes at the
1204	   cost of the overhead of certain group members responding twice (once
1205	   to the original request, and once to the repeated request with
1206	   different Message ID).

1208	   The second approach that MAY be implemented requires specific support
1209	   in the CoAP stack.  The application layer in this case also
1210	   implements a custom retransmission logic that MAY trigger a new API
1211	   request to the stack if less responses than expected were received.
1212	   If this specific API request is made, the CoAP client repeats a group
1213	   request using the same Token value and same Message ID value.  This
1214	   ensures that enough (or all) members of the CoAP group have been
1215	   reached with the request.  This is useful in case a number of members
1216	   of the CoAP group did not respond to the initial request and the
1217	   client/application suspects that the request did not reach these
1218	   group members.  However, in case one or more servers did receive the
1219	   initial request but the response to that request was lost, this
1220	   repeat does not help to retrieve the lost response(s) if the
1221	   server(s) implement the optional Message ID based deduplication
1222	   (Section 4.5 of [RFC7252]).

1224	   In summary, even though the CoAP message is Non-confirmable, the CoAP
1225	   stack now provides a mechanism to retransmit the CoAP message, which
1226	   is normally never done for Non-confirmable messages.

1228	3.1.4.  Request/Response Matching and Distinguishing Responses

1230	   A CoAP client can distinguish the origin of multiple server responses
1231	   by the source IP address of the message containing the CoAP response
1232	   and/or any other available application-specific source identifiers
1233	   contained in the CoAP response payload or CoAP response options, such
1234	   as an application-level unique ID associated with the server.  If
1235	   secure communication is provided with Group OSCORE (see Section 5),
1236	   additional security-related identifiers in the CoAP response enable
1237	   the client to retrieve the right security material for decrypting
1238	   each response and authenticating its source.

1240	   While processing a response on the client, the source endpoint of the
1241	   response is not matched to the destination endpoint of the request,
1242	   since for a group request these will never match.  This is specified
1243	   in Section 8.2 of [RFC7252], with reference to IP multicast.

1245	   Also, when UDP transport is used, a server MAY respond from a UDP
1246	   port number that differs from the destination UDP port number of the
1247	   request.

1249	   In case a single client has sent multiple group requests and
1250	   concurrent CoAP transactions are ongoing, the responses received by
1251	   that client are matched to an active request using only the Token
1252	   value.  Due to UDP level multiplexing, the UDP destination port
1253	   number of the response MUST match to the client endpoint's UDP port
1254	   number, i.e., to the UDP source port number of the client's request.

1256	3.1.5.  Token Reuse

1258	   For CoAP group requests, there are additional constraints on the
1259	   reuse of Token values at the client, compared to the unicast case
1260	   defined in [RFC7252] and updated by [RFC9175].  Since for CoAP group
1261	   requests the number of responses is not bounded a priori, the client
1262	   cannot use the reception of a response as a trigger to "free up" a
1263	   Token value for reuse.

1265	   Reusing a Token value too early could lead to incorrect response/
1266	   request matching on the client, and would be a protocol error.
1267	   Therefore, the time between reuse of Token values for different group
1268	   requests MUST be greater than:

1270	   MIN_TOKEN_REUSE_TIME = (NON_LIFETIME + MAX_LATENCY +
1271	                           MAX_SERVER_RESPONSE_DELAY)

1273	   where NON_LIFETIME and MAX_LATENCY are defined in Section 4.8 of
1274	   [RFC7252].  This specification defines MAX_SERVER_RESPONSE_DELAY as
1275	   was done in [RFC7390], that is: the expected maximum response delay
1276	   over all servers that the client can send a CoAP group request to.
1277	   This delay includes the maximum Leisure time period as defined in
1278	   Section 8.2 of [RFC7252].  However, CoAP does not define a time limit
1279	   for the server response delay.  Using the default CoAP parameters,
1280	   the Token reuse time MUST be greater than 250 seconds plus
1281	   MAX_SERVER_RESPONSE_DELAY.

1283	   A preferred solution to meet this requirement is to generate a new
1284	   unique Token for every new group request, such that a Token value is
1285	   never reused.  If a client has to reuse Token values for some reason,
1286	   and also MAX_SERVER_RESPONSE_DELAY is unknown, then using
1287	   MAX_SERVER_RESPONSE_DELAY = 250 seconds is a reasonable guideline.
1288	   The time between Token reuses is in that case set to a value greater
1289	   than MIN_TOKEN_REUSE_TIME = 500 seconds.

1291	   When securing CoAP group communication with Group OSCORE
1292	   [I-D.ietf-core-oscore-groupcomm], secure binding between requests and
1293	   responses is ensured (see Section 5).  Thus, a client may reuse a
1294	   Token value after it has been freed up, as discussed above and
1295	   considering a reuse time greater than MIN_TOKEN_REUSE_TIME.  If an
1296	   alternative security protocol for CoAP group communication is used
1297	   which does not ensure secure binding between requests and responses,
1298	   a client MUST follow the Token processing requirements as defined in
1299	   [RFC9175].

1301	   Another method to more easily meet the above constraint is to
1302	   instantiate multiple CoAP clients at multiple UDP ports on the same
1303	   host.  The Token values only have to be unique within the context of
1304	   a single CoAP client, so using multiple clients can make it easier to
1305	   meet the constraint.

1307	3.1.6.  Client Handling of Multiple Responses With Same Token

1309	   Since a client sending a group request with a Token T will accept
1310	   multiple responses with the same Token T, it is possible in
1311	   particular that the same server sends multiple responses with the
1312	   same Token T back to the client.

1314	   For example, if the client sends a group request specifying the
1315	   Observe option set to 0 (see Section 3.1 of [RFC7641]) and this
1316	   server adds the client to the list of observers for the targeted
1317	   resource, then the server is set up to send multiple responses as
1318	   Observe notifications to notify the client of changes to the resource
1319	   state (see Section 4.2 of [RFC7641]).  The use of Observe with group
1320	   communication is discussed in more details in Section 3.7.  As
1321	   another example, a server might not implement the optional CoAP
1322	   message deduplication based on Message ID; or it might be acting out
1323	   of specification as a malicious, compromised or faulty server.

1325	   When this happens, it is up to the specific client implementation to
1326	   decide at which layer deduplication of responses is performed, or
1327	   whether it is necessary in an application at all.  If the processing
1328	   of a response is successful, the client delivers the response to the
1329	   application as usual.

1331	   The application itself can be in a good position to decide what to
1332	   do, depending on the available context information.  For instance, it
1333	   might accept and process all the responses from the same server, even
1334	   if they are not Observe notifications (i.e., they do not include an
1335	   Observe option).  Alternatively, the application might accept and
1336	   process only one of those responses, e.g., when this can trigger a
1337	   change of state within the application.

1339	   As part of a message exchange between the client and any of the
1340	   servers in the CoAP group, the multiple responses considered above
1341	   are examples of the more general concept elaborated in Section 2 of
1342	   [I-D.bormann-core-responses].

1344	3.2.  Caching

1346	   CoAP endpoints that are members of a CoAP group MAY cache responses
1347	   to a group request as defined in Section 5.6 of [RFC7252].  The set
1348	   of request options used as "Cache-Key" is also as defined in
1349	   Section 5.6 of [RFC7252].

1351	   Furthermore, building on what is defined in Section 8.2.1 of
1352	   [RFC7252]:

1354	   *  A client sending a GET or FETCH group request MAY update a cache
1355	      with the responses from the servers in the CoAP group.  With such
1356	      a cache, the client uses both cached-still-fresh and new responses
1357	      as the result of further group requests.

1359	   *  A client sending a GET or FETCH group request MAY use a response
1360	      received from a server, to satisfy a subsequent sent request
1361	      intended to that server on the related unicast request URI.  In
1362	      particular, the unicast request URI is obtained by replacing the
1363	      authority component of the request URI with the transport-layer
1364	      source address of the cached response message.

1366	   *  A client MAY revalidate a cached response by making a GET or FETCH
1367	      request on the related unicast request URI.

1369	   Note that, in the presence of proxies, doing any of the above
1370	   (optional) unicast requests requires the client to distinguish the
1371	   different responses to a group request, as well as to distinguish the
1372	   different origin servers that responded.  This in turn requires
1373	   additional means to provide the client with information about the
1374	   origin server of each response.  As an example, this is accomplished
1375	   when using the forward-proxying method provided by the realization of
1376	   proxy specified in [I-D.ietf-core-groupcomm-proxy].

1378	   The following subsections define the freshness model and validation
1379	   model to use for cached responses, which update the models defined in
1380	   Sections 5.6.1 and 5.6.2 of [RFC7252], respectively.

1382	3.2.1.  Freshness Model

1384	   For caching of group communication responses at client endpoints, the
1385	   same freshness model relying on the Max-Age Option as defined in
1386	   Section 5.6.1 of [RFC7252] applies, and the multicast caching rules
1387	   of Section 8.2.1 of [RFC7252] apply except for the one discussed
1388	   below.

1390	   In Section 8.2.1 of [RFC7252] it is stated that, regardless of the
1391	   presence of cached responses to the group request, the client
1392	   endpoint will always send out a new group request onto the network
1393	   because new members may have joined the CoAP group since the last
1394	   group request to the same CoAP group or resource.  That is, a request
1395	   is never served from cached responses only.  This document updates
1396	   [RFC7252] by adding the following exception case, where a client
1397	   endpoint MAY serve a request by using cached responses only, and not
1398	   send out a new group request onto the network:

1400	   *  The client knows all current CoAP servers that are members of the
1401	      CoAP group; and, for each group member, the client's cache
1402	      currently stores a fresh response.

1404	   How the client in the case above determines the CoAP servers that are
1405	   currently members of the CoAP group is out of scope for this
1406	   document.  It may be, for example, via a Group Manager, or by
1407	   monitoring group joining protocol exchanges.

1409	   For caching at proxies, a possible freshness model is defined as part
1410	   of the realization of proxy specified in
1411	   [I-D.ietf-core-groupcomm-proxy].

1413	3.2.2.  Validation Model

1415	   For validation of cached group communication responses at client
1416	   endpoints, the multicast validation rules in Section 8.2.1 of
1417	   [RFC7252] apply, except for the last paragraph which states "A GET
1418	   request to a multicast group MUST NOT contain an ETag option".  This
1419	   document updates [RFC7252] by allowing a group request to contain
1420	   ETag Options as specified below.

1422	   For validation at proxies, a possible validation model is defined as
1423	   part of the realization of proxy specified in
1424	   [I-D.ietf-core-groupcomm-proxy].

1426	3.2.2.1.  ETag Option in a Group Request/Response

1428	   A client endpoint MAY include one or more ETag Options in a GET or
1429	   FETCH group request, to validate one or more stored responses it has
1430	   cached.  In case two or more servers in the CoAP group have responded
1431	   to a past request to the same resource with an identical ETag value,
1432	   it is the responsibility of the client to handle this case.  In
1433	   particular, if the client wishes to validate, using a group request,
1434	   a response from server 1 with an ETag value N, while it wants a fresh
1435	   response from server 2, there is no way to achieve this using a
1436	   single group request.  This wish could occur if the client has a
1437	   cached representation for server 1, but has no cached representation
1438	   for server 2: for example, because the client needed to remove older
1439	   items from its cache to make space for newer resource
1440	   representations.

1442	   There are various strategies to avoid problems caused by identical
1443	   ETag values: one strategy is for a client to repeat a request if a
1444	   particular server returned 2.03 (Valid) with an ETag value that is
1445	   not in the client's cache (for that server).  The repeated request
1446	   excludes the "duplicate" ETag, and it may be a group request or a
1447	   unicast request to the particular server.  Another strategy is to
1448	   mark a cached ETag value as "duplicated - not to be used for
1449	   revalidation" as soon as another server responds with the same ETag
1450	   value.  Finally, the recommended strategy is for the servers to
1451	   generate unique ETags as specified below.

1453	   A server endpoint MUST process an ETag Option in a GET or FETCH group
1454	   request in the same way it processes an ETag Option for a unicast
1455	   request.  A server endpoint that includes an ETag Option in a
1456	   response to a group request SHOULD construct the ETag Option value in
1457	   such a way that the value will be unique to this particular server
1458	   with a high probability.  This practically prevents a collision of
1459	   the ETag values from different servers in the same CoAP group and
1460	   application group, which in turn allows the client to effectively
1461	   validate a particular response of an origin server.  This can be
1462	   accomplished, for example, by embedding a compact ID (or hash) of the
1463	   server within the ETag value, where the ID is unique (or unique with
1464	   a high probability) in the scope of the CoAP/application groups.

1466	   Note: a CoAP server implementation that is unaware of the updates to
1467	   [RFC7252] made by this document will expect group requests to never
1468	   contain an ETag Option (see Section 8.2.1 of [RFC7252]).  Such a
1469	   server treats an ETag Option in a group request as an unrecognized
1470	   option per Sections 5.4 and 8.2.1 of [RFC7252], causing it to ignore
1471	   this (elective) ETag Option regardless of its value, and processes
1472	   the request normally as if that ETag Option was not included.

1474	3.3.  URI Path Selection

1476	   The URI Path used in a group request is preferably a path that is
1477	   known to be supported across all members of a CoAP group.  However,
1478	   there are valid use cases where a group request is known to be
1479	   successful only for a subset of the CoAP group.  For instance, the
1480	   subset may include only members of a specific application group,
1481	   while the members of the CoAP group for which the request is
1482	   unsuccessful (for example because they are outside the target
1483	   application group) either suppress a response as per the default
1484	   behavior from Section 3.1.2, or reply with an error response, e.g.,
1485	   when the default behavior is overridden by a No-Response Option

1487	   [RFC7967] included in the group request.

1489	3.4.  Port Selection for UDP Transport

1491	   A server that is a member of a CoAP group listens for CoAP request
1492	   messages on the group's IP multicast address and port number.  The
1493	   group's port number is usually the CoAP default UDP port number 5683,
1494	   or alternatively another non-default UDP port number if configured.
1495	   Regardless of the method that is used for selecting the group's port
1496	   number, the same port number is used as the destination port number
1497	   for requests across all CoAP servers that are members of a CoAP group
1498	   and across all CoAP clients sending group requests to that group.

1500	   One way to create multiple CoAP groups is using different UDP ports
1501	   with the same IP multicast address, in case the devices' network
1502	   stack only supports a limited number of multicast address
1503	   subscriptions.  However, it must be taken into account that this
1504	   incurs additional processing overhead on each CoAP server
1505	   participating in at least one of these groups: messages to groups
1506	   that are not of interest to the node are only discarded at the higher
1507	   transport (UDP) layer instead of directly at the Internet (IP) layer.
1508	   Also, a constrained network may be additionally burdened in this case
1509	   with multicast traffic that is eventually discarded at the UDP layer
1510	   by most nodes.

1512	   The port number 5684 is dedicated for DTLS-secured unicast CoAP and
1513	   MUST NOT be used for any CoAP group communication.

1515	   For a CoAP server node that supports resource discovery as defined in
1516	   Section 2.4 of [RFC7252], the default port number 5683 MUST be
1517	   supported (see Section 7.1 of [RFC7252]) for the "All CoAP Nodes"
1518	   CoAP group as detailed in Section 3.9.

1520	3.5.  Proxy Operation

1522	   This section defines the foundation of how proxies operate in a group
1523	   communication scenario.

1525	   In particular, forward-proxies and reverse-proxies are separately
1526	   considered in Section 3.5.1 and Section 3.5.2, respectively.
1527	   Furthermore, Section 3.5.3 discusses the case where a client sends a
1528	   group request to multiple proxies at once.  Security considerations
1529	   that apply when using a proxy are discussed later in Section 5.3.

1531	   Further details that are relevant to operate such proxies are not
1532	   defined here.  Other specifications can build on the common
1533	   denominator provided by this document and define specific
1534	   realizations of proxies that operate in a group communication
1535	   scenario.  As an example, a realization of such proxy is specified in
1536	   [I-D.ietf-core-groupcomm-proxy].

1538	3.5.1.  Forward-Proxies

1540	   CoAP enables a client to request a forward-proxy to process a CoAP
1541	   request on its behalf, as described in Sections 5.7.2 and 8.2.2 of
1542	   [RFC7252].

1544	   When intending to reach a CoAP group through a proxy, the client
1545	   sends a unicast CoAP group request to the proxy.  The group URI where
1546	   the request has to be forwarded to is specified in the request,
1547	   either as a string in the Proxy-Uri Option, or through the Proxy-
1548	   Scheme Option with the group URI constructed from the usual Uri-*
1549	   Options.  Then, the forward-proxy resolves the group URI to a
1550	   destination CoAP group, i.e., it sends (e.g., multicasts) the CoAP
1551	   group request to the group URI, receives the responses and forwards
1552	   all the individual (unicast) responses back to the client.

1554	   Issues and limitations of this approach are compiled in Appendix E.
1555	   The forward-proxying method provided by the realization of proxy
1556	   specified in [I-D.ietf-core-groupcomm-proxy] uses this approach and
1557	   addresses such issues and limitations.

1559	   An alternative approach is for the proxy to collect all the
1560	   individual (unicast) responses to a CoAP group request and then send
1561	   back only a single (aggregated) response to the client.  Issues and
1562	   limitations of this alternative approach are also compiled in
1563	   Appendix E.

1565	   It is RECOMMENDED that a CoAP proxy processes a request to be
1566	   forwarded to a group URI only if it is explicitly enabled to do so.
1567	   If such functionality is not explicitly enabled, the default response
1568	   returned to the client is 5.01 (Not Implemented).  Furthermore, a
1569	   proxy SHOULD be explicitly configured (e.g., by allow-listing and/or
1570	   client authentication) to allow proxied CoAP group requests only from
1571	   specific client(s).

1573	   The operation of HTTP-to-CoAP proxies for multicast CoAP requests is
1574	   specified in Sections 8.4 and 10.1 of [RFC8075].  In this case, the
1575	   "application/http" media type is used to let the proxy return
1576	   multiple CoAP responses -- each translated to an HTTP response --
1577	   back to the HTTP client.  Resulting issues and limitations are also
1578	   compiled in Appendix E.

1580	   The forward-proxying method for HTTP-to-CoAP proxies provided by the
1581	   realization of proxy specified in [I-D.ietf-core-groupcomm-proxy]
1582	   addresses such issues and limitations.

1584	3.5.2.  Reverse-Proxies

1586	   CoAP enables the use of a reverse-proxy, as an endpoint that stands
1587	   in for one or more other server(s), and satisfies requests on behalf
1588	   of these, doing any necessary translations (see Section 5.7.3 of
1589	   [RFC7252]).

1591	   In a group communication scenario, a reverse-proxy can rely on its
1592	   configuration and/or on information in a request from a client, in
1593	   order to determine that a group request has to be sent to servers in
1594	   a CoAP group, over a one-to-many transport such as IP/UDP multicast.

1596	   One typical implementation is to allocate specific resources on the
1597	   reverse-proxy to application groups.  A client can then select the
1598	   application group, and group resource to access, using the URI path
1599	   in its group request.  For example, a request to /proxy/APPNAME/res1
1600	   could give access to resource /res1 in the application group APPNAME.
1601	   In this example, the proxy automatically selects the associated CoAP
1602	   group.

1604	   In general, using the URI path to select application group and/or
1605	   CoAP group is an efficient way to access a reverse proxy.  Other
1606	   methods are possible, such as using the URI authority component: this
1607	   requires configuration of more elements on the reverse proxy, like
1608	   multiple virtual servers and/or multiple IP addresses and/or multiple
1609	   port numbers.

1611	   The reverse-proxy practically stands in for a CoAP group, thus
1612	   preventing the client from reaching the group as a whole with a
1613	   single group request directly addressed to that group (e.g., via
1614	   multicast).  In addition to that, the reverse-proxy may also stand in
1615	   for each of the individual servers in the CoAP group (e.g., if acting
1616	   as firewall), thus also preventing the client from individually
1617	   reaching any server in the group with a unicast request directly
1618	   addressed to that server.

1620	   For a reverse-proxy that sends a group request to servers in a CoAP
1621	   group, the considerations as defined in Section 5.7.3 of [RFC7252]
1622	   hold.  Resulting issues and limitations are compiled in Appendix F.
1623	   The reverse-proxying method provided by the realization of proxy
1624	   specified in [I-D.ietf-core-groupcomm-proxy] uses this approach and
1625	   addresses such issues and limitations.

1627	   A client might re-use a Token value in a valid new request to the
1628	   reverse-proxy, while the reverse-proxy still has an ongoing group
1629	   communication request for this client with the same Token value
1630	   (i.e., its time period for response collection has not ended yet).

1632	   If this happens, the reverse-proxy MUST stop the ongoing request and
1633	   associated response forwarding, it MUST NOT forward the new request
1634	   to the servers in the CoAP group, and it MUST send a 4.00 (Bad
1635	   Request) error response to the client.  The diagnostic payload of the
1636	   error response SHOULD indicate to the client that the resource is a
1637	   reverse-proxy resource, and that for this reason immediate Token re-
1638	   use is not possible.

1640	   For the operation of HTTP-to-CoAP reverse proxies, see the last two
1641	   paragraphs of Section 3.5.1, which apply also to the case of reverse-
1642	   proxies.

1644	3.5.3.  Single Group Request to Multiple Proxies

1646	   A client might send a group request to multiple proxies at once
1647	   (e.g., over IP multicast), so that each of those proxies forwards it
1648	   to the servers in the CoAP group.  Assuming that no message loss
1649	   occurs and that N proxies receive and forward the group request, this
1650	   has the following implications.

1652	   *  Each server receives N copies of the group request, i.e., one copy
1653	      from each proxy.

1655	   *  If the NoSec mode is used (see Section 4), each server treats each
1656	      received copy of the group request as a different request from a
1657	      different client.  As a result:

1659	      -  Each server can reply to each of the N received requests with
1660	         multiple responses over time (see Section 3.1.6).  All the
1661	         responses to the same received request are sent to the same
1662	         proxy that has forwarded that request, which in turn relays
1663	         those responses to the client.

1665	      -  From each proxy, the client receives all the responses to the
1666	         group request that each server has sent to that proxy.  Even in
1667	         case the client is able to distinguish the different servers
1668	         originating the responses (e.g., leveraging the approach used
1669	         by the realization of proxy specified in
1670	         [I-D.ietf-core-groupcomm-proxy]), the client would receive the
1671	         same response content originated by each server N times, as
1672	         relayed by the N proxies.

1674	   *  If secure group communication with Group OSCORE is used (see
1675	      Section 5), each server is able to determine that each received
1676	      copy of the group request is in fact originated by the same
1677	      client.  In particular, each server is able to determine that all
1678	      such received requests are copies of exactly the same group
1679	      request.

1681	      As a result, each server accepts only the first copy of the group
1682	      request received from one of the proxies, while discarding as
1683	      replay any later copies received from any other proxy.

1685	      After that, the server can reply to the accepted request with
1686	      multiple responses over time (see Section 3.1.6).  All those
1687	      responses are sent to the same proxy that forwarded the only
1688	      accepted request, and that in turn relays those responses to the
1689	      client.

1691	      As a consequence, for each server, the client receives responses
1692	      originated by that server only from one proxy.  That is, the
1693	      client receives a certain response content only once, like in the
1694	      case with only one proxy.

1696	3.6.  Congestion Control

1698	   CoAP group requests may result in a multitude of responses from
1699	   different nodes, potentially causing congestion.  Therefore, both the
1700	   sending of CoAP group requests and the sending of the unicast CoAP
1701	   responses to these group requests should be conservatively
1702	   controlled.

1704	   CoAP [RFC7252] reduces IP multicast-specific congestion risks through
1705	   the following measures:

1707	   *  A server may choose not to respond to an IP multicast request if
1708	      there is nothing useful to respond, e.g., error or empty response
1709	      (see Section 8.2 of [RFC7252]).

1711	   *  A server should limit the support for IP multicast requests to
1712	      specific resources where multicast operation is required
1713	      (Section 11.3 of [RFC7252]).

1715	   *  An IP multicast request MUST be Non-confirmable (Section 8.1 of
1716	      [RFC7252]).

1718	   *  A response to an IP multicast request SHOULD be Non-confirmable
1719	      (Section 5.2.3 of [RFC7252]).

1721	   *  A server does not respond immediately to an IP multicast request
1722	      and should first wait for a time that is randomly picked within a
1723	      predetermined time interval called the Leisure (Section 8.2 of
1724	      [RFC7252]).  The transmission parameter DEFAULT_LEISURE may be
1725	      used to define a Leisure period when it cannot be computed
1726	      otherwise.

1728	   This document also defines these measures to be applicable to
1729	   alternative transports (other than IP multicast), if not defined
1730	   otherwise.  Updates related to Leisure are done in Section 3.6.1.

1732	   CoAP also defines non-multicast-specific congestion control measures
1733	   that also apply to the IP multicast case:

1735	   *  The transmission parameter NSTART defined in Section 4.7 of
1736	      [RFC7252] limits "the number of simultaneous outstanding
1737	      interactions to a given server".  For the IP multicast case,
1738	      "given server" is to be understood as a "given CoAP group", i.e.,
1739	      a set of CoAP endpoints where each endpoint is configured to
1740	      receive CoAP group messages that are sent to the group's
1741	      associated IP multicast address and UDP port (see Section 2.1.1).
1742	      The same default value of NSTART=1 (Section 4.8 of [RFC7252])
1743	      applies for the group communication case.

1745	   *  The transmission parameter PROBING_RATE (Section 4.7 of [RFC7252])
1746	      limits the average data rate in sending to another endpoint that
1747	      does not respond, e.g., to a Non-confirmable request such as a
1748	      group request.  Therefore, an average transmission data rate
1749	      PROBING_RATE is not to be exceeded by a client that does not
1750	      receive a response from any server in the targeted CoAP group.
1751	      The same default value of PROBING_RATE=1 byte/second (Section 4.8
1752	      of [RFC7252]) applies for the group communication case.

1754	   Note that the transmission parameter values for NSTART,
1755	   DEFAULT_LEISURE, and PROBING_RATE may be configured to values
1756	   specific to the application environment (including dynamically
1757	   adjusted values); however, the configuration method is out of the
1758	   scope of this document.  This is unchanged from Section 4.8.1 of
1759	   [RFC7252].

1761	   Independently of the transport used, additional guidelines to reduce
1762	   congestion risks defined in this document are as follows:

1764	   *  A server in a constrained network SHOULD only support group
1765	      requests for resources that have a small representation (where the
1766	      representation may be retrieved via a GET, FETCH, or POST method
1767	      in the request).  For example, "small" can be defined as a
1768	      response payload limited to approximately 5% of the IP Maximum
1769	      Transmit Unit (MTU) size, so that it fits into a single link-layer
1770	      frame in case IPv6 over Low-Power Wireless Personal Area Networks
1771	      (6LoWPAN, see Section 3.9.2) is used on the constrained network.

1773	   *  A server SHOULD minimize the payload size of a response to a group
1774	      GET or FETCH request on "/.well-known/core" by using hierarchy in
1775	      arranging link descriptions for the response.  An example of this
1776	      is given in Section 5 of [RFC6690].

1778	   *  A server MAY minimize the payload size of a response to a group
1779	      GET or FETCH request (e.g., on "/.well-known/core") by using CoAP
1780	      block-wise transfers [RFC7959] in case the payload is long,
1781	      returning only a first block of the CoRE Link Format description.
1782	      For this reason, a CoAP client sending a CoAP group request to
1783	      "/.well-known/core" SHOULD support block-wise transfers.  See also
1784	      Section 3.8.

1786	   *  A client SHOULD be configured to use CoAP groups with the smallest
1787	      possible IP multicast scope that fulfills the application needs.
1788	      As an example, site-local scope is always preferred over global
1789	      scope IP multicast if this fulfills the application needs.
1790	      Similarly, realm-local scope is always preferred over site-local
1791	      scope if this fulfills the application needs.

1793	3.6.1.  Default Leisure Updates

1795	   The Leisure time period as defined in Section 8.2 of [RFC7252] is
1796	   preferably computed or configured on the CoAP server with a value
1797	   suitable for the specific use case.  The equation from that section
1798	   for computing a rough lower bound for Leisure is:

1800	       lb_Leisure = S * G / R

1802	   for a group size estimate G, a target data transfer rate R (which
1803	   both should be chosen conservatively), and an estimated response size
1804	   S.  Note that S is the estimated average response size for all
1805	   responding servers for the given group request, not necessarily the
1806	   known response size of the server's own response to the request.  If
1807	   the Leisure is not computed or configured, the default value
1808	   DEFAULT_LEISURE MAY be used.  In [RFC7252], the default is calculated
1809	   based on a baseline IEEE 802.15.4 6LoWPAN network situation with
1810	   G=50, S=100, and R=1000, although this is not explicitly written
1811	   down.

1813	   This document updates the calculation for DEFAULT_LEISURE, by
1814	   modifying the estimated response size (S) parameter to account for
1815	   responses protected with Group OSCORE (see Section 5.1).  In
1816	   particular, the two cases of group mode and pairwise mode are
1817	   considered.

1819	   When the group mode is used to protect a response, it is largely
1820	   cautious to account for additional 100 bytes of security overhead, so
1821	   that S becomes 200.  When the pairwise mode is used to protect a
1822	   response, it is largely cautious to account for additional 30 bytes
1823	   of overhead is expected, so that S becomes 130.  Using these new
1824	   values for S in the calculation yields the following new default
1825	   parameter values:

1827	   *  DEFAULT_LEISURE = 20 seconds, if the OSCORE group is set to use
1828	      (also) the group mode.

1830	   *  DEFAULT_LEISURE = 13 seconds, if the OSCORE group is set to use
1831	      only the pairwise mode.

1833	   Obviously, the requirement to insert a random leisure period as
1834	   described above does not apply to retransmissions of a Confirmable
1835	   separate response (see Section 5.2.2 of [RFC7252]), but only to the
1836	   initial CoAP message transmission when the CoAP retransmission
1837	   counter is 0 (see Section 4.2 of [RFC7252]).

1839	3.7.  Observing Resources

1841	   The CoAP Observe Option [RFC7641] is a protocol extension of CoAP,
1842	   which allows a CoAP client to retrieve a representation of a resource
1843	   and automatically keep this representation up-to-date over a longer
1844	   period of time.  The client gets notified when the representation has
1845	   changed.  [RFC7641] does not mention whether the Observe Option can
1846	   be combined with CoAP (multicast) group communication.

1848	   This section updates [RFC7641] with the use of the Observe Option in
1849	   a CoAP GET group request, and defines normative behavior for both
1850	   client and server.  Consistent with Section 2.4 of [RFC8132], the
1851	   same rules apply when using the Observe Option in a CoAP FETCH group
1852	   request.

1854	   Multicast Observe is a useful way to start observing a particular
1855	   resource on all members of a CoAP group at the same time.  If a group
1856	   member does not have this particular resource, or it does not allow
1857	   the GET or FETCH method on that resource, then the group member will
1858	   either suppress a response as per the default behavior from
1859	   Section 3.1.2, or reply with an error response -- 4.04 (Not Found) or
1860	   4.05 (Method Not Allowed), respectively -- e.g., when the default
1861	   behavior is overridden by a No-Response Option [RFC7967] included in
1862	   the group request.

1864	   A client that sends a group GET or FETCH request with the Observe
1865	   Option MAY repeat this request using the same Token value and the
1866	   same Observe Option value, in order to ensure that enough (or all)
1867	   members of the CoAP group have been reached with the request.
1868	   Repeating a request is discussed in more detail in Section 3.1.3.
1869	   This is useful in case a number of members of the CoAP group did not
1870	   respond to the initial request.  The client MAY additionally use the
1871	   same Message ID in the repeated request, to avoid that members of the
1872	   CoAP group that had already received the initial request would
1873	   respond again.  Note that using the same Message ID in a repeated
1874	   request will not be helpful in case of loss of a response message,
1875	   since the server that responded already will consider the repeated
1876	   request as a duplicate message.  On the other hand, if the client
1877	   uses a different, fresh Message ID in the repeated request, then all
1878	   the members of the CoAP group that receive this new message will
1879	   typically respond again, which increases the network load.

1881	   A client that has sent a group GET or FETCH request with the Observe
1882	   Option MAY follow up by sending a new unicast CON request with the
1883	   same Token value and same Observe Option value to a particular
1884	   server, in order to ensure that the particular server receives the
1885	   request.  This is useful in case a specific member of the CoAP group
1886	   did not respond to the initial group request, although it was
1887	   expected to.  In this case, the client MUST use a Message ID that
1888	   differs from that of the initial group request message.

1890	   Since the first Observe notification from a server can be lost, a
1891	   client SHOULD be ready to begin receiving the Observe notifications
1892	   from a server long after the Non-confirmable group request with the
1893	   Observe Option was sent.

1895	   At the same time, the loss of initial responses with the Observe
1896	   Option from a server is less problematic than in the case where the
1897	   group request is a regular request, i.e., when the request does not
1898	   include the Observe Option.  That is, as per Section 4.5 of
1899	   [RFC7641], servers that have registered a client as an observer have
1900	   to ensure that the client achieves eventual consistency with respect
1901	   to the representation of the observed resource.  This realistically
1902	   relies on the sending of new Observe notifications, which are
1903	   occasionally expected to be sent as Confirmable messages also in
1904	   order to assess client aliveness (see below).

1906	   Furthermore, consistent with Section 3.3.1 of [RFC7641] and following
1907	   its guidelines, a client MAY at any time send a new group/multicast
1908	   GET or FETCH request with the same Token value and same Observe
1909	   Option value as the original request.  This allows the client to
1910	   verify that it has an up-to-date representation of an observed
1911	   resource and/or to re-register its interest to observe a resource.

1913	   In the above client behaviors, the Token value is kept identical to
1914	   the initial request to avoid that a client is included in more than
1915	   one entry in the list of observers (Section 4.1 of [RFC7641]).

1917	   Before repeating a request as specified above, the client SHOULD wait
1918	   for at least the expected round-trip time plus the Leisure time
1919	   period defined in Section 8.2 of [RFC7252], to give the server time
1920	   to respond.

1922	   A server that receives a GET or FETCH request with the Observe
1923	   Option, for which request processing is successful, SHOULD respond to
1924	   this request and not suppress the response.  If a server adds a
1925	   client (as a new entry) to the list of observers for a resource due
1926	   to an Observe request, the server SHOULD respond to this request and
1927	   SHOULD NOT suppress the response.  An exception to the above is the
1928	   overriding of response suppression according to a CoAP No-Response
1929	   Option [RFC7967] specified by the client in the GET or FETCH request
1930	   (see Section 3.1.2).

1932	   When responding, a server SHOULD apply the Leisure period defined in
1933	   Section 8.2 of [RFC7252].  This holds not only for the first response
1934	   to the multicast Observe request, but also for the subsequent Observe
1935	   notifications.  The Observe notifications in this case are the
1936	   "further responses" mentioned in that section:

1938	   |  If further responses need to be sent based on the same multicast
1939	   |  address membership, a new leisure period starts at the earliest
1940	   |  after the previous one finishes.

1942	   This implies that, while a server is still waiting for the random
1943	   point in time chosen to send an Observe notification within a leisure
1944	   period, a new Observe notification cannot be sent yet and remains
1945	   pending, if it is related to a different observation but to the same
1946	   CoAP group.

1948	   A server SHOULD have a mechanism to verify the aliveness of its
1949	   observing clients and the continued interest of these clients in
1950	   receiving the Observe notifications.  This can be implemented by
1951	   sending notifications occasionally using a Confirmable message (see
1952	   Section 4.5 of [RFC7641] for details).  This requirement overrides
1953	   the regular behavior of sending Non-confirmable notifications in
1954	   response to a Non-confirmable request.  Obviously, the requirement to
1955	   insert a random leisure period as described above does not apply to
1956	   retransmissions of a Confirmable notification, but only to the
1957	   initial CoAP message transmission when the CoAP retransmission
1958	   counter is 0 (see Section 4.2 of [RFC7252]).

1960	   A client can use the unicast cancellation methods of Section 3.6 of
1961	   [RFC7641] and stop the ongoing observation of a particular resource
1962	   on members of a CoAP group.  This can be used to remove specific
1963	   observed servers, or even all servers in the CoAP group (using serial
1964	   unicast to each known group member).  In addition, a client MAY
1965	   explicitly deregister from all those servers at once, by sending a
1966	   group/multicast GET or FETCH request that includes the Token value of
1967	   the observation to be canceled and includes an Observe Option with
1968	   the value set to 1 (deregister).  In case not all the servers in the
1969	   CoAP group received this deregistration request, either the unicast
1970	   cancellation methods can be used at a later point in time or the
1971	   group/multicast deregistration request MAY be repeated upon receiving
1972	   another observe response from a server.

1974	   When combining CoAP group communication and Observe as described
1975	   above, an amplification attack can become particularly effective.
1976	   That is, by spoofing the source IP address of a designated victim in
1977	   the group request conveying the Observe Option, the attack may result
1978	   in multiple servers within the CoAP group sending multiple Observe
1979	   notifications to the victim, throughout the observation lifetime.
1980	   This is further discussed in Section 6.3, together with available
1981	   mitigations.

1983	   For observing at servers that are members of a CoAP group through a
1984	   CoAP-to-CoAP proxy, the limitations stated in Section 3.5 apply.  The
1985	   realization of proxy specified in [I-D.ietf-core-groupcomm-proxy]
1986	   enables group communication including resource observation through
1987	   proxies and addresses those limitations.

1989	3.8.  Block-Wise Transfer

1991	   Section 2.8 of [RFC7959] specifies how a client can use block-wise
1992	   transfer (Block2 Option) in a multicast GET request to limit the size
1993	   of the initial response of each server.  Consistent with Section 2.5
1994	   of [RFC8132], the same can be done with a multicast FETCH request.

1996	   If a client sends a multicast GET or FETCH request including a Block2
1997	   Option with a block number of 0, then the client can rely on two
1998	   possible approaches in order to retrieve any further blocks of the
1999	   resource from responding servers.

2001	   1.  The client uses unicast requests, separately addressing each
2002	       different server.

2004	   2.  The client uses follow-up group requests, if all the responses
2005	       received from different servers specify the same block size in
2006	       their Block2 Option.  In particular, such a block size can be
2007	       equal to the block size specified in the Block2 Option of the
2008	       first group request, or instead a smaller one.  If the client
2009	       relies on this approach, then the Block2 Option of follow-up
2010	       group requests in the same block-wise transfer specifies the same
2011	       block size used by all the servers in the Block2 Option of their
2012	       responses.

2014	   Furthermore, a server (member of a targeted CoAP group) that needs to
2015	   respond to a group request with a particularly large resource can use
2016	   block-wise transfer (Block2 Option) at its own initiative, to limit
2017	   the size of the initial response.  That is the case when a client
2018	   sends a multicast GET or FETCH request that does not include a Block2
2019	   Option.

2021	   After a client receives responses that include a Block2 Option to the
2022	   first group request that did not include a Block2 Option, the client
2023	   can rely on either of the two approaches above for any further
2024	   requests to retrieve more blocks of the resource.  Alternatively, the
2025	   client can compute a block size that is smaller than or equal to the
2026	   smallest block size among those specified in the Block2 Option of the
2027	   received responses.  If the client relies on this latter approach,
2028	   then the Block2 Option of follow-up group requests in the same block-
2029	   wise transfer specifies the block size computed by the client.

2031	   A solution for group/multicast block-wise transfer using the Block1
2032	   Option is not specified in [RFC7959] nor in the present document.
2033	   Such a solution would be useful for group FETCH/PUT/POST/PATCH/iPATCH
2034	   requests, to efficiently distribute a large request payload as
2035	   multiple blocks to all members of a CoAP group.  Multicast usage of
2036	   Block1 is non-trivial due to potential message loss (leading to
2037	   missing blocks or missing confirmations), and potential diverging
2038	   block size preferences of different members of the CoAP group.

2040	   [RFC9177] specifies a specialized alternative method for CoAP block-
2041	   wise transfer.  It specifies that "servers MUST ignore multicast
2042	   requests that contain the Q-Block2 Option".

2044	3.9.  Transport Protocols

2046	   In this document, UDP (both over IPv4 and IPv6) is considered as the
2047	   default transport protocol for CoAP group communication.

2049	3.9.1.  UDP/IPv6 Multicast Transport

2051	   CoAP group communication can use UDP over IPv6 as a transport
2052	   protocol, provided that IPv6 multicast is enabled.  IPv6 multicast
2053	   MAY be supported in a network only for a limited scope.  For example,
2054	   Section 3.10.2 describes the potential limited support of RPL for
2055	   multicast, depending on how the protocol is configured.

2057	   For a CoAP server node that supports resource discovery as defined in
2058	   Section 2.4 of [RFC7252], the default port number 5683 MUST be
2059	   supported as per Sections 7.1 and 12.8 of [RFC7252] for the "All CoAP
2060	   Nodes" multicast CoAP group.  An IPv6 CoAP server SHOULD support the
2061	   "All CoAP Nodes" multicast CoAP group with at least link-local (2),
2062	   admin-local (4), and site-local (5) scopes.  An IPv6 CoAP server on a
2063	   6LoWPAN node (see Section 3.9.2) SHOULD also support the realm-local
2064	   (3) scope.

2066	   Note that a client sending an IPv6 multicast CoAP message to a port
2067	   number that is not supported by the server will not receive an ICMPv6
2068	   Port Unreachable error message from that server, because the server
2069	   does not send it in this case, per Section 2.4 of [RFC4443].

2071	3.9.2.  UDP/IPv6 Multicast Transport over 6LoWPAN

2073	   In 6LoWPAN [RFC4944] [RFC6282] networks, an IPv6 packet (up to 1280
2074	   bytes) may be fragmented into multiple 6LoWPAN fragments, each
2075	   fragment small enough to be carried over an IEEE 802.15.4 MAC frame
2076	   (up to 127 bytes).

2078	   These 6LoWPAN fragments are exchanged between 6LoWPAN nodes,
2079	   potentially involving 6LoWPAN routers operating in a multi-hop
2080	   network topology.  Although 6LoWPAN multicast routing protocols
2081	   usually define mechanisms to compensate for the loss of transmitted
2082	   fragments (e.g., using link-layer unicast acknowledgements, or
2083	   repeated link-layer broadcast transmissions as in MPL -- see
2084	   Section 3.10.3) a fragment may still be lost in transit.  The loss of
2085	   a single fragment implies the loss of the entire IPv6 packet, because
2086	   the reassembly back into IPv6 packet will fail in that case.  Also,
2087	   if this fragment loss causes the application-layer retransmission of
2088	   the entire multi-fragment IPv6 packet, it may happen that much of the
2089	   same data is transmitted yet again over the constrained network.

2091	   For this reason, the performance in terms of packet loss and
2092	   throughput of using larger, multi-fragment multicast IPv6 packets is
2093	   on average worse than the performance of smaller, single-fragment
2094	   IPv6 multicast packets.  So it is recommended to design application
2095	   payloads for group communication sufficiently small: a CoAP request
2096	   sent over multicast over a 6LoWPAN network interface SHOULD fit in a
2097	   single IEEE 802.15.4 MAC frame, if possible.

2099	   On 6LoWPAN networks, multicast CoAP groups can be defined with realm-
2100	   local scope [RFC7346].  Such a realm-local CoAP group is restricted
2101	   to the local 6LoWPAN network/subnet.  In other words, a multicast
2102	   request to that CoAP group does not propagate beyond the 6LoWPAN
2103	   network segment where the request originated.  For example, a
2104	   multicast discovery request can be sent to the realm-local "All CoAP
2105	   Nodes" IPv6 multicast CoAP group (see Section 3.9.1) in order to
2106	   discover only CoAP servers on the local 6LoWPAN network.

2108	3.9.3.  UDP/IPv4 Multicast Transport

2110	   CoAP group communication can use UDP over IPv4 as a transport
2111	   protocol, provided that IPv4 multicast is enabled.  For a CoAP server
2112	   node that supports resource discovery as defined in Section 2.4 of
2113	   [RFC7252], the default port number 5683 MUST be supported as per
2114	   Sections 7.1 and 12.8 of [RFC7252], for the "All CoAP Nodes" IPv4
2115	   multicast CoAP group.

2117	   Note that a client sending an IPv4 multicast CoAP message to a port
2118	   number that is not supported by the server will not receive an ICMP
2119	   Port Unreachable error message from that server, because the server
2120	   does not send it in this case, per Section 3.2.2 of [RFC1122].

2122	3.9.4.  TCP, TLS, and WebSockets

2124	   CoAP over TCP, TLS, and WebSockets is defined in [RFC8323].  Although
2125	   it supports unicast only, it can be employed as a transport for CoAP
2126	   group communication in situations where unicast is used, such as
2127	   exchanging messages with a proxy and completing block-wise transfers.
2128	   In particular:

2130	   *  A suitable cross-proxy can be set up, such that it receives a
2131	      unicast CoAP group request over TCP/TLS/WebSockets, and then
2132	      forwards the request to the servers in the group over UDP/IP
2133	      multicast (see Section 3.5).  The discovery of such a proxy can
2134	      rely on means defined in [I-D.ietf-core-transport-indication].

2136	   *  [RFC8323] can be employed to complete block-wise transfers for
2137	      CoAP group communication, with the limitations discussed in
2138	      Section 3.8.

2140	      That is, after the first group request including the Block2 Option
2141	      and sent over UDP, the following unicast CoAP requests targeting
2142	      individual servers to retrieve further blocks may be sent over TCP
2143	      or WebSockets, possibly protected with TLS.

2145	      This requires the individually addressed servers to be reachable
2146	      via a suitable cross-proxy or to also support CoAP over TCP/TLS/
2147	      WebSockets for the targeted resource.  While those transports do
2148	      not support multicast, it is possible to rely on multicast for
2149	      discovering that a server has those transports available and that
2150	      they allow accessing the targeted resource, possibly with block-
2151	      wise transfer used for random access to blocks within the resource
2152	      representation.  Such discovering can rely on means defined in
2153	      [I-D.ietf-core-transport-indication].

2155	3.9.5.  Other Transports

2157	   CoAP group communication may be used over transports other than UDP/
2158	   IP multicast.  For example broadcast, non-UDP multicast, geocast,
2159	   serial unicast, etc.  In such cases the particular considerations for
2160	   UDP/IP multicast in this document may need to be applied to that
2161	   particular transport.

2163	3.10.  Interworking with Other Protocols

2165	3.10.1.  MLDv2 and IGMPv3

2167	   A CoAP node that is an IP host (i.e., not an IP router) may be
2168	   unaware of the specific IP multicast routing/forwarding protocol
2169	   being used in its network.  When such a node needs to join a specific
2170	   (CoAP) multicast group, the application process would typically
2171	   subscribe to the particular IP multicast group via an API method of
2172	   the IP stack on the node.  Then the IP stack would execute a
2173	   particular (e.g., default) method to communicate its subscription to
2174	   on-link IP (multicast) routers.

2176	   The Multicast Listener Discovery Version 2 (MLDv2) protocol [RFC9777]
2177	   is the standard IPv6 method to communicate multicast subscriptions,
2178	   when other methods are not defined.  The CoAP server nodes then act
2179	   in the role of MLDv2 Multicast Address Listener.  MLDv2 uses link-
2180	   local communication between Listeners and IP multicast routers.
2181	   Constrained IPv6 networks such as ones implementing either RPL (see
2182	   Section 3.10.2) or MPL (see Section 3.10.3) typically do not support
2183	   MLDv2 as they have their own mechanisms defined for subscribing to
2184	   multicast groups.

2186	   The Internet Group Management Protocol Version 3 (IGMPv3) protocol
2187	   [RFC9776] is the standard IPv4 method to signal subscriptions to
2188	   multicast group.  This SHOULD be used by members of a CoAP group to
2189	   subscribe to its multicast IPv4 address on IPv4 networks unless
2190	   another method is defined for the network interface/technology used.

2192	   The guidelines from [RFC6636] on the tuning of MLDv2 and IGMPv3 for
2193	   mobile and wireless networks may be useful when implementing MLDv2
2194	   and IGMPv3 in constrained networks.

2196	3.10.2.  RPL

2198	   IPv6 Routing Protocol for Low-Power and Lossy Networks (RPL)
2199	   [RFC6550] is an IPv6 based routing protocol suitable for low-power,
2200	   lossy networks (LLNs).  In such a context, CoAP is often used as an
2201	   application protocol.

2203	   If only RPL is used in a network for routing and its optional
2204	   multicast support is disabled, there will be no IP multicast routing
2205	   available.  Any IPv6 multicast packets in this case will not
2206	   propagate beyond a single hop (to direct neighbors in the LLN).  This
2207	   implies that any CoAP group request will be delivered to link-local
2208	   nodes only, for any scope value >= 2 used in the IPv6 destination
2209	   address.

2211	   RPL supports (see Section 12 of [RFC6550]) advertisement of IP
2212	   multicast destinations using Destination Advertisement Object (DAO)
2213	   messages and subsequent routing of multicast IPv6 packets based on
2214	   this.  It requires the RPL mode of operation to be set to a mode that
2215	   supports multicast, for example 3 (Storing mode with multicast
2216	   support) or 5 (Non-Storing Mode of Operation with ingress replication
2217	   multicast support) defined in [RFC9685].

2219	   In mode 3, RPL DAO can be used by an RPL/CoAP node that is either an
2220	   RPL router or RPL Leaf Node, to advertise its CoAP group membership
2221	   to parent RPL routers.  Then, RPL will route any IP multicast CoAP
2222	   requests over multiple hops to those CoAP servers that are members of
2223	   the CoAP group.

2225	   The same DAO mechanism can be used by an edge router such as a
2226	   6LoWPAN Border Router (6LBR, see [RFC6775]), in order to learn CoAP
2227	   group membership information of the entire RPL network, in case the
2228	   edge router is also the root of the RPL Destination-Oriented Directed
2229	   Acyclic Graph (DODAG).  This is useful because the edge router learns
2230	   which IP multicast traffic it needs to selectively pass through from
2231	   the backbone network into the LLN subnet.  In LLNs, such ingress
2232	   filtering helps to avoid congestion of the resource-constrained
2233	   network segment, due to IP multicast traffic from the high-speed
2234	   backbone IP network.

2236	   See [RFC9685] for more details on RPL Mode 5, and on subscribing to
2237	   IPv6 multicast groups using 6LoWPAN Neighbor Discovery (ND) and the
2238	   Extended Address Registration Option (EARO) in RPL networks.

2240	3.10.3.  MPL

2242	   The Multicast Protocol for Low-Power and Lossy Networks (MPL)
2243	   [RFC7731] can be used for propagation of IPv6 multicast packets
2244	   throughout a defined network domain, over multiple hops.  MPL is
2245	   designed to work in LLNs and can operate alone or in combination with
2246	   RPL.  The protocol involves a predefined group of MPL Forwarders to
2247	   collectively distribute IPv6 multicast packets throughout their MPL
2248	   Domain.  An MPL Forwarder may be associated with multiple MPL Domains
2249	   at the same time.  Non-Forwarders will receive IPv6 multicast packets
2250	   from one or more of their neighboring Forwarders.  Therefore, MPL can
2251	   be used to propagate a CoAP multicast group request to all members of
2252	   the CoAP group.

2254	   However, a CoAP multicast request to a CoAP group that originated
2255	   outside of the MPL Domain will not be propagated by MPL -- unless an
2256	   MPL Forwarder is explicitly configured as an ingress point that
2257	   introduces external multicast packets into the MPL Domain.  Such an
2258	   ingress point could be located on an edge router (e.g., 6LBR).
2259	   Methods to configure which IPv6 multicast groups are to be propagated
2260	   into the MPL Domain could be:

2262	   *  Manual configuration on each ingress MPL Forwarder.

2264	   *  MLDv2 protocol [RFC9777], which works only in case all CoAP
2265	      servers joining a CoAP group are in link-local communication range
2266	      of an ingress MPL Forwarder.

2268	   *  Using 6LoWPAN Neighbor Discovery (ND) and Extended Address
2269	      Registration Option (EARO) as described in [RFC9685], in a network
2270	      that supports 6LoWPAN-ND, RPL, and MPL.

2272	   *  A new/custom protocol to register multicast groups at an ingress
2273	      MPL Forwarder.  This could be for example a CoAP-based protocol
2274	      offering multicast group subscription features similar to MLDv2.

2276	   For security and performance reasons, other filtering criteria may
2277	   also be defined at an ingress MPL Forwarder.  See Section 6.6 for
2278	   more details.

2280	4.  Unsecured Group Communication (NoSec Mode)

2282	   CoAP group communication can operate in CoAP NoSec (No Security)
2283	   mode, without using application-layer and transport-layer security
2284	   mechanisms.  The NoSec mode uses the "coap" scheme, and is defined in
2285	   Section 9 of [RFC7252].

2287	   The NoSec mode does not require and does not make use of a security
2288	   group.  Indications that endpoints can use the NoSec mode MUST NOT
2289	   rely on setting up and advertising a pseudo security group with name
2290	   "NoSec" or any of its lowercase/uppercase combinations.

2292	   A CoAP server in NoSec mode MUST NOT be accessible through the public
2293	   Internet.  It is NOT RECOMMENDED to use CoAP group communication in
2294	   NoSec mode.

2296	   The possible, exceptional use of the NoSec mode ought to be limited
2297	   to specific, well-defined "unsecured steps" that unquestionably do
2298	   not require security or are not able to attain it, e.g., early
2299	   discovery of devices and resources (see Section 6.1).

2301	   Before possibly and exceptionally using the NoSec mode in such
2302	   circumstances, the security implications in Section 6.1 must be very
2303	   well considered and understood, especially as to the risk and impact
2304	   of amplification attacks (see Section 6.3).  Consistent with such
2305	   security implications, the use of the NoSec mode SHOULD still be
2306	   avoided whenever possible.

2308	5.  Secured Group Communication using Group OSCORE

2310	   This section discusses how CoAP group communication can be secured.
2311	   In particular, Section 5.1 describes how the Group OSCORE security
2312	   protocol [I-D.ietf-core-oscore-groupcomm] can be used to protect
2313	   messages exchanged in a CoAP group, while Section 5.2 provides
2314	   guidance on required maintenance operations for OSCORE groups used as
2315	   security groups.

2317	5.1.  Group OSCORE

2319	   The application-layer protocol Object Security for Constrained
2320	   RESTful Environments (OSCORE) [RFC8613] provides end-to-end
2321	   encryption, integrity, and replay protection of CoAP messages
2322	   exchanged between two CoAP endpoints.  These can act both as CoAP
2323	   Client as well as CoAP Server, and share an OSCORE Security Context
2324	   used to protect and verify exchanged messages.  The use of OSCORE
2325	   does not affect the URI scheme and OSCORE can therefore be used with
2326	   any URI scheme defined for CoAP.

2328	   OSCORE uses COSE [RFC9052][RFC9053] to perform encryption operations
2329	   and protect a CoAP message carried in a COSE object, by using an
2330	   Authenticated Encryption with Associated Data (AEAD) algorithm.  In
2331	   particular, OSCORE takes as input an unprotected CoAP message and
2332	   transforms it into a protected CoAP message transporting the COSE
2333	   object.

2335	   OSCORE makes it possible to selectively protect different parts of a
2336	   CoAP message in different ways, while still allowing intermediaries
2337	   (e.g., CoAP proxies) to perform their intended functionalities.  That
2338	   is, some message parts are encrypted and integrity protected; other
2339	   parts are only integrity protected to be accessible to, but not
2340	   modifiable by, proxies; and some parts are kept as plain content to
2341	   be both accessible to and modifiable by proxies.  Section 4 of
2342	   [RFC8613] defines in detail if and what protection is applied to the
2343	   CoAP header fields, payload, and CoAP options specified in the
2344	   unprotected message, in accordance with their class for OSCORE.

2346	   Group OSCORE [I-D.ietf-core-oscore-groupcomm] builds on OSCORE, and
2347	   provides end-to-end security of CoAP messages exchanged between
2348	   members of an OSCORE group, while fulfilling the same security
2349	   requirements.

2351	   In particular, Group OSCORE protects CoAP group requests sent by a
2352	   CoAP client, e.g., over UDP/IP multicast, as well as multiple
2353	   corresponding CoAP responses sent as (IP) unicast by different CoAP
2354	   servers.  However, the same security material can also be used to
2355	   protect CoAP requests sent over (IP) unicast to a single CoAP server
2356	   in the OSCORE group, as well as the corresponding responses.

2358	   Group OSCORE ensures source authentication of all messages exchanged
2359	   within the OSCORE group.  That is, the recipient of a CoAP message
2360	   protected with Group OSCORE is able to securely verify whether the
2361	   CoAP endpoint that has generated and sent the message is indeed the
2362	   alleged one.  This is achieved by means of two possible methods.

2364	   The first method, called group mode, relies on digital signatures.
2365	   That is, sender devices sign their outgoing messages using their own
2366	   private key, and embed the signature in the protected CoAP message.

2368	   The second method, called pairwise mode, relies on a symmetric key,
2369	   which is derived from a pairwise shared secret computed from the
2370	   asymmetric keys of the message sender and recipient.  This method is
2371	   intended for one-to-one messages sent in the security group, such as
2372	   all responses individually sent by servers, as well as requests
2373	   addressed to an individual server.

2375	   A Group Manager is responsible for managing one or multiple OSCORE
2376	   groups.  In particular, the Group Manager acts as repository of the
2377	   security group members' authentication credentials including the
2378	   corresponding public keys; manages, renews, and provides security
2379	   material in the security group; and handles the join process of new
2380	   members in the security group.

2382	   As defined in [I-D.ietf-ace-oscore-gm-admin], an administrator entity
2383	   can interact with the Group Manager to create OSCORE groups and
2384	   specify their configuration (see Section 2.2.2).  During the lifetime
2385	   of the OSCORE group, the administrator can further interact with the
2386	   Group Manager, in order to possibly update the configuration of the
2387	   security group and eventually delete the group.

2389	   As recommended in [I-D.ietf-core-oscore-groupcomm], a CoAP endpoint
2390	   can join an OSCORE group by using the method described in
2391	   [I-D.ietf-ace-key-groupcomm-oscore] and based on the ACE framework
2392	   for Authentication and Authorization in constrained environments
2393	   [RFC9200].

2395	   A CoAP endpoint can discover OSCORE groups and retrieve information
2396	   to join them through their respective Group Managers by using the
2397	   method described in [I-D.tiloca-core-oscore-discovery] and based on
2398	   the CoRE Resource Directory [RFC9176].

2400	   If security is required, CoAP group communication as described in
2401	   this specification MUST use Group OSCORE.  In particular, a CoAP
2402	   group as defined in Section 2.1 and using secure group communication
2403	   is associated with an OSCORE security group, which includes:

2405	   *  All members of the CoAP group, i.e., the CoAP endpoints that are
2406	      configured to receive CoAP group messages sent to the particular
2407	      CoAP group and -- in case of IP multicast transport -- that are
2408	      listening to the group's multicast IP address on the group's UDP
2409	      port.

2411	   *  All further CoAP endpoints configured only as CoAP clients that
2412	      may send CoAP group requests to the CoAP group.

2414	5.2.  Secure Group Maintenance

2416	   As part of group maintenance operations (see Section 2.2.4),
2417	   additional key management operations are required for an OSCORE
2418	   group, also depending on the security requirements of the application
2419	   (see Section 6.2.1).  Specifically:

2421	   *  Adding new members to a CoAP group, or enabling new client-only
2422	      endpoints to interact with that group, requires also that each of
2423	      such members/endpoints join the corresponding OSCORE group.  When
2424	      this happens, they are securely provided with the security
2425	      material to use in that OSCORE group.

2427	      Applications may need backward security.  That is, they may
2428	      require that, after having joined an OSCORE group, a new member of
2429	      that group cannot read the cleartext of messages exchanged in the
2430	      group prior to its joining, even if it has recorded them.

2432	      In such a case, new security material to use in the OSCORE group
2433	      has first to be generated and distributed to the current members
2434	      of that group, before new endpoints are also provided with that
2435	      new security material upon their joining.

2437	   *  Removing members from a CoAP group or stopping client-only
2438	      endpoints from interacting with that group requires removing such
2439	      members/endpoints from the corresponding OSCORE group.  To this
2440	      end, new security material is generated and securely distributed
2441	      only to the remaining members of the OSCORE group, together with
2442	      the list of former members removed from that group.

2444	      This ensures forward security in the OSCORE group.  That is, it
2445	      ensures that only the members intended to remain in the OSCORE
2446	      group are able to continue participating in the secure
2447	      communications within that group, while the evicted ones are not
2448	      able to participate after the distribution and installation of the
2449	      new security material.

2451	      Also, this ensures that the members intended to remain in the
2452	      OSCORE group are able to confidently verify the group membership
2453	      of other sender nodes, when receiving protected messages in the
2454	      OSCORE group after the distribution and installation of the new
2455	      security material (see Section 12.2 of
2456	      [I-D.ietf-core-oscore-groupcomm]).

2458	   The key management operations mentioned above are entrusted to the
2459	   Group Manager responsible for the OSCORE group
2460	   [I-D.ietf-core-oscore-groupcomm].  For example, they can be performed
2461	   as defined in [I-D.ietf-ace-key-groupcomm-oscore].

2463	5.3.  Proxy Security

2465	   Different solutions may be selected for secure group communication
2466	   via a proxy depending on proxy type, use case, and deployment
2467	   requirements.  In this section the options based on Group OSCORE are
2468	   listed.

2470	   For a client performing a group communication request via a forward-
2471	   proxy, end-to-end security SHOULD be implemented.  The client then
2472	   creates a group request protected with Group OSCORE and unicasts this
2473	   to the proxy.  The proxy adapts the request from a forward-proxy
2474	   request to a regular request and multicasts this adapted request to
2475	   the indicated CoAP group.  During the adaptation, the security
2476	   provided by Group OSCORE persists, in either case of using the group
2477	   mode or using the pairwise mode.  The first leg of communication from
2478	   client to proxy can optionally be further protected, e.g., by using
2479	   (D)TLS and/or OSCORE.

2481	   For a client performing a group communication request via a reverse-
2482	   proxy, either end-to-end-security or hop-by-hop security can be
2483	   implemented.  The case of end-to-end security is the same as for the
2484	   forward-proxy case.

2486	   The case of hop-by-hop security is only possible if the proxy is
2487	   considered trustworthy in sending a group request on behalf of
2488	   clients and it is configured as a member of the OSCORE security
2489	   group(s) that it needs to access.  As further clarified below, the
2490	   first communication leg between the client and the proxy, on one
2491	   hand, and the second communication leg between the proxy and the
2492	   servers, on the other hand, are protected individually and
2493	   independently of one another.

2495	   The first leg of communication between client and proxy is then
2496	   protected with a security method for CoAP unicast, such as (D)TLS,
2497	   OSCORE, or a combination of such methods.  The second leg between
2498	   proxy and servers is protected using Group OSCORE.  This can be
2499	   useful in applications where for example the origin client does not
2500	   implement Group OSCORE, or the group management operations are
2501	   confined to a particular network domain and the client is outside
2502	   this domain.

2504	   The realization of proxy specified in [I-D.ietf-core-groupcomm-proxy]
2505	   provides further details on using Group OSCORE for all the above
2506	   cases.

2508	6.  Security Considerations

2510	   This section provides security considerations for CoAP group
2511	   communication, in general and in particular when using IP multicast.

2513	6.1.  CoAP NoSec Mode

2515	   CoAP group communication, if not protected, is vulnerable to all the
2516	   attacks mentioned in Section 11 of [RFC7252] for IP multicast.
2517	   Moreover, as also discussed in
2518	   [I-D.irtf-t2trg-amplification-attacks], the NoSec mode is susceptible
2519	   to source IP address spoofing, hence amplification attacks are
2520	   especially feasible and greatly effective, since a single request can
2521	   result in multiple responses from multiple servers (see Section 6.3).

2523	   For these reasons and in order to prevent proliferation of high-
2524	   volume amplification attacks as further discussed in Section 6.3, it
2525	   is NOT RECOMMENDED to use CoAP group communication in NoSec mode.
2526	   The requirement in Section 4 on publically accessible CoAP servers
2527	   also aims to prevent amplification attacks.

2529	   Exceptionally, and only after the security implications have been
2530	   very well considered and understood, some applications may rely on a
2531	   limited use of the NoSec mode, when performing specific, well-defined
2532	   "unsecured steps" (see Section 4).

2534	   For example, early link-local discovery of devices and resources as
2535	   part of an onboarding protocol is a typical use case where the NoSec
2536	   mode or equivalent unsecured mode is used.  In such a discovery step,
2537	   there may be a querying device that needs to discover nearby devices
2538	   capable of helping it with the network onboarding process.  But there
2539	   are no mutual security relationships configured on the querying
2540	   device and its neighbor devices at the time it performs the early
2541	   discovery.  These relationships are configured later in the process
2542	   based on secure device identities.  Alternatively, a new device to be
2543	   onboarded may wait for advertisements of nearby devices able to help
2544	   it do the network onboarding process.  Also in this case, these
2545	   messages cannot be secured initially because the new device does not
2546	   yet have any security relationship configured with devices that are
2547	   already a member of the network.  See
2548	   [I-D.ietf-anima-constrained-voucher] for an example of an onboarding
2549	   protocol that can use CoAP multicast for early link-local discovery.

2551	   As a further example, the NoSec mode may be useful and acceptable in
2552	   simple read-only applications that do not involve, impact, or
2553	   disclose sensitive data and personal information.  These include,
2554	   e.g., read-only temperature sensors deployed in a public gathering
2555	   environment, where unauthenticated clients retrieve temperature
2556	   values but do not use this data to control actuators or to perform
2557	   other automated actions.

2559	   In the exception cases where NoSec mode is used, high-volume and
2560	   harmful amplifications need to be prevented through appropriate and
2561	   conservative device configurations: taking the early discovery query
2562	   as an example, only a few CoAP servers are expected to be configured
2563	   for responding to multicast group requests that are sent for
2564	   discovery.  And the time window during which such unsecured requests
2565	   are accepted, can be limited as well.  Furthermore, the scope is also
2566	   limited: only link-local requests are accepted.

2568	   Except for the class of applications discussed above (in which
2569	   unsecured communication is required or is not harmful for specific,
2570	   well-defined "unsecured steps"), CoAP group communication MUST NOT be
2571	   used in NoSec mode.

2573	6.2.  Group OSCORE

2575	   Group OSCORE provides end-to-end application-level security.  This
2576	   has many desirable properties, including maintaining security
2577	   assurances while forwarding traffic through intermediaries (proxies).
2578	   Application-level security also tends to more cleanly separate
2579	   security from the specific dynamics of security group membership
2580	   (e.g., the problem of distributing security keys across large groups
2581	   with many members that come and go).

2583	   CoAP group communication MUST be protected by using Group OSCORE as
2584	   specified in [I-D.ietf-core-oscore-groupcomm], with the possible
2585	   exception of specific, well-defined "unsecured steps" (see
2586	   Section 4).

2588	   The security considerations from Section 14 of
2589	   [I-D.ietf-core-oscore-groupcomm] hold for this specification.

2591	6.2.1.  Group Key Management

2593	   Group rekeying, that is, a key management scheme for secure
2594	   revocation and renewal of group security material, is required to be
2595	   adopted in OSCORE groups.  The key management scheme has to preserve
2596	   forward security in the OSCORE group, as well as backward security if
2597	   this is required by the application (see Section 5.2).  In
2598	   particular, the key management scheme MUST comply with the functional
2599	   steps defined in Section 12.2 of [I-D.ietf-core-oscore-groupcomm].

2601	   Even though security group policies vary depending on the specific
2602	   applications and their security requirements, they SHOULD also take
2603	   into account:

2605	   *  The expected amount of time that the key management scheme
2606	      requires to rekey the OSCORE group.

2608	   *  The expected frequency of group membership changes in the OSCORE
2609	      group (i.e., nodes joining and leaving).

2611	   *  The identity of the specific CoAP endpoints as they join and leave
2612	      the OSCORE group.

2614	   In particular, it can be desirable to not rekey the OSCORE group upon
2615	   every single membership change, in case group members frequently join
2616	   and leave, and at the same time a single group rekeying instance
2617	   takes a non-negligible time to complete.

2619	   In such a case, the Group Manager can cautiously consider to rekey
2620	   the OSCORE group, e.g., after a minimum number of nodes has joined or
2621	   left the group within a pre-defined time interval, or according to
2622	   communication patterns with predictable time intervals of network
2623	   inactivity.  This would prevent a slow rekeying scheme that is
2624	   frequently invoked from paralyzing communications in the OSCORE
2625	   group.

2627	   At the same time, the security implications of delaying the rekeying
2628	   process have to be carefully considered and understood before
2629	   employing such security group policies.

2631	   In fact, this comes at the cost of not continuously preserving
2632	   backward and forward security, since group rekeying might not occur
2633	   upon every single change in the OSCORE group membership.  That is,
2634	   recently joined nodes would have access to the security material used
2635	   prior to their joining, and thus be able to access past group
2636	   communications protected with that security material.  Similarly,
2637	   until the OSCORE group is rekeyed, recently left nodes would retain
2638	   access to group communications protected with the existing security
2639	   material.

2641	6.2.2.  Source Authentication

2643	   Both the group mode and the pairwise mode of Group OSCORE ensure
2644	   source authentication of messages exchanged by CoAP endpoints through
2645	   CoAP group communication.

2647	   To this end, outgoing messages are either signed by the message
2648	   sender endpoint with its own private key (group mode), or protected
2649	   with a symmetric key, which is in turn derived using the asymmetric
2650	   keys of the message sender and recipient (pairwise mode).

2652	   Thus, both modes allow a recipient CoAP endpoint to verify that a
2653	   message has actually been originated and sent by a specific and
2654	   identified CoAP endpoint as a member of the OSCORE group.

2656	   Note that Group OSCORE does not protect the addressing information
2657	   about the CoAP endpoint that has sent the message, e.g., the source
2658	   IP address and port number used when sending the message.  In
2659	   particular, Group OSCORE does not provide authentication of such
2660	   source addressing information.

2662	6.2.3.  Countering Attacks

2664	   As discussed below, Group OSCORE addresses a number of security
2665	   attacks mentioned in Section 11 of [RFC7252], with particular
2666	   reference to their execution over IP multicast.

2668	   *  Since Group OSCORE provides end-to-end confidentiality and
2669	      integrity of request/response messages, proxies capable of group
2670	      communication cannot break message protection, and thus cannot act
2671	      as meddler-in-the-middle beyond their legitimate duties (see
2672	      Section 11.2 of [RFC7252]).  In fact, intermediaries such as
2673	      proxies are not assumed to have access to the OSCORE Security
2674	      Context used by OSCORE group members.  Also, with the notable
2675	      addition of signatures for the group mode, Group OSCORE protects
2676	      messages using the same procedure as OSCORE (see Sections 7 and 8
2677	      of [I-D.ietf-core-oscore-groupcomm]), and especially processes
2678	      CoAP options according to the same classification in U/I/E
2679	      classes.

2681	   *  Thanks to the handling of protected group requests on the server
2682	      side, Group OSCORE limits the feasibility and impact of
2683	      amplification attacks (see Section 11.3 of [RFC7252]).

2685	      Upon receiving a group request protected with Group OSCORE, a
2686	      server verifies whether the request is not a replay and has been
2687	      originated by the alleged CoAP endpoint in the OSCORE group.

2689	      In order to perform the latter check of source authentication, the
2690	      server either: i) verifies the signature included in the request
2691	      by using the public key of the client, when the request is
2692	      protected using the group mode (see Section 7.2 of
2693	      [I-D.ietf-core-oscore-groupcomm]); or ii) decrypts and verifies
2694	      the request by means of an additionally derived pairwise key
2695	      associated with the client, when the request is protected using
2696	      the pairwise mode (see Section 8.4 of
2697	      [I-D.ietf-core-oscore-groupcomm]).

2699	      As also discussed in Section 7 of
2700	      [I-D.ietf-core-oscore-groupcomm], it is recommended that, when
2701	      failing to decrypt and verify an incoming group request protected
2702	      with the group mode, a server does not send back any error message
2703	      in case any of the following holds: the server determines that the
2704	      request was indeed sent to the whole CoAP group (e.g., over IP
2705	      multicast); or the server is not able to determine it altogether.

2707	      With respect to amplification attacks, such a message processing
2708	      on the server limits an external adversary to being on-path and
2709	      leveraging an intercepted group request protected with Group
2710	      OSCORE, by altering the source address of the request to be the
2711	      one of the intended amplification victim.

2713	      Furthermore, the adversary needs to consider a group request that
2714	      specifically targets a resource for which the CoAP servers are
2715	      configured to respond.  While this can often be correctly inferred
2716	      from the application context, it is not explicit from the group
2717	      request itself, since Group OSCORE protects the Uri-Path and Uri-
2718	      Query CoAP Options conveying the respective components of the
2719	      target URI.

2721	      Amplification attacks are further discussed in Section 6.3,
2722	      together with available mitigations.

2724	   *  Group OSCORE limits the impact of attacks based on IP spoofing
2725	      over IP multicast (see Section 11.4 of [RFC7252]).  In fact,
2726	      requests and corresponding responses sent in the OSCORE group can
2727	      be correctly generated only by CoAP endpoints that are legitimate
2728	      members of the group.

2730	      Within an OSCORE group, the shared symmetric-key security material
2731	      strictly provides only group-level authentication.  However,
2732	      source authentication of messages is also ensured, both in the
2733	      group mode by means of signatures (see Sections 7.1 and 7.3 of
2734	      [I-D.ietf-core-oscore-groupcomm]) and in the pairwise mode by
2735	      using additionally derived pairwise keys (see Sections 8.3 and 8.5
2736	      of [I-D.ietf-core-oscore-groupcomm]).  Thus, recipient endpoints
2737	      can verify a message to have been originated and sent by the
2738	      alleged, identifiable CoAP endpoint in the OSCORE group.

2740	      The server may additionally rely on the Echo Option for CoAP
2741	      defined in [RFC9175], in order to verify the reachability of the
2742	      client sending a request from a particular IP address.  As
2743	      discussed in Section 6.3, this also helps mitigate amplification
2744	      attacks.

2746	      Note that using the Echo Option does not provide authentication of
2747	      source addressing information about the sender of a CoAP message.
2748	      Also, using the Echo Option in itself does not provide source
2749	      authentication of exchanged messages, which is achieved by means
2750	      of Group OSCORE (see Section 6.2.2).

2752	      Using the Echo Option together with Group OSCORE also allows a
2753	      CoAP server in the OSCORE group to verify the freshness of CoAP
2754	      requests received from other members in the group (see Section 9
2755	      of [I-D.ietf-core-oscore-groupcomm]), thereby verifying the
2756	      aliveness of CoAP clients sending those requests.

2758	   *  Group OSCORE does not require members of an OSCORE group to be
2759	      equipped with a good source of entropy for generating security
2760	      material (see Section 11.6 of [RFC7252]), and thus does not
2761	      contribute to create an entropy-related attack vector against such
2762	      (constrained) CoAP endpoints.  In particular, the symmetric keys
2763	      used for message encryption and decryption are derived through the
2764	      same HMAC-based HKDF scheme used for OSCORE (see Section 3.2 of
2765	      [RFC8613]).  Besides, the OSCORE Master Secret used in such
2766	      derivation is securely generated by the Group Manager responsible
2767	      for the OSCORE group and is securely provided to the CoAP
2768	      endpoints when they join the OSCORE group.

2770	   *  Group OSCORE prevents any single member of an OSCORE group from
2771	      being a target for subverting security in the whole group (see
2772	      Section 11.6 of [RFC7252]), even though all group members share
2773	      (and can derive) the same symmetric-key security material used in
2774	      the group.  In fact, source authentication is always ensured for
2775	      exchanged CoAP messages, as verifiable to be originated by the
2776	      alleged, identifiable sender in the OSCORE group.  This relies on
2777	      including a signature computed with a node's individual private
2778	      key (in the group mode), or on protecting messages with a pairwise
2779	      symmetric key, which is in turn derived from the asymmetric keys
2780	      of the sender and recipient CoAP endpoints (in the pairwise mode).

2782	6.3.  Risk of Amplification

2784	   Section 11.3 of [RFC7252] highlights that CoAP group requests may be
2785	   used for accidentally or deliberately performing Denial of Service
2786	   attacks, especially in the form of a high-volume amplification
2787	   attack, by using all the servers in the CoAP group as attack vectors.

2789	   In particular, an adversary can send a group request via IP multicast
2790	   to a CoAP group, spoofing the source IP address to be the one of a
2791	   designated victim (within the local network or on the Internet).

2793	   After receiving the group request, each of the servers in the group
2794	   may reply to the victim with a response that is likely larger in size
2795	   than the group request.  In terms of attack effectiveness, an
2796	   adversary sending a single group request may therefore achieve a
2797	   large amplification factor, i.e., a high ratio between the total size
2798	   of the responses sent to the attack victim and the size of the
2799	   corresponding group request.

2801	   When performing such an attack, the amplification factor would become
2802	   even larger if CoAP group communication is combined with resource
2803	   observation [RFC7641], as described in Section 3.7 of this document.
2804	   That is, a single group request conveying the Observe Option may
2805	   result in multiple notification responses from each of the responding
2806	   servers in the CoAP group, throughout the observation lifetime.

2808	   Further discussion and examples of amplification attacks using CoAP
2809	   are provided in [I-D.irtf-t2trg-amplification-attacks].

2811	   Consistent with the mitigations defined in Section 11.3 of [RFC7252],
2812	   a server in a CoAP group:

2814	   *  SHOULD limit the support for CoAP group requests only to the group
2815	      resources of the application group(s) using that CoAP group;

2817	   *  SHOULD NOT accept group requests that cannot be authenticated in
2818	      some way, i.e., for which it is not possible to securely verify
2819	      that they have been originated and sent by the alleged,
2820	      identifiable CoAP endpoint in the OSCORE group; and

2822	   *  SHOULD NOT provide large amplification factors through its
2823	      responses to a non-authenticated group request, possibly employing
2824	      CoAP block-wise transfers [RFC7959] to reduce the amount of
2825	      amplification provided.

2827	   Furthermore, when CoAP group communication is combined with resource
2828	   observation [RFC7641], a server in a CoAP group MUST strictly limit
2829	   the number of notifications it sends between receiving CoAP
2830	   Acknowledgements that confirm the actual interest of the client in
2831	   continuing the observation (see Section 7 of [RFC7641]).  That is,
2832	   any notifications sent in Non-confirmable messages MUST be
2833	   interspersed with Confirmable messages.  Note that an adversary may
2834	   still spoof the CoAP Acknowledgements, e.g., if it is on-path and can
2835	   read the Message ID values, or if the time when Confirmable messages
2836	   are sent by the server and their Message ID values are sufficiently
2837	   predictable.

2839	   Section 6.3.1 describes how amplification attacks can be mitigated by
2840	   using the Echo Option for CoAP defined in [RFC9175].

2842	   Evidently, it is especially easy to perform an amplification attack
2843	   when the NoSec mode is used (see Section 4).  Therefore, also in
2844	   order to prevent an easy proliferation of high-volume amplification
2845	   attacks, it is generally NOT RECOMMENDED to use CoAP group
2846	   communication in NoSec mode (see Section 6.1).

2848	   Besides building on very well understood security implications and
2849	   being limited to specific, well-defined "unsecured steps" (see
2850	   Section 4), possible exceptions to the above rule should also be
2851	   limited to use cases where accesses to a group resource have a
2852	   specific, narrow, and well understood scope, and where only a few
2853	   CoAP servers (or, ideally, only one) would possibly respond to a
2854	   group request.

2856	   A relevant exceptional example is a CoAP client performing the
2857	   discovery of hosts such as a Group Manager or a Resource Directory
2858	   [RFC9176], by probing for them through a group request sent to the
2859	   CoAP group.  This early, unprotected step is relevant for a CoAP
2860	   client that does not know the address of such hosts in advance and
2861	   that does not yet have configured a mutual security relationship with
2862	   them.  In this kind of deployments, such a discovery procedure does
2863	   not result in a considerable and harmful amplification, since only
2864	   the few CoAP servers that are the object of discovery are going to
2865	   respond to the group request targeting that specific resource.  In
2866	   particular, those hosts can be the only CoAP servers in that specific
2867	   CoAP group (hence listening for group requests sent to that group)
2868	   and/or the only CoAP servers explicitly configured to respond to
2869	   group requests targeting specific group resources.

2871	   With the exception of such particular use cases, group communications
2872	   MUST be secured using Group OSCORE [I-D.ietf-core-oscore-groupcomm],
2873	   see Section 5.  As discussed in Section 6.2.3, this limits the
2874	   feasibility and impact of amplification attacks.

2876	6.3.1.  Mitigation with the Echo Option

2878	   As a further mitigation against amplification attacks, a server can
2879	   also rely on the Echo Option for CoAP [RFC9175], including it in a
2880	   response to a group request.  By doing so, the server can verify
2881	   whether the alleged sender of the group request is indeed reachable
2882	   at the claimed source address of the group request.

2884	   In particular, Section 2.6 of [RFC9175] updates Section 11.3 of
2885	   [RFC7252] as normatively recommending that CoAP servers use the Echo
2886	   Option to mitigate amplification attacks, by replying to
2887	   unauthenticated CoAP clients with a 4.01 (Unauthorized) response
2888	   including an Echo Option.

2890	   Consistent with the above, a server in a CoAP group SHOULD mitigate
2891	   potential amplification attacks, by replying to unauthenticated CoAP
2892	   clients with a 4.01 (Unauthorized) response including an Echo Option,
2893	   as described in Section 2.3 of [RFC9175] and in item 3 in Section 2.4
2894	   of [RFC9175].

2896	   In the limited, exceptional cases where the NoSec mode is used (see
2897	   Section 4), relying on the Echo Option makes it possible to mitigate
2898	   amplification attacks launched by an off-path adversary.

2900	   When using secure communications protected with Group OSCORE, source
2901	   authentication of messages is ensured.  Hence, upon receiving a valid
2902	   group request, a server always authenticates the CoAP client that has
2903	   sent the request.

2905	   Nevertheless, also when using Group OSCORE, a server in a CoAP group
2906	   SHOULD mitigate potential amplification attacks by using the Echo
2907	   Option.  In particular, the server does so after having successfully
2908	   decrypted and verified an incoming group request by using an OSCORE
2909	   Recipient Context that is not associated with a validated network
2910	   address, or is associated with a validated network address different
2911	   from the source address of the present group request.

2913	   The server uses the Echo Option as specified in Section 2.3 of
2914	   [RFC9175] and in item 3 in Section 2.4 of [RFC9175].  In particular,
2915	   the 4.01 (Unauthorized) response including the Echo Option is
2916	   protected with Group OSCORE and MUST be an inner option (i.e., it is
2917	   also protected by means of Group OSCORE).

2919	   If the server receives a new request conveying the Echo Option and
2920	   recognizes the stored option value as associated with the source
2921	   address of the present request, then the server associates that
2922	   source address with the OSCORE Recipient Context used to process the
2923	   request, after having successfully decrypted and verified it with
2924	   Group OSCORE.

2926	   By doing so, the server can verify whether the alleged sender of the
2927	   group request (i.e., the CoAP client associated with a certain
2928	   authentication credential including the corresponding public key) is
2929	   indeed reachable at the claimed source address of the group request,
2930	   especially if such an address differs from the one used in previous
2931	   group requests from the same (authenticated) device.

2933	   Note that the above is achieved also when the server uses the Echo
2934	   Option due to other reasons, when running the challenge-response
2935	   method defined in Section 9 of [I-D.ietf-core-oscore-groupcomm].

2937	   When using Group OSCORE, relying on the Echo Option makes it possible
2938	   to mitigate amplification attacks launched by an external on-path
2939	   adversary (see also Section 6.2.3) or by an internal off-path
2940	   adversary.  Instead, it is not effective against attacks launched by
2941	   an internal on-path adversary.

2943	   Note that an internal adversary, being a member of the security
2944	   group, considerably exposes itself in an identifiable and accountable
2945	   way, due to the source authentication of the protected requests that
2946	   it sends.  This raises the chances that such an adversary is detected
2947	   and consequently evicted from the security group, i.e., through group
2948	   rekeying (see Section 6.2.1).

2950	   Although CoAP responses including the Echo Option may still result in
2951	   amplification, this is limited in volume compared to when all servers
2952	   in a CoAP group reply with larger, full responses.

2954	6.4.  Replay of Group Requests

2956	   After a client has sent a group request over IP multicast, an
2957	   adversary might capture the group request to be re-injected in the
2958	   group as a replay to the server nodes.  In particular:

2960	   *  If the adversary re-injects the group request before the client
2961	      has freed up the corresponding Token value (see Section 3.1.5),
2962	      the client might receive additional responses from one or more of
2963	      the servers in the group.

2965	      Due to the group request being Non-confirmable and thus not
2966	      eliciting Acknowledgement messages, the client might not be able
2967	      to notice the attack, or to distinguish the responses that a
2968	      particular server has sent as reply to the original group request
2969	      (if any) or to the replayed group request.

2971	   *  If the adversary re-injects the group request after the client has
2972	      freed up the corresponding Token value, the client would not have
2973	      anymore a valid, active request matching with responses that the
2974	      servers sent to the replayed group request.

2976	   It follows that, in either case, this replay attack would not
2977	   accomplish anything on the client, although it does effectively
2978	   target the servers in the group that do not implement the optional
2979	   Message ID based deduplication.

2981	   If Group OSCORE is used, such a replay attack is prevented on all
2982	   servers, since a client protects each different request with a
2983	   different Sequence Number value, which is in turn included as Partial
2984	   IV in the protected message and takes part in the construction of the
2985	   AEAD cipher nonce.  Thus, a server would be able to detect the
2986	   replayed request, by checking the conveyed Partial IV against its own
2987	   replay window in the OSCORE Recipient Context associated with the
2988	   client.

2990	   This requires a server to have a Replay Window that is in a valid
2991	   state.  If the server's Replay Window is initialized as invalid,
2992	   e.g., due to a reboot, the server should use the challenge-response
2993	   synchronization method based on the Echo Option for CoAP defined in
2994	   [RFC9175] as described in Section 9 of
2995	   [I-D.ietf-core-oscore-groupcomm], in order to make the Replay Window
2996	   valid before resuming to accept incoming messages from other group
2997	   members.

2999	6.5.  Use of CoAP No-Response Option

3001	   When CoAP group communication is used in CoAP NoSec (No Security)
3002	   mode (see Section 4), the CoAP No-Response Option [RFC7967] could be
3003	   misused by a malicious client to evoke as many responses from servers
3004	   to a group request as possible, by using the value '0' -- Interested
3005	   in all responses.  This might even override the default behavior of a
3006	   CoAP server to suppress the response in case there is nothing of
3007	   interest to respond with.  Therefore, this option can be used to
3008	   perform an amplification attack (see Section 6.3).

3010	   As a mitigation, a server that takes into account the No-Response
3011	   Option can specifically relax the standard suppression rules for a
3012	   resource only in case the option is sent by an authenticated client.

3014	   Consequently, if sent by an unauthenticated client, the option can
3015	   still be used to expand the classes of responses suppressed compared
3016	   to the default rules, but not to reduce the classes of responses
3017	   suppressed.

3019	6.6.  6LoWPAN and MPL

3021	   In a 6LoWPAN network, the MPL [RFC7731] protocol may be used to
3022	   forward multicast packets throughout the network.  A 6LoWPAN Router
3023	   that forwards a large IPv6 packet may have a relatively high impact
3024	   on the occupation of the wireless channel because sending a large
3025	   packet consists of the transmission of multiple link-layer IEEE
3026	   802.15.4 frames.  Also, a constrained 6LoWPAN Router may experience a
3027	   high memory load due to buffering of the large packet -- MPL requires
3028	   an MPL Forwarder to store the packet for a longer duration, to allow
3029	   multiple forwarding transmissions to neighboring Forwarders.  This
3030	   could allow an attacker on the 6LoWPAN network or outside the 6LoWPAN
3031	   network to execute a Denial of Service (DoS) attack by sending large
3032	   IPv6 multicast packets.  This is also an amplification attack in
3033	   general, because each of potentially multiple MPL Forwarder(s)
3034	   repeats the transmission of the IPv6 packet potentially multiple
3035	   times, hence amplifying the original amount of data sent by the
3036	   attacker considerably.

3038	   The amplification factor may be even further increased by the loss of
3039	   link-layer frames.  If one or more of the fragments are not received
3040	   correctly by an MPL Forwarder during its packet reassembly time
3041	   window, the Forwarder discards all received fragments and it will
3042	   likely at a future point in time trigger a neighboring MPL Forwarder
3043	   to send the IPv6 packet (fragments) again, because its internal state
3044	   marks this packet (that it failed to received previously) still as a
3045	   "new" IPv6 packet.  Hence, this leads to an MPL Forwarder signaling
3046	   to neighbors its "old" state, triggering additional transmission(s)
3047	   of all packet fragments.

3049	   For these reasons, a large IPv6 multicast packet is a possible attack
3050	   vector in a Denial of Service (DoS) amplification attack on a 6LoWPAN
3051	   network.  See Section 6.3 of this document and Section 11.3 of
3052	   [RFC7252] for more details on amplification.  To mitigate the risk,
3053	   applications sending multicast IPv6 requests to 6LoWPAN hosted CoAP
3054	   servers SHOULD limit the size of the request to avoid 6LoWPAN
3055	   fragmentation of the request packet.  If packet forwarding relies on
3056	   priority-based scheduling, a 6LoWPAN Router or (MPL) multicast
3057	   forwarder SHOULD deprioritize forwarding for multi-fragment 6LoWPAN
3058	   multicast packets, which is implementation specific. 6LoWPAN Border
3059	   Routers are typical ingress points where multicast traffic enters
3060	   into a 6LoWPAN network.  Specific MPL Forwarders (whether located on
3061	   a 6LBR or not) may also be configured as ingress points.  Any such
3062	   ingress point SHOULD implement multicast packet filtering to prevent
3063	   unwanted multicast traffic from entering a 6LoWPAN network from the
3064	   outside.  For example, it could filter out all multicast packets for
3065	   which there is no known multicast listener on the 6LoWPAN network.
3066	   See Section 3.10 for protocols that allow multicast listeners to
3067	   signal which groups they would like to listen to.  As part of
3068	   multicast packet filtering, the ingress point SHOULD implement a
3069	   filtering criterion based on the size of the multicast packet.
3070	   Ingress multicast packets above a defined size may then be dropped or
3071	   deprioritized.

3073	6.7.  Wi-Fi

3075	   In a home automation scenario using Wi-Fi, Wi-Fi security SHOULD be
3076	   enabled to prevent rogue nodes from joining.  The Customer Premises
3077	   Equipment (CPE) that enables access to the Internet should also have
3078	   its IP multicast filters set so that it enforces multicast scope
3079	   boundaries to isolate local multicast groups from the rest of the
3080	   Internet (e.g., as per [RFC6092]).  In addition, the scope of IP
3081	   multicast transmissions and listeners should be site-local (5) or
3082	   smaller.  For site-local scope, the CPE will be an appropriate
3083	   multicast scope boundary point.

3085	6.8.  Monitoring

3087	6.8.1.  General Monitoring

3089	   CoAP group communication can be used to control a set of related
3090	   devices: for example, to simultaneously turn on all the lights in a
3091	   room.  This intrinsically exposes the communicating devices to some
3092	   unique monitoring risks, which they are not as vulnerable to when not
3093	   using group communication.

3095	   For example, an attacker might be able to physically see a set of
3096	   lights turn on in a room.  Then, the attacker can correlate an
3097	   observed CoAP group communication message to the observed coordinated
3098	   group action -- even if the CoAP message is (partly) encrypted.  This
3099	   will give the attacker side-channel information to plan further
3100	   attacks (e.g., by determining the members of the CoAP group, some
3101	   network topology information may be deduced).

3103	6.8.2.  Pervasive Monitoring

3105	   CoAP traffic is typically used for the Internet of Things, and CoAP
3106	   (multicast) group communication may specifically be used for
3107	   conveniently controlling and monitoring critical infrastructure
3108	   (e.g., lights, alarms, HVAC, electrical grid, etc.).

3110	   This may make it a prime target of pervasive monitoring attacks
3111	   [RFC7258], which have to be considered as a key additional threat for
3112	   group communication.  For example, an attacker may attempt to record
3113	   all the CoAP traffic going over a smart grid (i.e., networked
3114	   electrical utility) and try to determine critical nodes for further
3115	   attacks.  For instance, the source node (controller) sends out CoAP
3116	   group messages, which easily identifies it as a controller.

3118	   CoAP group communication built on top of IP multicast is inherently
3119	   more vulnerable compared to communications solely relying on IP
3120	   unicast, since the same packet may be replicated over many links.  In
3121	   particular, this yields a higher probability of packet capture by a
3122	   pervasive monitoring system, which in turn results in more
3123	   information available to analyze within the same time interval.
3124	   Moreover, a single CoAP group request potentially results in multiple
3125	   CoAP responses, thus further contributing to the information
3126	   available to analyze.

3128	   This requires CoAP group communication solutions that are built on
3129	   top of IP multicast to pay particular attention to these dangers.

3131	   In order to limit the ease of interception of group communication
3132	   messages, one mitigation is to restrict the scope of IP multicast to
3133	   the minimal scope that fulfills the application need.  See the
3134	   congestion control recommendations in the last bullet of Section 3.6
3135	   to minimize the scope.  Thus, for example, realm-local IP multicast
3136	   scope is always preferred over site-local scope IP multicast, if it
3137	   fulfills the application needs.

3139	   Even if CoAP group communications are encrypted/protected (see
3140	   Section 5), an attacker may still attempt to capture this traffic and
3141	   perform an off-line attack in the future.

3143	7.  IANA Considerations

3145	   This document has no actions for IANA.

3147	8.  References

3149	8.1.  Normative References

3151	   [I-D.ietf-core-oscore-groupcomm]
3152	              Tiloca, M., Selander, G., Palombini, F., Mattsson, J. P.,
3153	              and R. Höglund, "Group Object Security for Constrained
3154	              RESTful Environments (Group OSCORE)", Work in Progress,
3155	              Internet-Draft, draft-ietf-core-oscore-groupcomm-27, 12
3156	              September 2025, <https://datatracker.ietf.org/doc/html/
3157	              draft-ietf-core-oscore-groupcomm-27>.

3159	   [Resource.Type.Link.Target.Attribute.Values]
3160	              IANA, "Resource Type (rt=) Link Target Attribute Values",
3161	              <https://www.iana.org/assignments/core-parameters/core-
3162	              parameters.xhtml#rt-link-target-att-value>.

3164	   [RFC1122]  Braden, R., Ed., "Requirements for Internet Hosts -
3165	              Communication Layers", STD 3, RFC 1122,
3166	              DOI 10.17487/RFC1122, October 1989,
3167	              <https://www.rfc-editor.org/rfc/rfc1122>.

3169	   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
3170	              Requirement Levels", BCP 14, RFC 2119,
3171	              DOI 10.17487/RFC2119, March 1997,
3172	              <https://www.rfc-editor.org/rfc/rfc2119>.

3174	   [RFC4443]  Conta, A., Deering, S., and M. Gupta, Ed., "Internet
3175	              Control Message Protocol (ICMPv6) for the Internet
3176	              Protocol Version 6 (IPv6) Specification", STD 89,
3177	              RFC 4443, DOI 10.17487/RFC4443, March 2006,
3178	              <https://www.rfc-editor.org/rfc/rfc4443>.

3180	   [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,
3181	              "Transmission of IPv6 Packets over IEEE 802.15.4
3182	              Networks", RFC 4944, DOI 10.17487/RFC4944, September 2007,
3183	              <https://www.rfc-editor.org/rfc/rfc4944>.

3185	   [RFC5110]  Savola, P., "Overview of the Internet Multicast Routing
3186	              Architecture", RFC 5110, DOI 10.17487/RFC5110, January
3187	              2008, <https://www.rfc-editor.org/rfc/rfc5110>.

3189	   [RFC6282]  Hui, J., Ed. and P. Thubert, "Compression Format for IPv6
3190	              Datagrams over IEEE 802.15.4-Based Networks", RFC 6282,
3191	              DOI 10.17487/RFC6282, September 2011,
3192	              <https://www.rfc-editor.org/rfc/rfc6282>.

3194	   [RFC6690]  Shelby, Z., "Constrained RESTful Environments (CoRE) Link
3195	              Format", RFC 6690, DOI 10.17487/RFC6690, August 2012,
3196	              <https://www.rfc-editor.org/rfc/rfc6690>.

3198	   [RFC6775]  Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C.
3199	              Bormann, "Neighbor Discovery Optimization for IPv6 over
3200	              Low-Power Wireless Personal Area Networks (6LoWPANs)",
3201	              RFC 6775, DOI 10.17487/RFC6775, November 2012,
3202	              <https://www.rfc-editor.org/rfc/rfc6775>.

3204	   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
3205	              Application Protocol (CoAP)", RFC 7252,
3206	              DOI 10.17487/RFC7252, June 2014,
3207	              <https://www.rfc-editor.org/rfc/rfc7252>.

3209	   [RFC7641]  Hartke, K., "Observing Resources in the Constrained
3210	              Application Protocol (CoAP)", RFC 7641,
3211	              DOI 10.17487/RFC7641, September 2015,
3212	              <https://www.rfc-editor.org/rfc/rfc7641>.

3214	   [RFC7959]  Bormann, C. and Z. Shelby, Ed., "Block-Wise Transfers in
3215	              the Constrained Application Protocol (CoAP)", RFC 7959,
3216	              DOI 10.17487/RFC7959, August 2016,
3217	              <https://www.rfc-editor.org/rfc/rfc7959>.

3219	   [RFC7967]  Bhattacharyya, A., Bandyopadhyay, S., Pal, A., and T.
3220	              Bose, "Constrained Application Protocol (CoAP) Option for
3221	              No Server Response", RFC 7967, DOI 10.17487/RFC7967,
3222	              August 2016, <https://www.rfc-editor.org/rfc/rfc7967>.

3224	   [RFC8075]  Castellani, A., Loreto, S., Rahman, A., Fossati, T., and
3225	              E. Dijk, "Guidelines for Mapping Implementations: HTTP to
3226	              the Constrained Application Protocol (CoAP)", RFC 8075,
3227	              DOI 10.17487/RFC8075, February 2017,
3228	              <https://www.rfc-editor.org/rfc/rfc8075>.

3230	   [RFC8132]  van der Stok, P., Bormann, C., and A. Sehgal, "PATCH and
3231	              FETCH Methods for the Constrained Application Protocol
3232	              (CoAP)", RFC 8132, DOI 10.17487/RFC8132, April 2017,
3233	              <https://www.rfc-editor.org/rfc/rfc8132>.

3235	   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
3236	              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
3237	              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

3239	   [RFC8613]  Selander, G., Mattsson, J., Palombini, F., and L. Seitz,
3240	              "Object Security for Constrained RESTful Environments
3241	              (OSCORE)", RFC 8613, DOI 10.17487/RFC8613, July 2019,
3242	              <https://www.rfc-editor.org/rfc/rfc8613>.

3244	   [RFC9052]  Schaad, J., "CBOR Object Signing and Encryption (COSE):
3245	              Structures and Process", STD 96, RFC 9052,
3246	              DOI 10.17487/RFC9052, August 2022,
3247	              <https://www.rfc-editor.org/rfc/rfc9052>.

3249	   [RFC9053]  Schaad, J., "CBOR Object Signing and Encryption (COSE):
3250	              Initial Algorithms", RFC 9053, DOI 10.17487/RFC9053,
3251	              August 2022, <https://www.rfc-editor.org/rfc/rfc9053>.

3253	   [RFC9110]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
3254	              Ed., "HTTP Semantics", STD 97, RFC 9110,
3255	              DOI 10.17487/RFC9110, June 2022,
3256	              <https://www.rfc-editor.org/rfc/rfc9110>.

3258	   [RFC9112]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
3259	              Ed., "HTTP/1.1", STD 99, RFC 9112, DOI 10.17487/RFC9112,
3260	              June 2022, <https://www.rfc-editor.org/rfc/rfc9112>.

3262	   [RFC9175]  Amsüss, C., Preuß Mattsson, J., and G. Selander,
3263	              "Constrained Application Protocol (CoAP): Echo, Request-
3264	              Tag, and Token Processing", RFC 9175,
3265	              DOI 10.17487/RFC9175, February 2022,
3266	              <https://www.rfc-editor.org/rfc/rfc9175>.

3268	   [RFC9776]  Haberman, B., Ed., "Internet Group Management Protocol,
3269	              Version 3", STD 100, RFC 9776, DOI 10.17487/RFC9776, March
3270	              2025, <https://www.rfc-editor.org/rfc/rfc9776>.

3272	8.2.  Informative References

3274	   [Californium]
3275	              Eclipse Foundation, "Eclipse Californium", June 2022,
3276	              <https://github.com/eclipse/californium>.

3278	   [Go-CoAP]  Open Connectivity Foundation (OCF), "Go-CoAP", June 2022,
3279	              <https://github.com/go-ocf/go-coap>.

3281	   [I-D.bormann-core-responses]
3282	              Bormann, C. and C. Amsüss, "CoAP: Non-traditional response
3283	              forms", Work in Progress, Internet-Draft, draft-bormann-
3284	              core-responses-05, 30 August 2025,
3285	              <https://datatracker.ietf.org/doc/html/draft-bormann-core-
3286	              responses-05>.

3288	   [I-D.ietf-ace-key-groupcomm-oscore]
3289	              Tiloca, M. and F. Palombini, "Key Management for Group
3290	              Object Security for Constrained RESTful Environments
3291	              (Group OSCORE) Using Authentication and Authorization for
3292	              Constrained Environments (ACE)", Work in Progress,
3293	              Internet-Draft, draft-ietf-ace-key-groupcomm-oscore-18, 28
3294	              August 2025, <https://datatracker.ietf.org/doc/html/draft-
3295	              ietf-ace-key-groupcomm-oscore-18>.

3297	   [I-D.ietf-ace-oscore-gm-admin]
3298	              Tiloca, M., Höglund, R., Van der Stok, P., and F.
3299	              Palombini, "Admin Interface for the OSCORE Group Manager",
3300	              Work in Progress, Internet-Draft, draft-ietf-ace-oscore-
3301	              gm-admin-13, 8 January 2025,
3302	              <https://datatracker.ietf.org/doc/html/draft-ietf-ace-
3303	              oscore-gm-admin-13>.

3305	   [I-D.ietf-anima-constrained-voucher]
3306	              Richardson, M., Van der Stok, P., Kampanakis, P., and E.
3307	              Dijk, "Constrained Bootstrapping Remote Secure Key
3308	              Infrastructure (cBRSKI)", Work in Progress, Internet-
3309	              Draft, draft-ietf-anima-constrained-voucher-28, 6 July
3310	              2025, <https://datatracker.ietf.org/doc/html/draft-ietf-
3311	              anima-constrained-voucher-28>.

3313	   [I-D.ietf-core-coap-pubsub]
3314	              Jimenez, J., Koster, M., and A. Keränen, "A publish-
3315	              subscribe architecture for the Constrained Application
3316	              Protocol (CoAP)", Work in Progress, Internet-Draft, draft-
3317	              ietf-core-coap-pubsub-18, 28 February 2025,
3318	              <https://datatracker.ietf.org/doc/html/draft-ietf-core-
3319	              coap-pubsub-18>.

3321	   [I-D.ietf-core-groupcomm-proxy]
3322	              Tiloca, M. and E. Dijk, "Proxy Operations for CoAP Group
3323	              Communication", Work in Progress, Internet-Draft, draft-
3324	              ietf-core-groupcomm-proxy-05, 3 September 2025,
3325	              <https://datatracker.ietf.org/doc/html/draft-ietf-core-
3326	              groupcomm-proxy-05>.

3328	   [I-D.ietf-core-transport-indication]
3329	              Amsüss, C. and M. S. Lenders, "CoAP Transport Indication",
3330	              Work in Progress, Internet-Draft, draft-ietf-core-
3331	              transport-indication-09, 7 July 2025,
3332	              <https://datatracker.ietf.org/doc/html/draft-ietf-core-
3333	              transport-indication-09>.

3335	   [I-D.irtf-t2trg-amplification-attacks]
3336	              Mattsson, J. P., Selander, G., and C. Amsüss,
3337	              "Amplification Attacks Using the Constrained Application
3338	              Protocol (CoAP)", Work in Progress, Internet-Draft, draft-
3339	              irtf-t2trg-amplification-attacks-05, 18 June 2025,
3340	              <https://datatracker.ietf.org/doc/html/draft-irtf-t2trg-
3341	              amplification-attacks-05>.

3343	   [I-D.tiloca-core-oscore-discovery]
3344	              Tiloca, M., Amsüss, C., and P. Van der Stok, "Discovery of
3345	              OSCORE Groups with the CoRE Resource Directory", Work in
3346	              Progress, Internet-Draft, draft-tiloca-core-oscore-
3347	              discovery-18, 3 September 2025,
3348	              <https://datatracker.ietf.org/doc/html/draft-tiloca-core-
3349	              oscore-discovery-18>.

3351	   [libcoap]  Bergmann, O., "libcoap", June 2022,
3352	              <https://github.com/obgm/libcoap>.

3354	   [RFC3596]  Thomson, S., Huitema, C., Ksinant, V., and M. Souissi,
3355	              "DNS Extensions to Support IP Version 6", STD 88,
3356	              RFC 3596, DOI 10.17487/RFC3596, October 2003,
3357	              <https://www.rfc-editor.org/rfc/rfc3596>.

3359	   [RFC6092]  Woodyatt, J., Ed., "Recommended Simple Security
3360	              Capabilities in Customer Premises Equipment (CPE) for
3361	              Providing Residential IPv6 Internet Service", RFC 6092,
3362	              DOI 10.17487/RFC6092, January 2011,
3363	              <https://www.rfc-editor.org/rfc/rfc6092>.

3365	   [RFC6550]  Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J.,
3366	              Kelsey, R., Levis, P., Pister, K., Struik, R., Vasseur,
3367	              JP., and R. Alexander, "RPL: IPv6 Routing Protocol for
3368	              Low-Power and Lossy Networks", RFC 6550,
3369	              DOI 10.17487/RFC6550, March 2012,
3370	              <https://www.rfc-editor.org/rfc/rfc6550>.

3372	   [RFC6636]  Asaeda, H., Liu, H., and Q. Wu, "Tuning the Behavior of
3373	              the Internet Group Management Protocol (IGMP) and
3374	              Multicast Listener Discovery (MLD) for Routers in Mobile
3375	              and Wireless Networks", RFC 6636, DOI 10.17487/RFC6636,
3376	              May 2012, <https://www.rfc-editor.org/rfc/rfc6636>.

3378	   [RFC7258]  Farrell, S. and H. Tschofenig, "Pervasive Monitoring Is an
3379	              Attack", BCP 188, RFC 7258, DOI 10.17487/RFC7258, May
3380	              2014, <https://www.rfc-editor.org/rfc/rfc7258>.

3382	   [RFC7346]  Droms, R., "IPv6 Multicast Address Scopes", RFC 7346,
3383	              DOI 10.17487/RFC7346, August 2014,
3384	              <https://www.rfc-editor.org/rfc/rfc7346>.

3386	   [RFC7390]  Rahman, A., Ed. and E. Dijk, Ed., "Group Communication for
3387	              the Constrained Application Protocol (CoAP)", RFC 7390,
3388	              DOI 10.17487/RFC7390, October 2014,
3389	              <https://www.rfc-editor.org/rfc/rfc7390>.

3391	   [RFC7731]  Hui, J. and R. Kelsey, "Multicast Protocol for Low-Power
3392	              and Lossy Networks (MPL)", RFC 7731, DOI 10.17487/RFC7731,
3393	              February 2016, <https://www.rfc-editor.org/rfc/rfc7731>.

3395	   [RFC8323]  Bormann, C., Lemay, S., Tschofenig, H., Hartke, K.,
3396	              Silverajan, B., and B. Raymor, Ed., "CoAP (Constrained
3397	              Application Protocol) over TCP, TLS, and WebSockets",
3398	              RFC 8323, DOI 10.17487/RFC8323, February 2018,
3399	              <https://www.rfc-editor.org/rfc/rfc8323>.

3401	   [RFC8710]  Fossati, T., Hartke, K., and C. Bormann, "Multipart
3402	              Content-Format for the Constrained Application Protocol
3403	              (CoAP)", RFC 8710, DOI 10.17487/RFC8710, February 2020,
3404	              <https://www.rfc-editor.org/rfc/rfc8710>.

3406	   [RFC9019]  Moran, B., Tschofenig, H., Brown, D., and M. Meriac, "A
3407	              Firmware Update Architecture for Internet of Things",
3408	              RFC 9019, DOI 10.17487/RFC9019, April 2021,
3409	              <https://www.rfc-editor.org/rfc/rfc9019>.

3411	   [RFC9124]  Moran, B., Tschofenig, H., and H. Birkholz, "A Manifest
3412	              Information Model for Firmware Updates in Internet of
3413	              Things (IoT) Devices", RFC 9124, DOI 10.17487/RFC9124,
3414	              January 2022, <https://www.rfc-editor.org/rfc/rfc9124>.

3416	   [RFC9176]  Amsüss, C., Ed., Shelby, Z., Koster, M., Bormann, C., and
3417	              P. van der Stok, "Constrained RESTful Environments (CoRE)
3418	              Resource Directory", RFC 9176, DOI 10.17487/RFC9176, April
3419	              2022, <https://www.rfc-editor.org/rfc/rfc9176>.

3421	   [RFC9177]  Boucadair, M. and J. Shallow, "Constrained Application
3422	              Protocol (CoAP) Block-Wise Transfer Options Supporting
3423	              Robust Transmission", RFC 9177, DOI 10.17487/RFC9177,
3424	              March 2022, <https://www.rfc-editor.org/rfc/rfc9177>.

3426	   [RFC9200]  Seitz, L., Selander, G., Wahlstroem, E., Erdtman, S., and
3427	              H. Tschofenig, "Authentication and Authorization for
3428	              Constrained Environments Using the OAuth 2.0 Framework
3429	              (ACE-OAuth)", RFC 9200, DOI 10.17487/RFC9200, August 2022,
3430	              <https://www.rfc-editor.org/rfc/rfc9200>.

3432	   [RFC9685]  Thubert, P., Ed., "Listener Subscription for IPv6 Neighbor
3433	              Discovery Multicast and Anycast Addresses", RFC 9685,
3434	              DOI 10.17487/RFC9685, November 2024,
3435	              <https://www.rfc-editor.org/rfc/rfc9685>.

3437	   [RFC9777]  Haberman, B., Ed., "Multicast Listener Discovery Version 2
3438	              (MLDv2) for IPv6", STD 101, RFC 9777,
3439	              DOI 10.17487/RFC9777, March 2025,
3440	              <https://www.rfc-editor.org/rfc/rfc9777>.

3442	Appendix A.  Use Cases

3444	   To illustrate where and how CoAP-based group communication can be
3445	   used, this section summarizes the most common use cases.  These use
3446	   cases include both secured and non-secured CoAP usage.  Each
3447	   subsection below covers one particular category of use cases for
3448	   CoRE.  Within each category, a use case may cover multiple
3449	   application areas such as home IoT, commercial building IoT (sensing
3450	   and control), industrial IoT/control, or environmental sensing.

3452	A.1.  Discovery

3454	   Discovery of physical devices in a network, or discovery of resources
3455	   hosted on network devices, are operations that are usually required
3456	   in a system during the phases of setup or (re)configuration.  When a
3457	   discovery use case involves devices that need to interact without
3458	   having been configured previously with a common security context,
3459	   unsecured CoAP communication is typically used.  Discovery may
3460	   involve a request to a directory server, which provides services to
3461	   aid clients in the discovery process.  One particular type of
3462	   directory server is the CoRE Resource Directory [RFC9176]; and there
3463	   may be other types of directories that can be used with CoAP.

3465	A.1.1.  Distributed Device Discovery

3467	   Device discovery is the discovery and identification of networked
3468	   devices -- optionally only devices of a particular class, type,
3469	   model, or brand.  Group communication is used for distributed device
3470	   discovery, if a central directory server is not used.  Typically, in
3471	   distributed device discovery, a multicast request is sent to a
3472	   particular address (or address range) and multicast scope of
3473	   interest, and any devices configured to be discoverable will respond
3474	   back.  For the alternative solution of centralized device discovery a
3475	   central directory server is accessed through unicast, in which case
3476	   group communication is not needed.  This requires that the address of
3477	   the central directory is either preconfigured in each device or
3478	   configured during operation using a protocol.

3480	   In CoAP, device discovery can be implemented by CoAP resource
3481	   discovery (Section 7 of [RFC7252]), requesting (GET) a particular
3482	   resource that the sought device class, type, model, or brand is known
3483	   to respond to.  It can also be implemented using CoAP resource
3484	   discovery and the CoAP query interface defined in Section 4 of
3485	   [RFC6690] to find these particular resources.

3487	A.1.2.  Distributed Service Discovery

3489	   Service discovery is the discovery and identification of particular
3490	   services hosted on network devices.  Services can be identified by
3491	   one or more parameters such as ID, name, protocol, version, and/or
3492	   type.  Distributed service discovery involves group communication to
3493	   reach individual devices hosting a particular service; with a central
3494	   directory server not being used.

3496	   In CoAP, services are represented as resources and service discovery
3497	   is implemented using resource discovery (Section 7 of [RFC7252]) and
3498	   the CoAP query interface defined in Section 4 of [RFC6690].

3500	A.1.3.  Directory Discovery

3502	   This use case is a specific subcase of Distributed Service Discovery
3503	   (Appendix A.1.2), in which a device needs to identify the location of
3504	   a Directory on the network to which it can, e.g., register its own
3505	   offered services, or to which it can perform queries to identify and
3506	   locate other devices/services it needs to access on the network.

3508	   As defined in [RFC9176], a CoRE Resource Directory (RD) is a web
3509	   entity that stores information about web resources and implements
3510	   REST interfaces for registration and lookup of those resources.  For
3511	   example, a device can register itself to an RD to let it be found by
3512	   other devices and/or applications.

3514	   As an example, the following shows two IPv6 network configurations.
3515	   Both are based on the topology as shown in Figure 3.  The two
3516	   configurations using this topology are as follows:

3518	   1.  Subnets are 6LoWPAN networks; the routers Rtr-1 and Rtr-2 are
3519	       6LoWPAN Border Routers (6LBRs) [RFC6775].

3521	   2.  Subnets are Ethernet links; the routers Rtr-1 and Rtr-2 are
3522	       multicast-capable Ethernet routers.

3524	   Both configurations are further specified by the following:

3526	   *  A large room (Room-A) with three lights (Light-1, Light-2, Light-
3527	      3) controlled by a light switch (Light Switch).  The devices are
3528	      organized into two subnets.  In reality, there could be more
3529	      lights (up to several hundreds) but, for clarity, only three are
3530	      shown.

3532	   *  Light-1 and the light switch are connected to a router (Rtr-1).

3534	   *  Light-2 and Light-3 are connected to another router (Rtr-2).

3536	   *  The routers are connected to an IPv6 network backbone (Network
3537	      Backbone) that is also multicast enabled.  In the general case,
3538	      this means the network backbone and Rtr-1/Rtr-2 support a PIM-
3539	      based multicast routing protocol and, e.g., Multicast Listener
3540	      Discovery v2 (MLDv2) for forming groups.

3542	   *  A CoRE RD using CoAP (CoAP Resource Directory) is connected to the
3543	      network backbone.

3545	   *  The DNS server (DNS Server) is optional.  If the server is there
3546	      (connected to the network backbone), then certain DNS-based
3547	      features are available (e.g., DNS resolution of the hostname to
3548	      the IP multicast address).  If the DNS server is not there and no
3549	      alternative name resolution service is available to use, then
3550	      different provisioning of the network is required (e.g., IP
3551	      multicast addresses are hard-coded into devices, or manually
3552	      configured, or obtained via a service discovery method).

3554	   *  A controller using CoAP (CoAP Controller Client) is connected to
3555	      the backbone, which is able to control various building functions
3556	      including lighting.

3558	    ................................................
3559	    :                                       Room-A :
3560	    :       +++++++++++++++++++++++++++            :
3561	    :      /    Subnet-1               \           :            Network
3562	    :     /                             \          :           Backbone
3563	    :    /     +----------+              \         :                  |
3564	    :   /      |  Light   |-------+       \        :                  |
3565	    :  |       |  Switch  |       |        |       :                  |
3566	    :  |       +----------+  +---------+   |       :                  |
3567	    :  |                     |  Rtr-1  |------------------------------+
3568	    :  |                     +---------+   |       :                  |
3569	    :  |                           |       |       :                  |
3570	    :   \      +----------+        |      /        :                  |
3571	    :    \     |  Light-1 |--------+     /         :                  |
3572	    :     \    +----------+             /          :                  |
3573	    :      \                           /           :                  |
3574	    :       +++++++++++++++++++++++++++            :                  |
3575	    :                                              :                  |
3576	    :                                              :                  |
3577	    :       +++++++++++++++++++++++++++            :  +------------+  |
3578	    :      /    Subnet-2               \           :  | DNS Server |  |
3579	    :     /                             \          :  | (Optional) |--+
3580	    :    /     +----------+              \         :  +------------+  |
3581	    :   /      |  Light-2 |-------+       \        :                  |
3582	    :  |       +----------+       |        |       :                  |
3583	    :  |                     +---------+   |       :                  |
3584	    :  |                     |  Rtr-2  |------------------------------+
3585	    :  |                     +---------+   |       :                  |
3586	    :  |                           |       |       :                  |
3587	    :   \      +----------+        |      /        :  +------------+  |
3588	    :    \     |  Light-3 |--------+     /         :  | CoAP       |  |
3589	    :     \    +----------+             /          :  | Controller |--+
3590	    :      \                           /           :  | Client     |  |
3591	    :       +++++++++++++++++++++++++++            :  +------------+  |
3592	    :                                              :                  |
3593	    :..............................................:                  |
3594	                                                                      |
3595	                                       +-----------+                  |
3596	                                       | CoAP      |                  |
3597	                                       | Resource  |------------------+
3598	                                       | Directory |
3599	                                       +-----------+

3601	            Figure 3: Network Topology of a Large Room (Room-A)

3603	   Building on the above, an example of protocol flow for discovery of
3604	   the RD for the given network (of Figure 3) is shown in Figure 4:

3606	   *  Light-2 is installed and powered on for the first time.

3608	   *  Light-2 will then search for the local RD by sending out a group
3609	      communication GET request (with the "/.well-known/core?rt=core.rd"
3610	      request URI) to the site-local "All CoAP Nodes" multicast address
3611	      (ff05::fd).

3613	   *  This multicast message will then go to each node in Subnet-2.
3614	      Rtr-2 will then forward it into the network backbone where it will
3615	      be received by the RD.  All other nodes in Subnet-2 will ignore
3616	      the group communication GET request because it is qualified by the
3617	      query string "?rt=core.rd" (which indicates it should only be
3618	      processed by the endpoint if it contains a resource of type
3619	      "core.rd").

3621	   *  The RD will then send back a unicast response containing the
3622	      requested content, which is a CoRE Link Format representation of a
3623	      resource of type "core.rd".

3625	   *  Note that the flow is shown only for Light-2 for clarity.  Similar
3626	      flows will happen for Light-1, Light-3, and Light Switch when they
3627	      are first installed.

3629	   The RD may also be discovered by other means such as by assuming a
3630	   default location (e.g., on a 6LBR), using DHCP, anycast address, etc.
3631	   However, these approaches do not invoke CoAP group communication so
3632	   are not further discussed here.

3634	   For other discovery use cases such as discovering local CoAP servers,
3635	   services, or resources, CoAP group communication can be used in a
3636	   similar fashion as in the above use case.  For example, link-local,
3637	   realm-local, admin-local, or site-local scoped discovery can be done
3638	   this way.

3640	                                    Light
3641	   Light-1   Light-2    Light-3     Switch     Rtr-1     Rtr-2       RD
3642	    |          |          |          |          |          |          |
3643	    |          |          |          |          |          |          |
3644	    ..................................          |          |          |
3645	    :   Light-2 is installed         :          |          |          |
3646	    :   and powers on for first time :          |          |          |
3647	    :................................:          |          |          |
3648	    |                                |          |          |          |
3649	    |          |          |          |          |          |          |
3650	    |          |          |          |          |          |          |
3651	    |          | CoAP NON Mcast(GET                        |          |
3652	    |          |           /.well-known/core?rt=core.rd)   |          |
3653	    |          |------------------------------------------>|          |
3654	    |          |          |          |          |          |--------->|
3655	    |          |          |          |          |          |          |
3656	    |          |          |          |          |          |          |
3657	    |          | CoAP NON (2.05 Content                    |          |
3658	    |          |         </rd>;rt="core.rd";ct=40)         |<---------|
3659	    |          |<------------------------------------------|          |
3660	    |          |          |          |          |          |          |
3661	    |          |          |          |          |          |          |

3663	        Figure 4: Resource Directory Discovery via Multicast Request

3665	A.2.  Operational Phase

3667	   Operational phase use cases describe those operations that occur most
3668	   frequently in a networked system, during its operational lifetime and
3669	   regular operation.  Regular usage is when the applications on
3670	   networked devices perform the tasks they were designed for and
3671	   exchange of application-related data using group communication
3672	   occurs.  Processes like system reconfiguration, group changes,
3673	   system/device setup, extra group security changes, etc. are not part
3674	   of regular operation.

3676	A.2.1.  Actuator Group Control

3678	   Group communication can be beneficial to control actuators that need
3679	   to act in synchrony, as a cohesive collection, with strict timing
3680	   (latency) requirements.  Examples are office lighting, stage
3681	   lighting, street lighting, or audio alert/Public Address systems.

3683	   The following presents examples of lighting control of a set of
3684	   6LoWPAN-connected lights.

3686	   Figure 5 shows the protocol flow for a building automation lighting
3687	   control scenario for the network considered in Figure 3.  The network
3688	   is assumed to be in a 6LoWPAN configuration.  Also, it is assumed
3689	   that the CoAP servers in each light are configured to suppress CoAP
3690	   responses for any IP multicast CoAP requests related to lighting
3691	   control.  (See Section 3.1.2 for more details on response suppression
3692	   by a server.)

3694	   In addition, Figure 6 shows a protocol flow example for the case
3695	   where servers do respond to a lighting control IP multicast request
3696	   with (unicast) CoAP NON responses.  There are two success responses
3697	   and one 5.00 error response.  In this particular case, the light
3698	   switch does not check that all lights in the group received the IP
3699	   multicast request by examining the responses.  This is because the
3700	   light switch is not configured with an exhaustive list of the IP
3701	   addresses of all lights belonging to the group.  However, based on
3702	   received error responses, it could take additional action such as
3703	   logging a fault or alerting the user via its LCD display.  In case a
3704	   CoAP message is delivered multiple times to a light, the subsequent
3705	   CoAP messages can be filtered out as duplicates, based on the CoAP
3706	   Message ID.

3708	   Reliability of IP multicast is not guaranteed.  Therefore, one or
3709	   more lights in the group may not have received the CoAP control
3710	   request due to packet loss.  In this use case, there is no detection
3711	   nor correction of such situations: the application layer expects that
3712	   the IP multicast forwarding/routing will be of sufficient quality to
3713	   provide on average a very high probability of packet delivery to all
3714	   CoAP endpoints in an IP multicast group.  An example protocol to
3715	   accomplish this using randomized retransmission is the MPL forwarding
3716	   protocol for LLNs [RFC7731].

3718	   We assume the following steps have already occurred before the
3719	   illustrated flows:

3721	   1) Startup phase: 6LoWPANs are formed.  IPv6 addresses are assigned
3722	   to all devices.  The CoAP network is formed.

3724	   2) Network configuration (application independent): 6LBRs are
3725	   configured with IP multicast addresses, or address blocks, to filter
3726	   out or to pass through to/from the 6LoWPAN.

3728	   3a) Commissioning phase (application related): The IP multicast
3729	   address of the group (Room-A-Lights) has been configured in all the
3730	   lights and in the light switch.

3732	   3b) As an alternative to the previous step, when a DNS server or an
3733	   alternative name resolution service is available, the light switch
3734	   and/or the lights have been configured with a group hostname that
3735	   each node resolves to the above IP multicast address of the group.

3737	   Note for the Commissioning phase: the switch's 6LoWPAN/CoAP software
3738	   stack supports sending unicast, multicast, or proxied unicast CoAP
3739	   requests, including processing of the multiple responses that may be
3740	   generated by an IP multicast CoAP request.

3742	                                    Light                       Network
3743	   Light-1   Light-2    Light-3     Switch    Rtr-1      Rtr-2  Backbone
3744	    |          |          |          |          |          |          |
3745	    |          |          |          |          |          |          |
3746	    |          |          .......................          |          |
3747	    |          |          :   User flips on     :          |          |
3748	    |          |          :   light switch to   :          |          |
3749	    |          |          :   turn on all the   :          |          |
3750	    |          |          :   lights in Room-A  :          |          |
3751	    |          |          :.....................:          |          |
3752	    |          |                                           |          |
3753	    |          |          |          |          |          |          |
3754	    |          |          |          |          |          |          |
3755	    |          |          |    COAP NON Mcast(PUT,         |          |
3756	    |          |          |    Payload=lights ON)          |          |
3757	    |<-------------------------------+--------->|          |          |
3758	    ON         |          |          |          |-------------------->|
3759	    |          |          |          |          |          |<---------|
3760	    |          |<---------|<-------------------------------|          |
3761	    |          ON         ON         |          |          |          |
3762	    ^          ^          ^          |          |          |          |
3763	    .......................          |          |          |          |
3764	    :   Lights in Room-A  :          |          |          |          |
3765	    :   turn on (nearly   :          |          |          |          |
3766	    :   simultaneously)   :          |          |          |          |
3767	    :.....................:          |          |          |          |
3768	                                     |          |          |          |
3769	    |          |          |          |          |          |          |
3770	    |          |          |          |          |          |          |

3772	           Figure 5: Light Switch Sends Multicast Control Message
3773	                                    Light                       Network
3774	   Light-1   Light-2    Light-3     Switch    Rtr-1      Rtr-2  Backbone
3775	    |          |          |          |          |          |          |
3776	    |     COAP NON (2.04 Changed)    |          |          |          |
3777	    |------------------------------->|          |          |          |
3778	    |          |          |          |          |          |          |
3779	    |          |          |          |          |          |          |
3780	    |          COAP NON (2.04 Changed)          |          |          |
3781	    |          |------------------------------------------>|          |
3782	    |          |          |          |          |          |--------->|
3783	    |          |          |          |          |<--------------------|
3784	    |          |          |          |<---------|          |          |
3785	    |          |          |          |          |          |          |
3786	    |          |        COAP NON (5.00 Internal Server Error)         |
3787	    |          |          |------------------------------->|          |
3788	    |          |          |          |          |          |--------->|
3789	    |          |          |          |          |<--------------------|
3790	    |          |          |          |<---------|          |          |
3791	    |          |          |          |          |          |          |

3793	      Figure 6: Lights (Optionally) Respond to Multicast CoAP Request

3795	   Another, but similar, lighting control use case is shown in Figure 7.
3796	   In this case, a controller connected to the network backbone sends a
3797	   CoAP group communication request to turn on all lights in Room-A.
3798	   Every light sends back a CoAP response to the controller after being
3799	   turned on.

3801	                                                              CoAP
3802	                                                     Network  Controller
3803	  Light-1   Light-2    Light-3     Rtr-1      Rtr-2  Backbone Client
3804	   |          |          |           |          |          |        |
3805	   |          |          |           |          |    COAP NON Mcast(PUT,
3806	   |          |          |           |          |    Payload=lights ON)
3807	   |          |          |           |          |          |<-------|
3808	   |          |          |           |<----------<---------|        |
3809	   |<--------------------------------|          |          |        |
3810	   ON         |          |           |          |          |        |
3811	   |          |<----------<---------------------|          |        |
3812	   |          ON         ON          |          |          |        |
3813	   ^          ^          ^           |          |          |        |
3814	   .......................           |          |          |        |
3815	   :   Lights in Room-A  :           |          |          |        |
3816	   :   turn on (nearly   :           |          |          |        |
3817	   :   simultaneously)   :           |          |          |        |
3818	   :.....................:           |          |          |        |
3819	                                     |          |          |        |
3820	   |          |          |           |          |          |        |
3821	   |          |          |           |          |          |        |
3822	   |    COAP NON (2.04 Changed)      |          |          |        |
3823	   |-------------------------------->|          |          |        |
3824	   |          |          |           |-------------------->|        |
3825	   |          |  COAP NON (2.04 Changed)        |          |------->|
3826	   |          |-------------------------------->|          |        |
3827	   |          |          |           |          |--------->|        |
3828	   |          |          | COAP NON (2.04 Changed)         |------->|
3829	   |          |          |--------------------->|          |        |
3830	   |          |          |           |          |--------->|        |
3831	   |          |          |           |          |          |------->|
3832	   |          |          |           |          |          |        |

3834	     Figure 7: Controller on Backbone Sends Multicast Control Message

3836	A.2.2.  Device Group Status Request

3838	   To properly monitor the status of systems, there may be a need for
3839	   ad-hoc, unplanned status updates.  Group communication can be used to
3840	   quickly send out a request to a (potentially large) number of devices
3841	   for specific information.  Each device then responds back with the
3842	   requested data.  Those devices that did not respond to the request
3843	   can optionally be polled again via reliable unicast communication to
3844	   complete the dataset.  A set of devices may be defined as a CoAP
3845	   group, e.g., as intended to cover "all temperature sensors on floor
3846	   3", or "all lights in wing B".  For example, it could be a status
3847	   request for device temperature, most recent sensor event detected,
3848	   firmware version, network load, and/or battery level.

3850	A.2.3.  Network-wide Query

3852	   In some cases, a whole network or subnet of multiple IP devices needs
3853	   to be queried for status or other information.  This is similar to
3854	   the previous use case except that the set of devices is not defined
3855	   in terms of its function/type but in terms of its network location.
3856	   Technically this is also similar to distributed service discovery
3857	   (Appendix A.1.2) where a query is processed by all devices on a
3858	   network -- except that the query is not about services offered by the
3859	   device, but rather specific operational data is requested.

3861	A.2.4.  Network-wide / Group Notification

3863	   In some cases, a whole network, or subnet of multiple IP devices, or
3864	   a specific target set of devices needs to be notified of a status
3865	   change or other information.  This is similar to the previous two use
3866	   cases except that the recipients are not expected to respond with
3867	   some information.  Unreliable notification can be acceptable in some
3868	   use cases, in which a recipient does not respond with a confirmation
3869	   of having received the notification.  In such a case, the receiving
3870	   CoAP server does not have to create a CoAP response.  If the sender
3871	   needs confirmation of reception, the CoAP servers can be configured
3872	   for that resource to respond with a 2.xx success status after
3873	   processing a request successfully that provided a notification.

3875	A.3.  Software Update

3877	   Group communication can be useful to efficiently distribute new
3878	   software (firmware, image, application, etc.) to a set of multiple
3879	   devices, e.g., by relying on the SUIT firmware update architecture
3880	   [RFC9019] and its manifest information model [RFC9124].  In this
3881	   case, a CoAP group can be defined in terms of the device type of its
3882	   members: all devices in the target CoAP group are known to be capable
3883	   of installing and running the new software.  The software is
3884	   distributed as a series of smaller blocks that are collected by all
3885	   devices and stored in memory.  All devices in the target CoAP group
3886	   are usually responsible for integrity verification of the received
3887	   software; which can be done per-block or for the entire software
3888	   image once all blocks have been received.  Due to the inherent
3889	   unreliability of CoAP multicast, there needs to be a backup mechanism
3890	   (e.g., implemented using CoAP unicast) by which a device can
3891	   individually request missing blocks of a whole software image/entity.
3892	   Prior to a multicast software update, the CoAP group of recipients
3893	   can be separately notified that there is new software available and
3894	   coming, using the above network-wide or group notification.

3896	Appendix B.  Examples of Group Naming for Application Groups

3898	   This section provides examples for the different methods that can be
3899	   used to name application groups, as defined in Section 2.2.1.2.

3901	   The content of this section is purely illustrative and has no
3902	   ambition to be comprehensive.  That is, while the methods defined in
3903	   Section 2.2.1.2 are presented as viable to use, further viable
3904	   methods might exist and can be defined in the future.  Furthermore,
3905	   this section does not provide guidelines on how to choose between the
3906	   different methods, for which a decision is application-specific.

3908	   The shown examples consider a CoAP group identified by the group
3909	   hostname grp.example.  Its members are CoAP servers listening to the
3910	   associated IP multicast address ff35:30:2001:db8:f1:0:8000:1 and port
3911	   number 5685.

3913	   Note that a group hostname is used in most examples to improve
3914	   readability.  In practice, as discussed in Section 2.2.1.2, using an
3915	   IP address literal as the host subcomponent of the Group URI can
3916	   reduce the size of the CoAP request message, in case the Uri-Host
3917	   Option can be elided.

3919	   Also note that the Uri-Port Option does not appear in the examples,
3920	   since the port number 5685 is already included in the CoAP request's
3921	   UDP header (which is not shown in the examples) in the destination
3922	   port field.

3924	B.1.  Group Naming using the URI Path Component

3926	   Figure 8 provides an example where the URI path component is used for
3927	   naming application groups.

3929	      Application group name: gp1

3931	      Group URI: coap://grp.example:5685/gp/gp1/light?foo=bar

3933	      CoAP group request
3934	         Header: GET (T=NON, Code=0.01, MID=0x7d41)
3935	         Uri-Host: "grp.example"
3936	         Uri-Path: "gp"
3937	         Uri-Path: "gp1"
3938	         Uri-Path: "light"
3939	         Uri-Query: "foo=bar"

3941	     Figure 8: Example of application group name in the URI path (1/2)

3943	   Figure 9 provides a different example, where an IPv6 literal address
3944	   and the default CoAP port number 5683 are used in the authority
3945	   component, which yields a compact CoAP request.  Also, the resource
3946	   structure is different in this example.

3948	      Application group name: gp1

3950	      Group URI: coap://[ff35:30:2001:db8:f1:0:8000:1]/g/gp1/li

3952	      CoAP group request
3953	         Header: POST (T=NON, Code=0.02, MID=0x7d41)
3954	         Uri-Path: "g"
3955	         Uri-Path: "gp1"
3956	         Uri-Path: "li"

3958	     Figure 9: Example of application group name in the URI path (2/2)

3960	B.2.  Group Naming using the URI Query Component

3962	   Figure 10 provides an example where the URI query component is used
3963	   for naming application groups.  In particular, it considers the first
3964	   alternative discussed in Section 2.2.1.2, where the URI query
3965	   component consists of only one parameter, which has no value and has
3966	   the name of the application group as its own identifier.

3968	      Application group name: gp1

3970	      Group URI: coap://grp.example:5685/light?gp1

3972	      CoAP group request
3973	         Header: GET (T=NON, Code=0.01, MID=0x7d41)
3974	         Uri-Host: "grp.example"
3975	         Uri-Path: "light"
3976	         Uri-Query: "gp1"

3978	    Figure 10: Example of application group name in the URI query (1/2)

3980	   Figure 11 provides another example, which considers the second
3981	   alternative discussed in Section 2.2.1.2.  In particular, the URI
3982	   query component includes a query parameter "gp" as designated
3983	   indicator, with value the name of the application group.

3985	      Application group name: gp1

3987	      Group URI: coap://grp.example:5685/light?foo=bar&gp=gp1

3989	      CoAP group request
3990	         Header: GET (T=NON, Code=0.01, MID=0x7d41)
3991	         Uri-Host: "grp.example"
3992	         Uri-Path: "light"
3993	         Uri-Query: "foo=bar"
3994	         Uri-Query: "gp=gp1"

3996	    Figure 11: Example of application group name in the URI query (2/2)

3998	B.3.  Group Naming using the URI Authority Component

4000	   Figure 12 provides an example where the URI authority component as a
4001	   whole is used for encoding the name of the application group.  Note
4002	   that, although the port information (5685) is not carried as a CoAP
4003	   Option, it is still transported within the UDP message (in the UDP
4004	   destination port field).  So, effectively, the application group name
4005	   is transported in the UDP message as two parts.

4007	      Application group name: grp.example:5685

4009	      Group URI: coap://grp.example:5685/light?foo=bar

4011	      CoAP group request
4012	         Header: GET (T=NON, Code=0.01, MID=0x7d41)
4013	         Uri-Host: "grp.example"
4014	         Uri-Path: "light"
4015	         Uri-Query: "foo=bar"

4017	      Figure 12: Example of application group name defined by the URI
4018	                                 authority

4020	   Figure 13 provides an example where the URI host subcomponent of the
4021	   URI authority component is used for encoding the name of the
4022	   application group.  Specifically, the leftmost label of the
4023	   registered name is used.

4025	      Application group name: grp42

4027	      Group URI: coap://grp42.example:5685/light?foo=bar

4029	      CoAP group request
4030	         Header: GET (T=NON, Code=0.01, MID=0x7d41)
4031	         Uri-Host: "grp42.example"
4032	         Uri-Path: "light"
4033	         Uri-Query: "foo=bar"

4035	    Figure 13: Example of application group name encoded in the URI host

4037	   Figure 14 provides an example where the URI port subcomponent of the
4038	   URI authority component is used for naming application groups.  It
4039	   uses a UDP port from the dynamic port range.  Multiple application
4040	   groups could be defined this way, each represented by a number and
4041	   associated port in the dynamic port range.

4043	      Application group name: 55685

4045	      Group URI: coap://grp.example:55685/light?foo=bar

4047	      CoAP group request
4048	         Header: GET(T=NON, Code=0.01, MID=0x7d41)
4049	         Uri-Host: "grp.example"
4050	         Uri-Path: "light"
4051	         Uri-Query: "foo=bar"

4053	        Figure 14: Example of application group name in the URI port

4055	Appendix C.  Examples of Group Discovery from CoAP Servers

4057	   This section provides examples for the different methods that a CoAP
4058	   client can use to discover application groups and CoAP groups by
4059	   interacting with CoAP servers, as defined in Section 2.2.3.2.

4061	   The examples build on the same assumptions considered in
4062	   Section 2.2.3.2.  In addition, a CoAP group is used and is identified
4063	   by the URI authority grp.example:5685.

4065	C.1.  Application Groups Associated with a CoAP Group

4067	   Figure 15 provides an example where a CoAP client discovers all the
4068	   application groups associated with a specific CoAP group.

4070	   As a result, the client gains knowledge of: i) the set of servers
4071	   that are members of the specified CoAP group and member of any of the
4072	   associated application groups; ii) for each of those servers, the
4073	   name of the application groups where the server is a member and that
4074	   are associated with the CoAP group.

4076	   Each of the servers S1 and S2 is identified by the IP source address
4077	   of the CoAP response.  If the client wishes to discover resources
4078	   that a particular server hosts within a particular application group,
4079	   it may use unicast discovery request(s) to this server, i.e., to its
4080	   respective unicast IP address.  Alternatively the client may use the
4081	   discovered group resource type (e.g., rt=g.light) to infer which
4082	   resources are present below the group resource.

4084	   The example semantics "g.<GROUPTYPE>" is used for the values of the
4085	   attribute "rt".

4087	      // Request to all members of the CoAP group
4088	      Req: GET coap://grp.example:5685/.well-known/core?rt=g.*

4090	      // Response from server S1, as member of:
4091	      //   - The CoAP group "grp.example:5685"
4092	      //   - The application group "gp1"
4093	      Res: 2.05 (Content)
4094	      Content-Format: 40 (application/link-format)
4095	      Payload:
4096	      </gp/gp1>;rt=g.light

4098	      // Response from server S2, as member of:
4099	      // - The CoAP group "grp.example:5685"
4100	      // - The application groups "gp1" and "gp2"
4101	      Res: 2.05 (Content)
4102	      Content-Format: 40 (application/link-format)
4103	      Payload:
4104	      </gp/gp1>;rt=g.light,
4105	      </gp/gp2>;rt=g.temp

4107	     Figure 15: Discovery of application groups associated with a CoAP
4108	                                   group

4110	C.2.  Members of a Given Application Group

4112	   Figure 16 provides an example where a CoAP client discovers the CoAP
4113	   servers that are members of a specific application group and the CoAP
4114	   group associated with the application group.

4116	   Note that, unlike in the example shown in Appendix C.1, now the
4117	   servers need to respond with an absolute URI and not a relative URI.
4118	   This is necessary because the responding CoAP endpoint serving the
4119	   Link Format document (on port 5683) is a different CoAP endpoint from
4120	   the one hosting the group resource "gp1" (on port 5685).  Due to this
4121	   situation, the responding server includes the full (absolute) URI in
4122	   the Link Format response from which the client can conveniently gain
4123	   knowledge of the CoAP group.

4125	   Also note that a server could equally well respond with the literal
4126	   IPv6 multicast address within square brackets instead of the CoAP
4127	   group name "grp.example".  In that case, the client would still gain
4128	   knowledge of the CoAP group, albeit in a different representation.

4130	      // Request to realm-local members of the application group "gp1"
4131	      Req: GET coap://[ff03::fd]/.well-known/core?href=/gp/gp1

4133	      // CoAP response from server S1, as member of:
4134	      //   - The CoAP group "grp.example:5685"
4135	      //   - The application group "gp1"
4136	      Res: 2.05 (Content)
4137	      Content-Format: 40 (application/link-format)
4138	      Payload:
4139	      <coap://grp.example:5685/gp/gp1>;rt=g.light

4141	      // CoAP response from server S2, as member of:
4142	      // - The CoAP group "grp.example:5685"
4143	      // - The application groups "gp1"
4144	      Res: 2.05 (Content)
4145	      Content-Format: 40 (application/link-format)
4146	      Payload:
4147	      <coap://grp.example:5685/gp/gp1>;rt=g.light

4149	     Figure 16: Discovery of members of an application group, together
4150	                       with the associated CoAP group

4152	C.3.  Members of any Application Group of a Given Type

4154	   Figure 17 provides an example where a CoAP client discovers the CoAP
4155	   servers that are members of any application group of a specific type,
4156	   and the CoAP group associated with those application groups.

4158	      // Request to realm-local members of application groups
4159	      // with group type "g.temp"
4160	      Req: GET coap://[ff03::fd]/.well-known/core?rt=g.temp

4162	      // Response from server S1, as member of:
4163	      //   - The CoAP group "grp.example:5685"
4164	      //   - The application group "gp1" of type "g.temp"
4165	      Res: 2.05 (Content)
4166	      Content-Format: 40 (application/link-format)
4167	      Payload:
4168	      <coap://grp.example:5685/gp/gp1>;rt=g.temp

4170	      // Response from server S2, as member of:
4171	      //   - The CoAP group "grp.example:5685"
4172	      //   - The application groups "gp1" and "gp2" of type "g.temp"
4173	      Res: 2.05 (Content)
4174	      Content-Format: 40 (application/link-format)
4175	      Payload:
4176	      <coap://grp.example:5685/gp/gp1>;rt=g.temp,
4177	      <coap://grp.example:5685/gp/gp2>;rt=g.temp

4179	         Figure 17: Discovery of members of application groups of a
4180	              specified type, and of the associated CoAP group

4182	C.4.  Members of any Application Group in the Network

4184	   Figure 18 provides an example where a CoAP client discovers the CoAP
4185	   servers that are members of any application group configured in the
4186	   6LoWPAN network of the client, and the CoAP group associated with
4187	   each application group.  In this example, the scope is realm-local to
4188	   address all servers in the current 6LoWPAN network of the client.

4190	   The example semantics "g.<GROUPTYPE>" is used for the values of the
4191	   attribute "rt".

4193	      // Request to realm-local members of any application group
4194	      Req: GET coap://[ff03::fd]/.well-known/core?rt=g.*

4196	      // Response from server S1, as member of:
4197	      //   - The CoAP groups "grp.example:5685" and "grp2.example"
4198	      //   - The application groups "gp1" and "gp5"
4199	      Res: 2.05 (Content)
4200	      Content-Format: 40 (application/link-format)
4201	      Payload:
4202	      <coap://grp.example:5685/gp/gp1>;rt=g.light,
4203	      <coap://grp2.example/gp/gp5>;rt=g.lock

4205	      // Response from server S2, as member of:
4206	      //   - The CoAP group "grp.example:5685"
4207	      //   - The application groups "gp1" and "gp2"
4208	      Res: 2.05 (Content)
4209	      Content-Format: 40 (application/link-format)
4210	      Payload:
4211	      <coap://grp.example:5685/gp/gp1>;rt=g.light,
4212	      <coap://grp.example:5685/gp/gp2>;rt=g.light

4214	      // Response from server S3, as member of:
4215	      //   - The CoAP group "grp2.example"
4216	      //   - The application group "gp5"
4217	      Res: 2.05 (Content)
4218	      Content-Format: 40 (application/link-format)
4219	      Payload:
4220	      <coap://grp2.example/gp/gp5>;rt=g.lock

4222	          Figure 18: Discovery of the resources and members of any
4223	            application group, and of the associated CoAP group

4225	   Alternatively, some applications may use the "rt" attribute on a
4226	   parent resource to denote support for a particular REST API to access
4227	   child resources.

4229	   For instance, Figure 19 provides a different example where a custom
4230	   Link Format attribute "gpt" is used to denote the group type within
4231	   the scope of the application/system.  An alternative, shorter
4232	   encoding (not shown in the figure) is to use only the value "1" for
4233	   each "gpt" attribute, in order to denote that the resource is of type
4234	   application group.  In that case, information about the semantics/API
4235	   of the group resource is disclosed only via the "rt" attribute as
4236	   shown in the figure.

4238	      // Request to realm-local members of any application group
4239	      Req: GET coap://[ff03::fd]/.well-known/core?gpt=*

4241	      // Response from server S1, as member of:
4242	      //   - The CoAP groups "grp.example:5685" and "grp2.example"
4243	      //   - The application groups "gp1" and "gp5"
4244	      Res: 2.05 (Content)
4245	      Content-Format: 40 (application/link-format)
4246	      Payload:
4247	      <coap://grp.example:5685/gp/gp1>;rt=oic.d.light;gpt=light,
4248	      <coap://grp2.example/gp/gp5>;rt=oic.d.smartlock;gpt=lock

4250	      // Response from server S2, as member of:
4251	      //   - The CoAP group "grp.example:5685"
4252	      //   - The application groups "gp1" and "gp2"
4253	      Res: 2.05 (Content)
4254	      Content-Format: 40 (application/link-format)
4255	      Payload:
4256	      <coap://grp.example:5685/gp/gp1>;rt=oic.d.light;gpt=light,
4257	      <coap://grp.example:5685/gp/gp2>;rt=oic.d.light;gpt=light

4259	      // Response from server S3, as member of:
4260	      //   - The CoAP group "grp2.example"
4261	      //   - The application group "gp5"
4262	      Res: 2.05 (Content)
4263	      Content-Format: 40 (application/link-format)
4264	      Payload:
4265	      <coap://grp2.example/gp/gp5>;rt=oic.d.smartlock;gpt=lock

4267	        Figure 19: Example of using a custom 'gpt' link attribute to
4268	                             denote group type

4270	Appendix D.  Examples of Message Exchanges

4272	   This section provides examples of different message exchanges when
4273	   CoAP is used with group communication.  The examples consider:

4275	   *  A client with address ADDR_CLIENT and port number PORT_CLIENT.

4277	   *  A CoAP group associated with the IP multicast address ADDR_GRP and
4278	      port number PORT_GRP.

4280	   *  An application group "gp1" associated with the CoAP group above.

4282	   *  Three servers A, B, and C, all of which are members of the CoAP
4283	      group above and of the application group "gp1".  Each server X
4284	      (with X equal to A, B, or C): listens to its own address ADDR_X
4285	      and port number PORT_X; and listens to the address ADDR_GRP and
4286	      port number PORT_GRP.  For each server its PORT_X may be different
4287	      from PORT_GRP or may be equal to it, in general.

4289	   In Figure 20, the client sends a Non-confirmable GET request to the
4290	   CoAP group, targeting the resource "temperature" in the application
4291	   group "gp1".

4293	 Client              A  B  C
4294	    |                |  |  |
4295	    |  GET           |  |  |
4296	    +-------+------->|  |  | Source: ADDR_CLIENT:PORT_CLIENT
4297	    |        \       |  |  | Destination: ADDR_GRP:PORT_GRP
4298	    |         +-------->|  | Header: GET (T=NON, Code=0.01, MID=0x7d41)
4299	    |          \     |  |  | Token: 0x86
4300	    |           +--------->| Uri-Path: "gp"
4301	    |                |  |  | Uri-Path: "gp1"
4302	    |                |  |  | Uri-Path: "temperature"
4303	    |                |  |  |

4305	    All servers reply with a 2.05 (Content) response, although the
4306	    response from server B is lost.

4308	    As source port number of their response, servers A and B use the
4309	    destination port number of the request, i.e., PORT_GRP.

4311	    |                |  |  |
4312	    |                |  |  |
4313	    |<---------------+  |  | Source: ADDR_A:PORT_GRP
4314	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4315	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x60b1)
4316	    |                |  |  | Token: 0x86
4317	    |                |  |  | Payload: "22.3 C"
4318	    |                |  |  |
4319	    | Lost X <----------+  | Source: ADDR_B:PORT_GRP
4320	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4321	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x01a0)
4322	    |                |  |  | Token: 0x86
4323	    |                |  |  | Payload: "20.9 C"
4324	    |                |  |  |

4326	    As source port number of its response, server C uses its own port
4327	    number PORT_C.

4329	    |                |  |  |
4330	    |                |  |  |
4331	    |<---------------------+ Source: ADDR_C:PORT_C
4332	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4333	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x952a)
4334	    |                |  |  | Token: 0x86
4335	    |                |  |  | Payload: "21.0 C"
4336	    |                |  |  |

4338	    Figure 20: Example of Non-confirmable group request, followed by
4339	                       Non-confirmable Responses

4341	   In Figure 21, the client sends a Non-confirmable GET request to the
4342	   CoAP group, targeting and requesting to observe the resource
4343	   "temperature" in the application group "gp1".

4345	 Client              A  B  C
4346	    |                |  |  |
4347	    |  GET           |  |  |
4348	    +-------+------->|  |  | Source: ADDR_CLIENT:PORT_CLIENT
4349	    |        \       |  |  | Destination: ADDR_GRP:PORT_GRP
4350	    |         +-------->|  | Header: GET (T=NON, Code=0.01, MID=0x7d41)
4351	    |          \     |  |  | Token: 0x86
4352	    |           +--------->| Observe: 0 (register)
4353	    |                |  |  | Uri-Path: "gp"
4354	    |                |  |  | Uri-Path: "gp1"
4355	    |                |  |  | Uri-Path: "temperature"
4356	    |                |  |  |

4358	    All servers reply with a 2.05 (Content) notification response.

4360	    As source port number of their response, servers A and B use the
4361	    destination port number of the request, i.e., PORT_GRP.

4363	    |                |  |  |
4364	    |                |  |  |
4365	    |<---------------+  |  | Source: ADDR_A:PORT_GRP
4366	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4367	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x60b1)
4368	    |                |  |  | Token: 0x86
4369	    |                |  |  | Observe: 3
4370	    |                |  |  | Payload: "22.3 C"
4371	    |                |  |  |
4372	    |<------------------+  | Source: ADDR_B:PORT_GRP
4373	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4374	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x01a0)
4375	    |                |  |  | Token: 0x86
4376	    |                |  |  | Observe: 13
4377	    |                |  |  | Payload: "20.9 C"

4379	    As source port number of its response, server C uses its own port
4380	    number PORT_C.

4382	    |                |  |  |
4383	    |                |  |  |
4384	    |<---------------------+ Source: ADDR_C:PORT_C
4385	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4386	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x952a)
4387	    |                |  |  | Token: 0x86
4388	    |                |  |  | Observe: 23
4389	    |                |  |  | Payload: "21.0 C"
4390	    |                |  |  |

4392	    Some time later, the temperature changes.

4394	    All servers send a 2.05 (Content) notification response, with the
4395	    new representation of the "temperature" resource as payload.

4397	    |                |  |  |
4398	    |                |  |  |
4399	    |<---------------+  |  | Source: ADDR_A:PORT_GRP
4400	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4401	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x60b2)
4402	    |                |  |  | Token: 0x86
4403	    |                |  |  | Observe: 7
4404	    |                |  |  | Payload: "32.3 C"
4405	    |                |  |  |
4406	    |<------------------+  | Source: ADDR_B:PORT_GRP
4407	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4408	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x01a1)
4409	    |                |  |  | Token: 0x86
4410	    |                |  |  | Observe: 18
4411	    |                |  |  | Payload: "30.9 C"
4412	    |                |  |  |
4413	    |<---------------------+ Source: ADDR_C:PORT_C
4414	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4415	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x952b)
4416	    |                |  |  | Token: 0x86
4417	    |                |  |  | Observe: 29
4418	    |                |  |  | Payload: "31.0 C"
4419	    |                |  |  |

4421	      Figure 21: Example of Non-confirmable Observe group request,
4422	    followed by Non- confirmable Responses as Observe notifications

4424	   In Figure 22, the client sends a Non-confirmable GET request to the
4425	   CoAP group, targeting the resource "log" in the application group
4426	   "gp1", and requesting a blockwise transfer.

4428	 Client              A  B  C
4429	    |                |  |  |
4430	    |  GET           |  |  |
4431	    +-------+------->|  |  | Source: ADDR_CLIENT:PORT_CLIENT
4432	    |        \       |  |  | Destination: ADDR_GRP:PORT_GRP
4433	    |         +-------->|  | Header: GET (T=NON, Code=0.01, MID=0x7d41)
4434	    |          \     |  |  | Token: 0x86
4435	    |           +--------->| Uri-Path: "gp"
4436	    |                |  |  | Uri-Path: "gp1"
4437	    |                |  |  | Uri-Path: "log"
4438	    |                |  |  | Block2: 0/0/64
4439	    |                |  |  |

4441	    All servers reply with a 2.05 (Content) response including the first
4442	    block.

4444	    As source port number of its response, each server uses its own port
4445	    number.

4447	    |                |  |  |
4448	    |                |  |  |
4449	    |<---------------+  |  | Source: ADDR_A:PORT_A
4450	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4451	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x60b1)
4452	    |                |  |  | Token: 0x86
4453	    |                |  |  | Block2: 0/1/64
4454	    |                |  |  | Payload: 0x0a00 ...
4455	    |                |  |  |
4456	    |<------------------+  | Source: ADDR_B:PORT_B
4457	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4458	    |                |  |  | Header: 2.05 (T=NON, Code=2.05, MID=0x01a0)
4459	    |                |  |  | Token: 0x86
4460	    |                |  |  | Block2: 0/1/64
4461	    |                |  |  | Payload: 0x0b00 ...
4462	    |                |  |  |
4463	    |<---------------------+ Source: ADDR_C:PORT_C
4464	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4465	    |                |  |  | Header: 2.05 (T=NON, Code=4.04, MID=0x952a)
4466	    |                |  |  | Token: 0x86
4467	    |                |  |  | Block2: 0/1/64
4468	    |                |  |  | Payload: 0x0c00 ...
4469	    |                |  |  |

4471	    After obtaining the first block, the client requests the following
4472	    blocks separately from each server, by means of unicast exchanges.

4474	    The client requests the following blocks from server A.

4476	    |                |  |  |
4477	    |  GET           |  |  |
4478	    +--------------->|  |  | Source: ADDR_CLIENT:PORT_CLIENT
4479	    |                |  |  | Destination: ADDR_A:PORT_A
4480	    |                |  |  | Header: GET (T=CON, Code=0.01, MID=0x7d42)
4481	    |                |  |  | Token: 0xa6
4482	    |                |  |  | Uri-Path: "gp"
4483	    |                |  |  | Uri-Path: "gp1"
4484	    |                |  |  | Uri-Path: "log"
4485	    |                |  |  | Block2: 1/0/64
4486	    |                |  |  |
4487	    |<---------------+  |  | Source: ADDR_A:PORT_A
4488	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4489	    |                |  |  | Header: 2.05 (T=ACK, Code=2.05, MID=0x7d42)
4490	    |                |  |  | Token: 0xa6
4491	    |                |  |  | Block2: 1/1/64
4492	    |                |  |  | Payload: 0x0a01 ...
4493	    |                |  |  |
4494	    |  GET           |  |  |
4495	    +--------------->|  |  | Source: ADDR_CLIENT:PORT_CLIENT
4496	    |                |  |  | Destination: ADDR_A:PORT_A
4497	    |                |  |  | Header: GET (T=CON, Code=0.01, MID=0x7d43)
4498	    |                |  |  | Token: 0xa7
4499	    |                |  |  | Uri-Path: "gp"
4500	    |                |  |  | Uri-Path: "gp1"
4501	    |                |  |  | Uri-Path: "log"
4502	    |                |  |  | Block2: 2/0/64
4503	    |                |  |  |
4504	    |<---------------+  |  | Source: ADDR_A:PORT_A
4505	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4506	    |                |  |  | Header: 2.05 (T=ACK, Code=2.05, MID=0x7d43)
4507	    |                |  |  | Token: 0xa7
4508	    |                |  |  | Block2: 2/0/64
4509	    |                |  |  | Payload: 0x0a02 ...
4510	    |                |  |  |

4512	    The client requests the following blocks from server B.

4514	    |                |  |  |
4515	    |  GET           |  |  |
4516	    +------------------>|  | Source: ADDR_CLIENT:PORT_CLIENT
4517	    |                |  |  | Destination: ADDR_B:PORT_B
4518	    |                |  |  | Header: GET (T=CON, Code=0.01, MID=0x7d44)
4519	    |                |  |  | Token: 0xb6
4520	    |                |  |  | Uri-Path: "gp"
4521	    |                |  |  | Uri-Path: "gp1"
4522	    |                |  |  | Uri-Path: "log"
4523	    |                |  |  | Block2: 1/0/64
4524	    |                |  |  |
4525	    |<------------------+  | Source: ADDR_B:PORT_B
4526	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4527	    |                |  |  | Header: 2.05 (T=ACK, Code=2.05, MID=0x7d44)
4528	    |                |  |  | Token: 0xb6
4529	    |                |  |  | Block2: 1/1/64
4530	    |                |  |  | Payload: 0x0b01 ...
4531	    |                |  |  |
4532	    |  GET           |  |  |
4533	    +------------------>|  | Source: ADDR_CLIENT:PORT_CLIENT
4534	    |                |  |  | Destination: ADDR_C:PORT_B
4535	    |                |  |  | Header: GET (T=CON, Code=0.01, MID=0x7d45)
4536	    |                |  |  | Token: 0xb7
4537	    |                |  |  | Uri-Path: "gp"
4538	    |                |  |  | Uri-Path: "gp1"
4539	    |                |  |  | Uri-Path: "log"
4540	    |                |  |  | Block2: 2/0/64
4541	    |                |  |  |
4542	    |<------------------+  | Source: ADDR_B:PORT_B
4543	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4544	    |                |  |  | Header: 2.05 (T=ACK, Code=2.05, MID=0x7d45)
4545	    |                |  |  | Token: 0xb7
4546	    |                |  |  | Block2: 2/0/64
4547	    |                |  |  | Payload: 0x0b02 ...
4548	    |                |  |  |

4550	    The client requests the following blocks from server C.

4552	    |                |  |  |
4553	    |  GET           |  |  |
4554	    +--------------------->| Source: ADDR_CLIENT:PORT_CLIENT
4555	    |                |  |  | Destination: ADDR_C:PORT_C
4556	    |                |  |  | Header: GET (T=CON, Code=0.01, MID=0x7d46)
4557	    |                |  |  | Token: 0xc6
4558	    |                |  |  | Uri-Path: "gp"
4559	    |                |  |  | Uri-Path: "gp1"
4560	    |                |  |  | Uri-Path: "log"
4561	    |                |  |  | Block2: 1/0/64
4562	    |                |  |  |
4563	    |<---------------------+ Source: ADDR_C:PORT_C
4564	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4565	    |                |  |  | Header: 2.05 (T=ACK, Code=2.05, MID=0x7d46)
4566	    |                |  |  | Token: 0xc6
4567	    |                |  |  | Block2: 1/1/64
4568	    |                |  |  | Payload: 0x0c01 ...
4569	    |                |  |  |
4570	    |  GET           |  |  |
4571	    +--------------------->| Source: ADDR_CLIENT:PORT_CLIENT
4572	    |                |  |  | Destination: ADDR_C:PORT_C
4573	    |                |  |  | Header: GET (T=CON, Code=0.01, MID=0x7d47)
4574	    |                |  |  | Token: 0xc7
4575	    |                |  |  | Uri-Path: "gp"
4576	    |                |  |  | Uri-Path: "gp1"
4577	    |                |  |  | Uri-Path: "log"
4578	    |                |  |  | Block2: 2/0/64
4579	    |                |  |  |
4580	    |<---------------------+ Source: ADDR_C:PORT_C
4581	    |          2.05  |  |  | Destination: ADDR_CLIENT:PORT_CLIENT
4582	    |                |  |  | Header: 2.05 (T=ACK, Code=2.05, MID=0x7d47)
4583	    |                |  |  | Token: 0xc7
4584	    |                |  |  | Block2: 2/0/64
4585	    |                |  |  | Payload: 0x0c02 ...
4586	    |                |  |  |

4588	     Figure 22: Example of Non-confirmable group request starting a
4589	     blockwise transfer, followed by Non-confirmable Responses with
4590	   the first block.  The transfer continues over confirmable unicast
4591	                               exchanges

4593	Appendix E.  Issues and Limitations with Forward-Proxies

4595	   Section 3.5.1 defines how a forward-proxy sends (e.g., multicasts) a
4596	   CoAP group request to the group URI specified in the request from the
4597	   client.  After that, the proxy receives the responses and forwards
4598	   all the individual (unicast) responses back to the client.

4600	   However, there are certain issues and limitations with this approach:

4602	   *  The CoAP client component that has sent the unicast CoAP group
4603	      request to the proxy may be expecting only one (unicast) response,
4604	      as usual for a CoAP unicast request.  Instead, it receives
4605	      multiple (unicast) responses, potentially leading to fault
4606	      conditions in the component or to discarding any received
4607	      responses following the first one.  This issue may occur even if
4608	      the application calling the CoAP client component is aware that
4609	      the forward-proxy is going to forward the CoAP group request to
4610	      the group URI.

4612	   *  Each individual CoAP response received by the client will appear
4613	      to originate (based on its IP source address) from the CoAP proxy,
4614	      and not from the server that produced the response.  This makes it
4615	      impossible for the client to identify the server that produced
4616	      each response, unless the server identity is contained as a part
4617	      of the response payload or inside a CoAP option in the response.

4619	   *  Unlike a CoAP client, the proxy is likely to lack "application
4620	      context".  In particular, the proxy is not expected to know how
4621	      many members there are in the CoAP group (not even the order of
4622	      magnitude), how many members of that group will actually respond,
4623	      or the minimal amount/percentage of those that will respond.

4625	      Therefore, while still capable of forwarding the group request to
4626	      the CoAP group and the corresponding responses to the client, the
4627	      proxy does not know and cannot reliably determine for how long to
4628	      collect responses, before it stops forwarding them to the client.

4630	      In principle, a CoAP client that is not using a proxy might face
4631	      the same problems in collecting responses to a group request.
4632	      However, unlike a CoAP proxy, the client itself would typically
4633	      have application-specific rules or knowledge on how to handle this
4634	      situation.  For example, a CoAP client could monitor incoming
4635	      responses and use this information to decide for how long to
4636	      continue collecting responses

4638	   An alternative solution is for the proxy to collect all the
4639	   individual (unicast) responses to a CoAP group request and then send
4640	   back only a single (aggregated) response to the client.  However,
4641	   this solution brings up new issues:

4643	   *  Like for the approach discussed above, the proxy does not know for
4644	      how long to collect responses before sending back the aggregated
4645	      response to the client.  Analogous considerations apply to this
4646	      approach too, both on the client and proxy side.

4648	   *  There is no default format defined in CoAP for aggregation of
4649	      multiple responses into a single response.  Such a format could be
4650	      standardized based on, for example, the multipart Content-Format
4651	      [RFC8710].

4653	   Finally, Section 3.5.1 refers to [RFC8075] for the operation of HTTP-
4654	   to-CoAP proxies for multicast CoAP requests.  This relies on the
4655	   "application/http" media type to let the proxy return multiple CoAP
4656	   responses -- each translated to an HTTP response -- back to the HTTP
4657	   client.  Of course, in this case the HTTP client sending a group URI
4658	   to the proxy needs to be aware that it is going to receive this
4659	   format, and needs to be able to decode it into the responses of
4660	   multiple CoAP servers.  Also, the IP source address of each CoAP
4661	   response cannot be determined anymore from the "application/http"
4662	   response.  The HTTP client may still be able to identify the CoAP
4663	   servers by other means such as application-specific information in
4664	   the response payload.

4666	Appendix F.  Issues and Limitations with Reverse-Proxies

4668	   Section 3.5.2 defines how a reverse-proxy sends a group request to
4669	   servers in a CoAP group, over a one-to-many transport such as IP/UDP
4670	   multicast.  This results in certain issues and limitations:

4672	   *  The three issues and limitations defined in Section 3.5.1 for a
4673	      forward proxy apply to a reverse-proxy as well.

4675	   *  A reverse-proxy may have preconfigured time duration(s) that are
4676	      used for collecting server responses and forwarding these back to
4677	      the client.  These duration(s) may be set as global configuration
4678	      or as resource-specific configurations.  If there is such
4679	      preconfiguration, then it is not necessarily needed that the
4680	      client's request explicitly indicates the time duration that the
4681	      reverse-proxy has to use (e.g., like it is indicated when using
4682	      the realization of proxy specified in
4683	      [I-D.ietf-core-groupcomm-proxy]).  Note that a reverse-proxy is in
4684	      an explicit relationship with the origin servers it stands in for.
4685	      Thus, compared to a forward-proxy, it has a much better basis for
4686	      determining and configuring such time durations.

4688	   *  A client that is configured to access a reverse-proxy resource
4689	      (i.e., one that triggers a CoAP group communication request)
4690	      should be configured also to handle potentially multiple responses
4691	      with the same Token value caused by a single request.

4693	      That is, the client needs to preserve the Token value used for the
4694	      request also after the reception of the first response forwarded
4695	      back by the proxy (see Section 3.1.6) and keep the request open to
4696	      potential further responses with this Token.  This requirement can
4697	      be met by a combination of client implementation and proper
4698	      proxied group communication configuration on the client.

4700	Appendix G.  Document Updates

4702	   This section is to be removed before publishing as an RFC.

4704	G.1.  Version -14 to -15

4706	   *  DNS is only one possible name resolution service.

4708	   *  DNS and IP6.ARPA can be used for IPv6 reverse mapping.

4710	   *  Appropriate use of normative language.

4712	   *  Discouraged the NoSec mode already in Section 1.

4714	   *  Clarifications:

4716	      -  Only Any Source Multicast (ASM) is in scope.

4718	      -  Scope of the document about proxy operations.

4720	      -  Strategies for repeating a group request.

4722	      -  Interspersing confirmable Observe notifications.

4724	      -  How the leisure period applies to Observe notifications.

4726	   *  Revised definitions of parameters for congestion control.

4728	   *  More content on amplification attacks:

4730	      -  Early heads-up and forward pointers.

4732	      -  Revised presentation of attacks and mitigations.

4734	      -  New section on mitigating the attacks with the Echo option.

4736	   *  Updated references.

4738	   *  Editorial improvements.

4740	G.2.  Version -13 to -14

4742	   *  More context information in the abstract and introduction.

4744	   *  Imported examples from RFC 7390 into Appendix A "Use Cases".

4746	   *  Early mentioning Group OSCORE and source authentication of
4747	      messages.

4749	   *  Updated references.

4751	   *  Minor fixes and editorial improvements.

4753	G.3.  Version -12 to -13

4755	   *  Updated author list.

4757	   *  Registering Resource Type values is not strictly required.

4759	   *  Highlighted what is used simply as an example.

4761	   *  Added further alternative to follow-up with group requests using
4762	      the Block2 Option.

4764	   *  Justified importance of possibly repeating requests.

4766	   *  Explicitly mentioned Observe as a reason for follow-on responses.

4768	   *  Recommended use of a mitigation against abuses of the No-Response
4769	      Option.

4771	   *  Described the use of the Echo option like done in draft-ietf-core-
4772	      oscore-groupcomm.

4774	   *  Clarified possible use of CoAP over reliable transports.

4776	   *  Given more context around prioritized packet forwarding in
4777	      6LoWPAN.

4779	   *  Expanded considerations about replayed group requests.

4781	   *  Clarifications and editorial improvements.

4783	G.4.  Version -11 to -12

4785	   *  Clarified how a group name can be included in a URI path for
4786	      reverse proxies; removed reference to URI templates for reverse
4787	      proxies.

4789	   *  Clarified the issue of identical ETags from multiple servers and
4790	      added strategies to cope with this.  Removed recommendation to not
4791	      use such duplicate ETags.

4793	   *  Simplified section on application group naming using URI authority
4794	      and corresponding appendix examples; declaring new Option solution
4795	      out of scope.

4797	   *  Added application group resource URI path(s) in Figure 1.

4799	   *  Clarified outcome of the RFC 7390 experiment on group membership
4800	      configuration protocol.

4802	   *  Clarified that rt=g.<GROUPTYPE> is used just as an example.

4804	   *  Made RFC 7967 a normative reference.

4806	   *  Generalized resending of a group request with different Message
4807	      ID.

4809	   *  Switched SHOULD to MAY on changing port number from group request
4810	      to response.

4812	   *  Further generalized the handling of multiple responses from the
4813	      same server to the same request.

4815	   *  Clarifications on response suppression.

4817	   *  Issues and limitations with Forward-Proxies compiled in an
4818	      appendix.

4820	   *  Issues and limitations with Reverse-Proxies compiled in an
4821	      appendix.

4823	   *  Mentioned PROBING_RATE as a means to enforce congestion control.

4825	   *  Consideration on how eventual consistency from Observe compensates
4826	      for lost notifications.

4828	   *  Admitted resource retrieval through consecutive group requests
4829	      with the Block2 Option.

4831	   *  Clarified relationship with TCP/TLS/WebSockets.

4833	   *  Clarified security on the different legs with a proxy.

4835	   *  Editorial improvements.

4837	G.5.  Version -10 to -11

4839	   *  Updated references.

4841	   *  Editorial improvements.

4843	G.6.  Version -09 to -10

4845	   *  Clarified use of NoSec for 'early discovery' and refer to cBRSKI.

4847	   *  Clarified mandatory vs optional elements in CoAP group and CoAP
4848	      group URI.

4850	   *  Replaced "GROUPNAME" with "APPNAME".

4852	   *  Explicitly mentioning of the type of group (CoAP/application/
4853	      security).

4855	   *  Use of .example for example hostnames.

4857	   *  The name of a security group is not necessarily a string.

4859	   *  Changed "has to" to "should" for enforcing access control based on
4860	      membership to security groups.

4862	   *  Used normative language for policies about group rekeying.

4864	   *  Further stressed that group communication ought to be secured.

4866	   *  Avoid calling applications as "(non-)sensitive" and
4867	      "(non-)critical".

4869	   *  Clarification on source authentication, source addresses, and Echo
4870	      Option.

4872	   *  Editorial fixes and improvements.

4874	G.7.  Version -08 to -09

4876	   *  Multiple responses in long exchanges are non-traditional
4877	      responses.

4879	   *  Updated references.

4881	G.8.  Version -07 to -08

4883	   *  Updated references.

4885	G.9.  Version -06 to -07

4887	   *  Updated list of changes to other documents.

4889	   *  Added real-life context and clarifications to examples.

4891	   *  Clarified aliasing of CoAP group names.

4893	   *  Clarified use of security group names.

4895	   *  Clarified response suppression.

4897	   *  Clarified response revalidation.

4899	   *  Clarified limitations and peculiarities when using proxies.

4901	   *  Discussed the case of group request sent to multiple proxies at
4902	      once.

4904	   *  Discussed limited use of reliable transports with block-wise
4905	      transfer.

4907	   *  Revised text on joining CoAP groups and multicast routing.

4909	   *  Clarified use/avoidance of the CoAP NoSec mode.

4911	   *  Moved examples of application group naming and group discovery to
4912	      appendix sections.

4914	   *  Revised list of references.

4916	   *  Updated list of implementations supporting group communication.

4918	   *  Editorial improvements.

4920	G.10.  Version -05 to -06

4922	   *  Harmonized use of "group URI".

4924	   *  Clarifications about different group types.

4926	   *  Revised methods to perform group naming.

4928	   *  Revised methods to discover application groups and CoAP groups.

4930	   *  Explicit difference between "authentication credential" and
4931	      "public key".

4933	   *  Added examples of application group naming.

4935	   *  Added examples of application/CoAP group discovery.

4937	   *  Added examples of message exchanges.

4939	   *  Reference to draft-mattsson-core-coap-attacks replaced with
4940	      reference to draft-mattsson-t2trg-amplification-attacks.

4942	   *  Editorial improvements.

4944	G.11.  Version -04 to -05

4946	   *  Clarified changes to other documents.

4948	   *  Clarified relationship between different group types.

4950	   *  Clarified discovery of application groups.

4952	   *  Discussed methods to express application group names in requests.

4954	   *  Revised and extended text on the NoSec mode and amplification
4955	      attacks.

4957	   *  Rephrased backward/forward security as properties.

4959	   *  Removed appendix on Multi-ETag Option for response revalidation.

4961	   *  Editorial improvements.

4963	G.12.  Version -03 to -04

4965	   *  Multi-ETag Option for response revalidation moved to appendix.

4967	   *  ETag Option usage added.

4969	   *  Q-Block Options added in the block-wise transfer section.

4971	   *  Caching at proxies moved to draft-tiloca-core-groupcomm-proxy.

4973	   *  Client-Proxy response revalidation with the Group-ETag Option
4974	      moved to draft-tiloca-core-groupcomm-proxy.

4976	   *  Security considerations on amplification attacks.

4978	   *  Generalized transport protocols to include others than UDP/IP
4979	      multicast; and security protocols other than Group OSCORE.

4981	   *  Overview of security cases with proxies.

4983	   *  Editorial improvements.

4985	G.13.  Version -02 to -03

4987	   *  Multiple responses from same server handled at the application.

4989	   *  Clarifications about issues with forward-proxies.

4991	   *  Operations for reverse-proxies.

4993	   *  Caching of responses at proxies.

4995	   *  Client-Server response revalidation, with Multi-ETag Option.

4997	   *  Client-Proxy response revalidation, with the Group-ETag Option.

4999	G.14.  Version -01 to -02

5001	   *  Clarified relationship between security groups and application
5002	      groups.

5004	   *  Considered also FETCH for requests over IP multicast.

5006	   *  More details on Observe re-registration.

5008	   *  More details on Proxy intermediaries.

5010	   *  More details on servers changing port number in the response.

5012	   *  Usage of the Uri-Host Option to indicate an application group.

5014	   *  Response suppression based on classes of error codes.

5016	G.15.  Version -00 to -01

5018	   *  Clarifications on group memberships for the different group types.

5020	   *  Simplified description of Token reusage, compared to the unicast
5021	      case.

5023	   *  More details on the rationale for response suppression.

5025	   *  Clarifications of creation and management of security groups.

5027	   *  Clients more knowledgeable than proxies about stopping receiving
5028	      responses.

5030	   *  Cancellation of group observations.

5032	   *  Clarification on multicast scope to use.

5034	   *  Both the group mode and pairwise mode of Group OSCORE are
5035	      considered.

5037	   *  Updated security considerations.

5039	   *  Editorial improvements.

5041	Acknowledgements

5043	   The authors sincerely thank Christian Amsüss, Mike Bishop, Carsten
5044	   Bormann, Roni Even, Thomas Fossati, Rikard Höglund, Jaime Jiménez,
5045	   John Preuß Mattsson, Jim Schaad, Jon Shallow, Petr Špaček, Sean
5046	   Turner, and Magnus Westerlund for their comments and feedback.

5048	   The work on this document has been partly supported by the Sweden's
5049	   Innovation Agency VINNOVA and the Celtic-Next projects CRITISEC and
5050	   CYPRESS; and by the H2020 projects SIFIS-Home (Grant agreement
5051	   952652) and ARCADIAN-IoT (Grant agreement 101020259).

5053	Authors' Addresses

5055	   Esko Dijk
5056	   IoTconsultancy.nl
5057	   Utrecht
5058	   Netherlands
5059	   Email: esko.dijk@iotconsultancy.nl
5060	   Marco Tiloca
5061	   RISE AB
5062	   Isafjordsgatan 22
5063	   SE-16440 Stockholm Kista
5064	   Sweden
5065	   Email: marco.tiloca@ri.se









