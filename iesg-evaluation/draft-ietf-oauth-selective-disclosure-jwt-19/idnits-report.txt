idnits 2.17.1 

draft-ietf-oauth-selective-disclosure-jwt-19.txt:
-(2579): Line appears to be too long, but this could be caused by non-ascii characters in UTF-8 encoding

  Showing Errors (**), Flaws (~~), Warnings (==), and Comments (--).
  Errors MUST be fixed before draft submission.  Flaws SHOULD be fixed before draft submission.

  Checking boilerplate required by RFC 5378 and the IETF Trust (see
  https://trustee.ietf.org/license-info):
  ----------------------------------------------------------------------------

     No issues found here.

  Checking nits according to https://www.ietf.org/id-info/1id-guidelines.txt:
  ----------------------------------------------------------------------------

  == There are 21 instances of lines with non-ascii characters in the
     document.


  Running in submission checking mode -- *not* checking nits according to
  https://www.ietf.org/id-info/checklist .
  ----------------------------------------------------------------------------


     Summary: 0 errors (**), 0 flaws (~~), 1 warning (==), 0 comments (--).

--------------------------------------------------------------------------------


2	Web Authorization Protocol                                       D. Fett
3	Internet-Draft                                                  Authlete
4	Intended status: Standards Track                               K. Yasuda
5	Expires: 13 November 2025                                Keio University
6	                                                             B. Campbell
7	                                                           Ping Identity
8	                                                             12 May 2025

10	                 Selective Disclosure for JWTs (SD-JWT)
11	              draft-ietf-oauth-selective-disclosure-jwt-19

13	Abstract

15	   This specification defines a mechanism for the selective disclosure
16	   of individual elements of a JSON data structure used as the payload
17	   of a JSON Web Signature (JWS).  The primary use case is the selective
18	   disclosure of JSON Web Token (JWT) claims.

20	Discussion Venues

22	   This note is to be removed before publishing as an RFC.

24	   Discussion of this document takes place on the Web Authorization
25	   Protocol Working Group mailing list (oauth@ietf.org), which is
26	   archived at https://mailarchive.ietf.org/arch/browse/oauth/.

28	   Source for this draft and an issue tracker can be found at
29	   https://github.com/oauth-wg/oauth-selective-disclosure-jwt.

31	Status of This Memo

33	   This Internet-Draft is submitted in full conformance with the
34	   provisions of BCP 78 and BCP 79.

36	   Internet-Drafts are working documents of the Internet Engineering
37	   Task Force (IETF).  Note that other groups may also distribute
38	   working documents as Internet-Drafts.  The list of current Internet-
39	   Drafts is at https://datatracker.ietf.org/drafts/current/.

41	   Internet-Drafts are draft documents valid for a maximum of six months
42	   and may be updated, replaced, or obsoleted by other documents at any
43	   time.  It is inappropriate to use Internet-Drafts as reference
44	   material or to cite them other than as "work in progress."

46	   This Internet-Draft will expire on 13 November 2025.

48	Copyright Notice

50	   Copyright (c) 2025 IETF Trust and the persons identified as the
51	   document authors.  All rights reserved.

53	   This document is subject to BCP 78 and the IETF Trust's Legal
54	   Provisions Relating to IETF Documents (https://trustee.ietf.org/
55	   license-info) in effect on the date of publication of this document.
56	   Please review these documents carefully, as they describe your rights
57	   and restrictions with respect to this document.  Code Components
58	   extracted from this document must include Revised BSD License text as
59	   described in Section 4.e of the Trust Legal Provisions and are
60	   provided without warranty as described in the Revised BSD License.

62	Table of Contents

64	   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
65	     1.1.  Feature Summary . . . . . . . . . . . . . . . . . . . . .   5
66	     1.2.  Conventions and Terminology . . . . . . . . . . . . . . .   5
67	   2.  Flow Diagram  . . . . . . . . . . . . . . . . . . . . . . . .   6
68	   3.  Concepts  . . . . . . . . . . . . . . . . . . . . . . . . . .   7
69	     3.1.  SD-JWT and Disclosures  . . . . . . . . . . . . . . . . .   7
70	     3.2.  Disclosing to a Verifier  . . . . . . . . . . . . . . . .   8
71	     3.3.  Optional Key Binding  . . . . . . . . . . . . . . . . . .   8
72	     3.4.  Verification  . . . . . . . . . . . . . . . . . . . . . .   8
73	   4.  SD-JWT and SD-JWT+KB Data Formats . . . . . . . . . . . . . .   9
74	     4.1.  Issuer-signed JWT . . . . . . . . . . . . . . . . . . . .  10
75	       4.1.1.  Hash Function Claim . . . . . . . . . . . . . . . . .  11
76	       4.1.2.  Key Binding . . . . . . . . . . . . . . . . . . . . .  12
77	     4.2.  Disclosures . . . . . . . . . . . . . . . . . . . . . . .  12
78	       4.2.1.  Disclosures for Object Properties . . . . . . . . . .  13
79	       4.2.2.  Disclosures for Array Elements  . . . . . . . . . . .  14
80	       4.2.3.  Hashing Disclosures . . . . . . . . . . . . . . . . .  15
81	       4.2.4.  Embedding Disclosure Digests in SD-JWTs . . . . . . .  15
82	       4.2.5.  Decoy Digests . . . . . . . . . . . . . . . . . . . .  17
83	       4.2.6.  Recursive Disclosures . . . . . . . . . . . . . . . .  17
84	     4.3.  Key Binding JWT . . . . . . . . . . . . . . . . . . . . .  19
85	       4.3.1.  Binding to an SD-JWT  . . . . . . . . . . . . . . . .  20
86	       4.3.2.  Validating the Key Binding JWT  . . . . . . . . . . .  20
87	   5.  Example SD-JWT  . . . . . . . . . . . . . . . . . . . . . . .  20
88	     5.1.  Issuance  . . . . . . . . . . . . . . . . . . . . . . . .  20
89	     5.2.  Presentation  . . . . . . . . . . . . . . . . . . . . . .  25
90	   6.  Considerations on Nested Data in SD-JWTs  . . . . . . . . . .  27
91	     6.1.  Example: Flat SD-JWT  . . . . . . . . . . . . . . . . . .  28
92	     6.2.  Example: Structured SD-JWT  . . . . . . . . . . . . . . .  29
93	     6.3.  Example: SD-JWT with Recursive Disclosures  . . . . . . .  30
94	   7.  Verification and Processing . . . . . . . . . . . . . . . . .  32
95	     7.1.  Verification of the SD-JWT  . . . . . . . . . . . . . . .  32
96	     7.2.  Processing by the Holder  . . . . . . . . . . . . . . . .  34
97	     7.3.  Verification by the Verifier  . . . . . . . . . . . . . .  35
98	   8.  JWS JSON Serialization  . . . . . . . . . . . . . . . . . . .  36
99	     8.1.  New Unprotected Header Parameters . . . . . . . . . . . .  36
100	     8.2.  Flattened JSON Serialization  . . . . . . . . . . . . . .  36
101	     8.3.  General JSON Serialization  . . . . . . . . . . . . . . .  38
102	     8.4.  Verification of the JWS JSON Serialized SD-JWT  . . . . .  40
103	   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  40
104	     9.1.  Mandatory Signing of the Issuer-signed JWT  . . . . . . .  40
105	     9.2.  Manipulation of Disclosures . . . . . . . . . . . . . . .  41
106	     9.3.  Entropy of the Salt . . . . . . . . . . . . . . . . . . .  41
107	     9.4.  Choice of a Hash Algorithm  . . . . . . . . . . . . . . .  42
108	     9.5.  Key Binding . . . . . . . . . . . . . . . . . . . . . . .  43
109	     9.6.  Concealing Claim Names  . . . . . . . . . . . . . . . . .  44
110	     9.7.  Selectively-Disclosable Validity Claims . . . . . . . . .  44
111	     9.8.  Distribution and Rotation of Issuer Signature Verification
112	            Key  . . . . . . . . . . . . . . . . . . . . . . . . . .  45
113	     9.9.  Forwarding Credentials  . . . . . . . . . . . . . . . . .  45
114	     9.10. Integrity of SD-JWTs and SD-JWT+KBs . . . . . . . . . . .  45
115	     9.11. Explicit Typing . . . . . . . . . . . . . . . . . . . . .  46
116	     9.12. Key Pair Generation and Lifecycle Management  . . . . . .  46
117	   10. Privacy Considerations  . . . . . . . . . . . . . . . . . . .  46
118	     10.1.  Unlinkability  . . . . . . . . . . . . . . . . . . . . .  47
119	     10.2.  Storage of User Data . . . . . . . . . . . . . . . . . .  49
120	     10.3.  Confidentiality during Transport . . . . . . . . . . . .  50
121	     10.4.  Decoy Digests  . . . . . . . . . . . . . . . . . . . . .  50
122	     10.5.  Issuer Identifier  . . . . . . . . . . . . . . . . . . .  51
123	   11. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  51
124	   12. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  52
125	     12.1.  JSON Web Token Claims Registration . . . . . . . . . . .  52
126	     12.2.  Media Type Registration  . . . . . . . . . . . . . . . .  52
127	     12.3.  Structured Syntax Suffix Registration  . . . . . . . . .  54
128	   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  55
129	     13.1.  Normative References . . . . . . . . . . . . . . . . . .  55
130	     13.2.  Informative References . . . . . . . . . . . . . . . . .  56
131	   Appendix A.  Additional Examples  . . . . . . . . . . . . . . . .  58
132	     A.1.  Simple Structured SD-JWT  . . . . . . . . . . . . . . . .  58
133	     A.2.  Complex Structured SD-JWT . . . . . . . . . . . . . . . .  62
134	     A.3.  SD-JWT-based Verifiable Credentials (SD-JWT VC) . . . . .  70
135	     A.4.  W3C Verifiable Credentials Data Model v2.0  . . . . . . .  80
136	     A.5.  Elliptic Curve Key Used in the Examples . . . . . . . . .  88
137	   Appendix B.  Disclosure Format Considerations . . . . . . . . . .  89
138	   Appendix C.  Document History . . . . . . . . . . . . . . . . . .  91
139	   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  97

141	1.  Introduction

143	   JSON data for exchange between systems is often secured against
144	   modification using JSON Web Signatures (JWS) [RFC7515].  A popular
145	   application of JWS is JSON Web Token (JWT) [RFC7519], a format that
146	   is often used to represent a user's identity.  An ID Token as defined
147	   in OpenID Connect [OpenID.Core], for example, is a JWT containing the
148	   user's claims created by the server for consumption by a relying
149	   party.  In cases where the JWT is sent immediately from the server to
150	   the relying party, as in OpenID Connect, the server can select at the
151	   time of issuance which user claims to include in the JWT, minimizing
152	   the information shared with the relying party who validates the JWT.

154	   Another model is emerging that fully decouples the issuance of a JWT
155	   from its presentation.  In this model, a JWT containing many claims
156	   is issued to an intermediate party, who holds the JWT (the Holder).
157	   The Holder can then present the JWT to different verifying parties
158	   (Verifiers), that each may only require a subset of the claims in the
159	   JWT.  For example, the JWT may contain claims representing both an
160	   address and a birthdate.  The Holder may elect to disclose only the
161	   address to one Verifier, and only the birthdate to a different
162	   Verifier.

164	   Privacy principles of minimal disclosure in conjunction with this
165	   model demand a mechanism enabling selective disclosure of data
166	   elements while ensuring that Verifiers can still check the
167	   authenticity of the data provided.  This specification defines such a
168	   mechanism for JSON payloads of JSON Web Signatures, with a primary
169	   use case being JWTs.

171	   SD-JWT is based on an approach called "salted hashes": For any data
172	   element that should be selectively disclosable, the Issuer of the SD-
173	   JWT does not include the cleartext of the data in the JSON payload of
174	   the JWS structure; instead, a digest of the data takes its place.
175	   For presentation to a Verifier, the Holder sends the signed payload
176	   along with the cleartext of those claims it wants to disclose.  The
177	   Verifier can then compute the digest of the cleartext data and
178	   confirm it is included in the signed payload.  To ensure that
179	   Verifiers cannot guess cleartext values of non-disclosed data
180	   elements, an additional salt value is used when creating the digest
181	   and sent along with the cleartext when disclosing it.

183	   To prevent attacks in which an SD-JWT is presented to a Verifier
184	   without the Holder's consent, this specification additionally defines
185	   a mechanism for binding the SD-JWT to a key under the control of the
186	   Holder (Key Binding).  When Key Binding is enforced, a Holder has to
187	   prove possession of a private key belonging to a public key contained
188	   in the SD-JWT itself.  It usually does so by signing over a data
189	   structure containing transaction-specific data, herein defined as the
190	   Key Binding JWT.  An SD-JWT with a Key Binding JWT is called SD-
191	   JWT+KB in this specification.

193	1.1.  Feature Summary

195	   This specification defines two primary data formats:

197	   1.  SD-JWT is a composite structure, consisting of a JWS plus
198	       optional disclosures, enabling selective disclosure of portions
199	       of the JWS payload.  It comprises the following:

201	       *  A format for enabling selective disclosure in nested JSON data
202	          structures, supporting selectively disclosable object
203	          properties (name/value pairs) and array elements
204	       *  A format for encoding the selectively disclosable data items
205	       *  A format extending the JWS Compact Serialization, allowing for
206	          the combined transport of the Issuer-signed JSON data
207	          structure and the disclosable data items
208	       *  An alternate format extending the JWS JSON Serialization, also
209	          allowing for transport of the Issuer-signed JSON data
210	          structure and disclosure data

212	   2.  SD-JWT+KB is a composite structure of an SD-JWT and a
213	       cryptographic key binding that can be presented to and verified
214	       by the Verifier.  It comprises the following:

216	       *  A mechanism for associating an SD-JWT with a key pair
217	       *  A format for a Key Binding JWT (KB-JWT) that allows proof of
218	          possession of the private key of the associated key pair
219	       *  A format extending the SD-JWT format for the combined
220	          transport of the SD-JWT and the KB-JWT

222	1.2.  Conventions and Terminology

224	   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
225	   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
226	   "OPTIONAL" in this document are to be interpreted as described in BCP
227	   14 [RFC2119] [RFC8174] when, and only when, they appear in all
228	   capitals, as shown here.

230	   *Base64url* denotes the URL-safe base64 encoding without padding
231	   defined in Section 2 of [RFC7515].

233	   Throughout the document the term "claims" refers generally to both
234	   object properties (name/value pairs) as well as array elements.

236	   Selective Disclosure:  Process of a Holder disclosing to a Verifier a
237	      subset of claims contained in a JWT issued by an Issuer.
238	   Selectively Disclosable JWT (SD-JWT):  A composite structure,
239	      consisting of an Issuer-signed JWT (JWS, [RFC7515]) and zero or
240	      more Disclosures, which supports selective disclosure as defined
241	      in this document.  It can contain both regular claims and digests
242	      of selectively-disclosable claims.
243	   Disclosure:  A base64url-encoded string of a JSON array that contains
244	      a salt, a claim name (present when the claim is a name/value pair
245	      and absent when the claim is an array element), and a claim value.
246	      The Disclosure is used to calculate a digest for the respective
247	      claim.  The term Disclosure refers to the whole base64url-encoded
248	      string.
249	   Key Binding:  Ability of the Holder to prove possession of an SD-JWT
250	      by proving control over a private key during the presentation.
251	      When utilizing Key Binding, an SD-JWT contains the public key
252	      corresponding to the private key controlled by the Holder (or a
253	      reference to this public key).
254	   Key Binding JWT (KB-JWT):  A Key Binding JWT is said to "be tied to"
255	      a particular SD-JWT when its payload is signed using the key
256	      included in the SD-JWT payload, and the KB-JWT contains a hash of
257	      the SD-JWT in its sd_hash claim.  Its format is defined in
258	      Section 4.3.
259	   Selectively Disclosable JWT with Key Binding (SD-JWT+KB):  A
260	      composite structure, comprising an SD-JWT and a Key Binding JWT
261	      tied to that SD-JWT.
262	   Issuer:  An entity that creates SD-JWTs.
263	   Holder:  An entity that received SD-JWTs from the Issuer and has
264	      control over them.  In the context of this document, the term may
265	      refer to the actual user, the supporting hardware and software in
266	      their possession, or both.
267	   Verifier:  An entity that requests, checks, and extracts the claims
268	      from an SD-JWT with its respective Disclosures.

270	2.  Flow Diagram
271	              +------------+
272	              |            |
273	              |   Issuer   |
274	              |            |
275	              +------------+
276	                    |
277	               Issues SD-JWT
278	         including all Disclosures
279	                    |
280	                    v
281	              +------------+
282	              |            |
283	              |   Holder   |
284	              |            |
285	              +------------+
286	                    |
287	        Presents SD-JWT or SD-JWT+KB
288	       including selected Disclosures
289	                    |
290	                    v
291	              +-------------+
292	              |             |+
293	              |  Verifiers  ||+
294	              |             |||
295	              +-------------+||
296	               +-------------+|
297	                +-------------+

299	              Figure 1: SD-JWT Issuance and Presentation Flow

301	3.  Concepts

303	   This section describes SD-JWTs with their respective Disclosures and
304	   Key Binding at a conceptual level, abstracting from the data formats
305	   described in Section 4.

307	3.1.  SD-JWT and Disclosures

309	   An SD-JWT, at its core, is a digitally signed JSON document
310	   containing digests over the selectively disclosable claims with the
311	   Disclosures outside the document.  Disclosures can be omitted without
312	   breaking the signature, and modifying them can be detected.
313	   Selectively disclosable claims can be individual object properties
314	   (name/value pairs) or array elements.

316	   Each digest value ensures the integrity of, and maps to, the
317	   respective Disclosure.  Digest values are calculated using a hash
318	   function over the Disclosures, each of which contains a
319	   cryptographically secure random salt, the claim name (only when the
320	   claim is an object property), and the claim value.  The Disclosures
321	   are sent to the Holder with the SD-JWT in the format defined in
322	   Section 4.  When presenting an SD-JWT to a Verifier, the Holder only
323	   includes the Disclosures for the claims that it wants to reveal to
324	   that Verifier.

326	   An SD-JWT MAY also contain cleartext claims that are always disclosed
327	   to the Verifier.

329	3.2.  Disclosing to a Verifier

331	   To disclose to a Verifier a subset of the SD-JWT claim values, a
332	   Holder sends only the Disclosures of those selectively released
333	   claims to the Verifier as part of the SD-JWT.

335	3.3.  Optional Key Binding

337	   Key Binding is an optional feature.  When Key Binding is required by
338	   the use case, the SD-JWT MUST contain information about the key
339	   material controlled by the Holder.

341	   |  Note: How the public key is included in SD-JWT is described in
342	   |  Section 4.1.2.

344	   When a Verifier requires Key Binding, the Holder presents an SD-
345	   JWT+KB, consisting of an SD-JWT as well as a Key Binding JWT tied to
346	   that SD-JWT.  The Key Binding JWT encodes a signature by the Holder's
347	   private key over

349	   *  a hash of the SD-JWT,
350	   *  a nonce to ensure the freshness of the signature, and
351	   *  an audience value to indicate the intended Verifier for the
352	      document.

354	   Details of the format of Key Binding JWTs are described in
355	   Section 4.3.

357	3.4.  Verification

359	   At a high level, the Verifier

361	   *  receives either an SD-JWT or an SD-JWT+KB from the Holder,
362	   *  verifies the signature on the SD-JWT (or the SD-JWT inside the SD-
363	      JWT+KB) using the Issuer's public key,
364	   *  verifies the signature on the KB-JWT using the public key included
365	      (or referenced) in the SD-JWT, if the Verifier's policy requires
366	      Key Binding, and

368	   *  calculates the digests over the Holder-Selected Disclosures and
369	      verifies that each digest is contained in the SD-JWT.

371	   The detailed algorithm is described in Section 7.3.

373	4.  SD-JWT and SD-JWT+KB Data Formats

375	   An SD-JWT is composed of

377	   *  an Issuer-signed JWT, and
378	   *  zero or more Disclosures.

380	   An SD-JWT+KB is composed of

382	   *  an SD-JWT (i.e., an Issuer-signed JWT and zero or more
383	      Disclosures), and
384	   *  a Key Binding JWT.

386	   The Issuer-signed JWT, Disclosures, and Key Binding JWT are explained
387	   in Section 4.1, Section 4.2, and Section 4.3 respectively.

389	   The compact serialized format for the SD-JWT is the concatenation of
390	   each part delineated with a single tilde ('~') character as follows:

392	   <Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>~

394	   The order of the concatenated parts MUST be the Issuer-signed JWT, a
395	   tilde character, zero or more Disclosures each followed by a tilde
396	   character, and lastly the optional Key Binding JWT.  In the case that
397	   there is no Key Binding JWT, the last element MUST be an empty string
398	   and the last separating tilde character MUST NOT be omitted.

400	   The serialized format for an SD-JWT+KB extends the SD-JWT format by
401	   concatenating a Key Binding JWT.

403	<Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>~<KB-JWT>

405	   The two formats can be distinguished by the final ~ character that is
406	   present on an SD-JWT.  A Verifier that expects an SD-JWT MUST verify
407	   that the final tilde-separated component is empty.  A Verifier that
408	   expects an SD-JWT+KB MUST verify that its final tilde-separated
409	   component is a valid KB-JWT.

411	   The Disclosures are linked to the Issuer-signed JWT through the
412	   digest values included therein.

414	   When issuing to a Holder, the Issuer includes all the relevant
415	   Disclosures in the SD-JWT.

417	   When presenting to a Verifier, the Holder sends only the selected set
418	   of the Disclosures in the SD-JWT.

420	   The Holder MAY send any subset of the Disclosures to the Verifier,
421	   i.e., none, some, or all Disclosures.  For data that the Holder does
422	   not want to reveal to the Verifier, the Holder MUST NOT send
423	   Disclosures or reveal the salt values in any other way.  A Holder
424	   MUST NOT send a Disclosure that was not included in the issued SD-JWT
425	   or send a Disclosure more than once.

427	   To further illustrate the SD-JWT format, the following examples show
428	   a few different SD-JWT permutations, both with and without various
429	   constituent parts.

431	   An SD-JWT without Disclosures:

433	   <Issuer-signed JWT>~

435	   An SD-JWT with Disclosures:

437	   <Issuer-signed JWT>~<Disclosure 1>~<Disclosure N>~

439	   An SD-JWT+KB without Disclosures:

441	   <Issuer-signed JWT>~<KB-JWT>

443	   An SD-JWT+KB with Disclosures:

445	   <Issuer-signed JWT>~<Disclosure 1>~<Disclosure N>~<KB-JWT>

447	   As an alternative illustration of the SD-JWT format, ABNF [RFC5234]
448	   for the SD-JWT, SD-JWT+KB, and various constituent parts is provided
449	   here (for those who celebrate):

451	   ALPHA = %x41-5A / %x61-7A ; A-Z / a-z
452	   DIGIT = %x30-39 ; 0-9
453	   BASE64URL = 1*(ALPHA / DIGIT / "-" / "_")
454	   JWT = BASE64URL "." BASE64URL "." BASE64URL
455	   DISCLOSURE = BASE64URL
456	   SD-JWT = JWT "~" *(DISCLOSURE "~")
457	   KB-JWT = JWT
458	   SD-JWT-KB = SD-JWT KB-JWT

460	4.1.  Issuer-signed JWT

462	   An SD-JWT has a JWT component that MUST be signed using the Issuer's
463	   private key.  It MUST NOT use the none algorithm.

465	   The payload of an SD-JWT is a JSON object according to the following
466	   rules:

468	   1.  The payload MAY contain the _sd_alg key described in
469	       Section 4.1.1.
470	   2.  The payload MAY contain one or more digests of Disclosures to
471	       enable selective disclosure of the respective claims, created and
472	       formatted as described in Section 4.2.
473	   3.  The payload MAY contain one or more decoy digests to obscure the
474	       actual number of claims in the SD-JWT, created and formatted as
475	       described in Section 4.2.5.
476	   4.  The payload MAY contain one or more permanently disclosed claims.
477	   5.  The payload MAY contain the Holder's public key(s) or
478	       reference(s) thereto, as explained in Section 4.1.2.
479	   6.  The payload MAY contain further claims such as iss, iat, etc. as
480	       defined or required by the application using SD-JWTs.
481	   7.  The payload MUST NOT contain the claims _sd or ... except for the
482	       purpose of conveying digests as described in Section 4.2.4.1 and
483	       Section 4.2.4.2 respectively below.

485	   The same digest value MUST NOT appear more than once in the SD-JWT.

487	   Application and profiles of SD-JWT SHOULD be explicitly typed.  See
488	   Section 9.11 for more details.

490	   It is the Issuer who decides which claims are selectively disclosable
491	   by the Holder and which are not.  Claims MAY be included as plaintext
492	   as well, e.g., if hiding the particular claims from the Verifier is
493	   not required in the intended use case.  See Section 9.7 for
494	   considerations on making validity-controlling claims such as exp
495	   selectively disclosable.

497	   Claims that are not selectively disclosable are included in the SD-
498	   JWT in plaintext just as they would be in any other JSON structure.

500	4.1.1.  Hash Function Claim

502	   The claim _sd_alg indicates the hash algorithm used by the Issuer to
503	   generate the digests as described in Section 4.2.  When used, this
504	   claim MUST appear at the top level of the SD-JWT payload.  It MUST
505	   NOT be used in any object nested within the payload.  If the _sd_alg
506	   claim is not present at the top level, a default value of sha-256
507	   MUST be used.

509	   This claim value is a case-sensitive string with the hash algorithm
510	   identifier.  The hash algorithm identifier MUST be a hash algorithm
511	   value from the "Hash Name String" column in the IANA "Named
512	   Information Hash Algorithm" registry [IANA.Hash.Algorithms] or a
513	   value defined in another specification and/or profile of this
514	   specification.

516	   To promote interoperability, implementations MUST support the sha-256
517	   hash algorithm.

519	   See Section 9 for requirements regarding entropy of the salt, minimum
520	   length of the salt, and choice of a hash algorithm.

522	4.1.2.  Key Binding

524	   If the Issuer wants to enable Key Binding, it includes a public key
525	   associated with the Holder, or a reference thereto, using the cnf
526	   claim as defined in [RFC7800].  The jwk confirmation method, as
527	   defined in Section 3.2 of [RFC7800], is suggested for doing so,
528	   however, other confirmation methods can be used.

530	   |  Note that, as was stated in [RFC7800], if an application needs to
531	   |  represent multiple proof-of-possession keys in the same SD-JWT,
532	   |  one way to achieve this is to use other claim names, in addition
533	   |  to cnf, to hold the additional proof-of-possession key
534	   |  information.

536	   It is out of the scope of this document to describe how the Holder
537	   key pair is established.  For example, the Holder MAY create a key
538	   pair and provide a public key to the Issuer, the Issuer MAY create
539	   the key pair for the Holder, or Holder and Issuer MAY use pre-
540	   established key material.

542	   |  Note: The examples throughout this document use the cnf claim with
543	   |  the jwk member to include the raw public key by value in SD-JWT.

545	4.2.  Disclosures

547	   Disclosures are created differently depending on whether a claim is
548	   an object property (name/value pair) or an array element.

550	   *  For a claim that is an object property, the Issuer creates a
551	      Disclosure as described in Section 4.2.1.
552	   *  For a claim that is an array element, the Issuer creates a
553	      Disclosure as described in Section 4.2.2.

555	4.2.1.  Disclosures for Object Properties

557	   For each claim that is an object property and that is to be made
558	   selectively disclosable, the Issuer MUST create a Disclosure as
559	   follows:

561	   *  Create a JSON array of three elements in this order:
562	      1.  A salt value.  MUST be a string.  See Section 9.3 for security
563	          considerations.  It is RECOMMENDED to base64url-encode a
564	          minimum of 128 bits of cryptographically secure random data,
565	          producing a string.  The salt value MUST be unique for each
566	          claim that is to be selectively disclosed.  The Issuer MUST
567	          NOT reveal the salt value to any party other than the Holder.
568	      2.  The claim name, or key, as it would be used in a regular JWT
569	          payload.  It MUST be a string and MUST NOT be _sd, ..., or a
570	          claim name existing in the object as a permanently disclosed
571	          claim.
572	      3.  The claim value, as it would be used in a regular JWT payload.
573	          The value can be of any type that is allowed in JSON,
574	          including numbers, strings, booleans, arrays, null, and
575	          objects.
576	   *  base64url-encode the UTF-8 byte sequence of the JSON array.  This
577	      string is the Disclosure.

579	   |  Note: The order was decided based on readability considerations:
580	   |  salts have a constant length within the SD-JWT, claim names would
581	   |  be around the same length all the time, and claim values would
582	   |  vary in size, potentially being large objects.

584	   The following example illustrates the steps described above.

586	   The array is created as follows:

588	   ["_26bc4LT-ac6q2KI6cBW5es", "family_name", "Möbius"]

590	   The resulting Disclosure is: WyJfMjZiYzRMVC1hYzZxMktJNmNCVzVlcyIsICJm
591	   YW1pbHlfbmFtZSIsICJNw7ZiaXVzIl0

593	   Note that variations in whitespace, encoding of Unicode characters,
594	   ordering of object properties, etc., are allowed in the JSON
595	   representation and no canonicalization needs to be performed before
596	   base64url-encoding because the digest is calculated over the
597	   base64url-encoded value itself.  For example, the following strings
598	   are all valid and encode the same claim value "Möbius":

600	   *  A different way to encode the unicode umlaut:
601	      WyJfMjZiYzRMVC1hYzZxMktJNmNCVzVlcyIsICJmYW1pbHlfbmFtZSIsICJNX
602	      HUwMGY2Yml1cyJd

604	   *  No white space:
605	      WyJfMjZiYzRMVC1hYzZxMktJNmNCVzVlcyIsImZhbWlseV9uYW1lIiwiTcO2Y
606	      ml1cyJd
607	   *  Newline characters between elements:
608	      WwoiXzI2YmM0TFQtYWM2cTJLSTZjQlc1ZXMiLAoiZmFtaWx5X25hbWUiLAoiT
609	      cO2Yml1cyIKXQ

611	   However, the digest is calculated over the respective base64url-
612	   encoded value itself, which effectively signs the variation chosen by
613	   the Issuer and makes it immutable in the context of the particular
614	   SD-JWT.

616	   See Appendix B for some further considerations on the Disclosure
617	   format approach.

619	4.2.2.  Disclosures for Array Elements

621	   For each claim that is an array element and that is to be made
622	   selectively disclosable, the Issuer MUST create a Disclosure as
623	   follows:

625	   *  The array MUST contain two elements in this order:
626	      1.  The salt value as described in Section 4.2.1.
627	      2.  The array element that is to be hidden.  This value can be of
628	          any type that is allowed in JSON, including numbers, strings,
629	          booleans, arrays, and objects.

631	   The Disclosure string is created by base64url-encoding the UTF-8 byte
632	   sequence of the resulting JSON array as described in Section 4.2.1.
633	   The same considerations regarding variations in the result of the
634	   JSON encoding apply.

636	   For example, a Disclosure for the second element of the nationalities
637	   array in the following JWT Claims Set:

639	   {
640	     "nationalities": ["DE", "FR", "US"]
641	   }

643	   could be created by first creating the following array:

645	   ["lklxF5jMYlGTPUovMNIvCA", "FR"]

647	   The resulting Disclosure would be:
648	   WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIkZSIl0
649	   |  Note that the size of an array alone can potentially reveal
650	   |  unintended information.  The use of decoys, as described in
651	   |  Section 4.2.5, to consistently pad the size of an array can help
652	   |  obscure the actual number of elements present in any particular
653	   |  instance.

655	4.2.3.  Hashing Disclosures

657	   For embedding references to the Disclosures in the SD-JWT, each
658	   Disclosure is hashed using the hash algorithm specified in the
659	   _sd_alg claim described in Section 4.1.1, or SHA-256 if no algorithm
660	   is specified.  The resulting digest is then included in the SD-JWT
661	   payload instead of the original claim value, as described next.

663	   The digest MUST be taken over the US-ASCII bytes of the base64url-
664	   encoded value that is the Disclosure.  This follows the convention in
665	   JWS [RFC7515] and JWE [RFC7516].  The bytes of the digest MUST then
666	   be base64url-encoded.

668	   It is important to note that:

670	   *  The input to the hash function MUST be the base64url-encoded
671	      Disclosure, not the bytes encoded by the base64url string.
672	   *  The bytes of the output of the hash function MUST be base64url-
673	      encoded, and are not the bytes making up the (sometimes used) hex
674	      representation of the bytes of the digest.

676	   For example, the base64url-encoded SHA-256 digest of the Disclosure W
677	   yJfMjZiYzRMVC1hYzZxMktJNmNCVzVlcyIsICJmYW1pbHlfbmFtZSIsICJNw7ZiaXVzIl
678	   0 for the family_name claim from Section 4.2.1 above is
679	   X9yH0Ajrdm1Oij4tWso9UzzKJvPoDxwmuEcO3XAdRC0.

681	4.2.4.  Embedding Disclosure Digests in SD-JWTs

683	   For selectively disclosable claims, the digests of the Disclosures
684	   are embedded into the Issuer-signed JWT instead of the claims
685	   themselves.  The precise way of embedding depends on whether a claim
686	   is an object property (name/value pair) or an array element.

688	   *  For a claim that is an object property, the Issuer embeds a
689	      Disclosure digest as described in Section 4.2.4.1.
690	   *  For a claim that is an array element, the Issuer creates a
691	      Disclosure digest as described in Section 4.2.4.2.

693	4.2.4.1.  Object Properties

695	   Digests of Disclosures for object properties are added to an array
696	   under the new key _sd in the object.  The _sd key MUST refer to an
697	   array of strings, each string being a digest of a Disclosure or a
698	   decoy digest as described in Section 4.2.5.  An _sd key can be
699	   present at any level of the JSON object hierarchy, including the top-
700	   level, nested deeper as described in Section 6, or in recursive
701	   disclosures as described in Section 4.2.6.

703	   The array MAY be empty in case the Issuer decided not to selectively
704	   disclose any of the claims at that level.  However, it is RECOMMENDED
705	   to omit the _sd key in this case to save space.

707	   The Issuer MUST hide the original order of the claims in the array.
708	   To ensure this, it is RECOMMENDED to shuffle the array of hashes,
709	   e.g., by sorting it alphanumerically or randomly, after potentially
710	   adding decoy digests as described in Section 4.2.5.  The precise
711	   method does not matter as long as it does not depend on the original
712	   order of elements.

714	   For example, using the digest of the Disclosure from Section 4.2.3,
715	   the Issuer could create the following SD-JWT payload to make
716	   family_name selectively disclosable:

718	   {
719	     "given_name": "Alice",
720	     "_sd": ["X9yH0Ajrdm1Oij4tWso9UzzKJvPoDxwmuEcO3XAdRC0"]
721	   }

723	4.2.4.2.  Array Elements

725	   Digests of Disclosures for array elements are added to the array in
726	   the same position as the original claim value in the array.  For each
727	   digest, an object of the form {"...": "<digest>"} is added to the
728	   array.  The key MUST always be the string ... (three dots).  The
729	   value MUST be the digest of the Disclosure created as described in
730	   Section 4.2.3.  There MUST NOT be any other keys in the object.  Note
731	   that the string ... was chosen because the ellipsis character,
732	   typically entered as three period characters, is commonly used in
733	   places where content is omitted from the present context.

735	   For example, using the digest of the array element Disclosure created
736	   above in Section 4.2.2, the Issuer could create the following SD-JWT
737	   payload to make the second element of the nationalities array
738	   selectively disclosable:

740	   {
741	     "nationalities":
742	       ["DE", {"...":"w0I8EKcdCtUPkGCNUrfwVp2xEgNjtoIDlOxc9-PlOhs"}, "US"]
743	   }

745	   As described in Section 7.3, Verifiers ignore all selectively
746	   disclosable array elements for which they did not receive a
747	   Disclosure.  In the example above, the verification process would
748	   output an array with only one element unless a matching Disclosure
749	   for the second element is received.

751	4.2.5.  Decoy Digests

753	   An Issuer MAY add additional digests to the SD-JWT payload that are
754	   not associated with any claim.  The purpose of such "decoy" digests
755	   is to make it more difficult for an adversary to see the original
756	   number of claims or array elements contained in the SD-JWT.  Decoy
757	   digests MAY be added both to the _sd array for objects as well as in
758	   arrays.

760	   It is RECOMMENDED to create the decoy digests by hashing over a
761	   cryptographically secure random number.  The bytes of the digest MUST
762	   then be base64url-encoded as above.  The same digest function as for
763	   the Disclosures MUST be used.

765	   For decoy digests, no Disclosure is sent to the Holder, i.e., the
766	   Holder will see digests that do not correspond to any Disclosure.
767	   See Section 10.4 for additional privacy considerations.

769	   To ensure readability and replicability, the examples in this
770	   specification do not contain decoy digests unless explicitly stated.
771	   For an example with decoy digests, see Appendix A.1.

773	4.2.6.  Recursive Disclosures

775	   The algorithms above are compatible with "recursive disclosures", in
776	   which one selectively disclosed field reveals the existence of more
777	   selectively disclosable fields.  For example, consider the following
778	   JSON structure:

780	   {
781	       "family_name": "Möbius",
782	       "nationalities": ["DE", "FR", "UK"]
783	   }

785	   When the Holder has multiple nationalities, the issuer may wish to
786	   conceal the presence of any statement regarding nationalities while
787	   also allowing the holder to reveal each of those nationalities
788	   individually.  This can be accomplished by first making the entries
789	   within the "nationalities" array selectively disclosable, and then
790	   making the whole "nationalities" field selectively disclosable.

792	   The following shows each of the entries within the "nationalities"
793	   array being made selectively disclosable:

795	   {
796	       "family_name": "Möbius",
797	       "nationalities": [
798	           { "...": "PmnlrRjhLcwf8zTDdK15HVGwHtPYjddvD362WjBLwro" }
799	           { "...": "r823HFN6Ba_lpSANYtXqqCBAH-TsQlIzfOK0lRAFLCM" },
800	           { "...": "nP5GYjwhFm6ESlAeC4NCaIliW4tz0hTrUeoJB3lb5TA" }
801	       ]
802	   }

804	   Content of Disclosures:
805	   PmnlrRj... = ["16_mAd0GiwaZokU26_0i0h","DE"]
806	   r823HFN... = ["fn9fN0rD-fFs2n303ZI-0c","FR"]
807	   nP5GYjw... = ["YIKesqOkXXNzMQtsX_-_lw","UK"]

809	   Followed by making the whole "nationalities" array selectively
810	   disclosable:

812	   {
813	       "family_name": "Möbius",
814	       "_sd": [ "5G1srw3RG5W4pVTwSsYxeOWosRBbzd18ZoWKkC-hBL4" ]
815	   }

817	   Content of Disclosures:
818	   PmnlrRj... = ["16_mAd0GiwaZokU26_0i0h","DE"]
819	   r823HFN... = ["fn9fN0rD-fFs2n303ZI-0c","FR"]
820	   nP5GYjw... = ["YIKesqOkXXNzMQtsX_-_lw","UK"]
821	   5G1srw3... = ["4drfeTtSUK3aY_-PF12gcX","nationalities",
822	       [
823	           { "...": "PmnlrRjhLcwf8zTDdK15HVGwHtPYjddvD362WjBLwro" },
824	           { "...": "r823HFN6Ba_lpSANYtXqqCBAH-TsQlIzfOK0lRAFLCM" },
825	           { "...": "nP5GYjwhFm6ESlAeC4NCaIliW4tz0hTrUeoJB3lb5TA" }
826	       ]
827	   ]

829	   With this set of disclosures, the holder could include the disclosure
830	   with hash PmnlrRj... to disclose only the "DE" nationality, or
831	   include both PmnlrRj... and r823HFN... to disclose both the "DE" and
832	   "FR" nationalities, but hide the "UK" nationality.  In either case,
833	   the holder would also need to include the disclosure with hash
834	   5G1srw3... to disclose the nationalities field that contains the
835	   respective elements.

837	   Note that making recursive redactions introduces dependencies between
838	   the disclosure objects in an SD-JWT.  The r823HFN... disclosure
839	   cannot be used without the 5G1srw3... disclosure; since a Verifier
840	   would not have a matching hash that would tell it where the content
841	   of the r823HFN... disclosure should be inserted.  If a disclosure
842	   object is included in an SD-JWT, then the SD-JWT MUST include any
843	   other disclosure objects necessary to process the first disclosure
844	   object.  In other words, any disclosure object in an SD-JWT must
845	   "connect" to the claims in the issuer-signed JWT, possibly via an
846	   intermediate disclosure object.  In the above example, it would be
847	   illegal to include any one of the PmnlrRj..., r823HFN..., nP5GYjw..
848	   disclosure objects without also including the 5G1srw3... disclosure
849	   object.

851	4.3.  Key Binding JWT

853	   This section defines the Key Binding JWT, which encodes a signature
854	   over an SD-JWT by the Holder's private key.

856	   The Key Binding JWT MUST be a JWT according to [RFC7519] and its
857	   payload MUST contain the following elements:

859	   *  in the JOSE header,
860	      -  typ: REQUIRED.  MUST be kb+jwt, which explicitly types the Key
861	         Binding JWT as recommended in Section 3.11 of [RFC8725].
862	      -  alg: REQUIRED.  A digital signature algorithm identifier such
863	         as per IANA "JSON Web Signature and Encryption Algorithms"
864	         registry.  It MUST NOT be none.
865	   *  in the JWT payload,
866	      -  iat: REQUIRED.  The value of this claim MUST be the time at
867	         which the Key Binding JWT was issued using the syntax defined
868	         in [RFC7519].
869	      -  aud: REQUIRED.  The intended receiver of the Key Binding JWT.
870	         How the value is represented is up to the protocol used and out
871	         of scope of this specification.
872	      -  nonce: REQUIRED.  Ensures the freshness of the signature or its
873	         binding to the given transaction.  The value type of this claim
874	         MUST be a string.  How this value is obtained is up to the
875	         protocol used and out of scope of this specification.
876	      -  sd_hash: REQUIRED.  The base64url-encoded hash value over the
877	         Issuer-signed JWT and the selected Disclosures as defined
878	         below.

880	   The general extensibility model of JWT means that additional claims
881	   and header parameters can be added to the Key Binding JWT.  However,
882	   unless there is a compelling reason, this SHOULD be avoided, as it
883	   may harm interoperability and burden conceptual integrity.

885	4.3.1.  Binding to an SD-JWT

887	   The hash value in the sd_hash claim binds the KB-JWT to the specific
888	   SD-JWT.  The sd_hash value MUST be taken over the US-ASCII bytes of
889	   the encoded SD-JWT, i.e., the Issuer-signed JWT, a tilde character,
890	   and zero or more Disclosures selected for presentation to the
891	   Verifier, each followed by a tilde character:

893	   <Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>~

895	   The bytes of the digest MUST then be base64url-encoded.

897	   The same hash algorithm as for the Disclosures MUST be used (defined
898	   by the _sd_alg element in the Issuer-signed JWT or the default value,
899	   as defined in Section 4.1.1).

901	4.3.2.  Validating the Key Binding JWT

903	   Whether to require Key Binding is up to the Verifier's policy, based
904	   on the set of trust requirements such as trust frameworks it belongs
905	   to.  See Section 9.5 for security considerations.

907	   If the Verifier requires Key Binding, the Verifier MUST ensure that
908	   the key with which it validates the signature on the Key Binding JWT
909	   is the key specified in the SD-JWT as the Holder's public key.  For
910	   example, if the SD-JWT contains a cnf value with a jwk member, the
911	   Verifier would parse the provided JWK and use it to verify the Key
912	   Binding JWT.

914	   Details of the Validation process are defined in Section 7.3.

916	5.  Example SD-JWT

918	   In this example, a simple SD-JWT is demonstrated.  This example is
919	   split into issuance and presentation.

921	   |  Note: Throughout the examples in this document, line breaks had to
922	   |  be added to JSON strings and base64-encoded strings to adhere to
923	   |  the 72-character limit for lines in RFCs and for readability.
924	   |  JSON does not allow line breaks within strings.

926	5.1.  Issuance

928	   The following data about the user comprises the input JWT Claims Set
929	   used by the Issuer:

931	   {
932	     "sub": "user_42",
933	     "given_name": "John",
934	     "family_name": "Doe",
935	     "email": "johndoe@example.com",
936	     "phone_number": "+1-202-555-0101",
937	     "phone_number_verified": true,
938	     "address": {
939	       "street_address": "123 Main St",
940	       "locality": "Anytown",
941	       "region": "Anystate",
942	       "country": "US"
943	     },
944	     "birthdate": "1940-01-01",
945	     "updated_at": 1570000000,
946	     "nationalities": [
947	       "US",
948	       "DE"
949	     ]
950	   }

952	   In this example, the following decisions were made by the Issuer in
953	   constructing the SD-JWT:

955	   *  The nationalities array is always visible, but its contents are
956	      selectively disclosable.
957	   *  The sub element as well as essential verification data (iss, exp,
958	      cnf, etc.) are always visible.
959	   *  All other claims are selectively disclosable.
960	   *  For address, the Issuer is using a flat structure, i.e., all the
961	      claims in the address claim can only be disclosed in full.  Other
962	      options are discussed in Section 6.

964	   The following payload is used for the SD-JWT:

966	   {
967	     "_sd": [
968	       "CrQe7S5kqBAHt-nMYXgc6bdt2SH5aTY1sU_M-PgkjPI",
969	       "JzYjH4svliH0R3PyEMfeZu6Jt69u5qehZo7F7EPYlSE",
970	       "PorFbpKuVu6xymJagvkFsFXAbRoc2JGlAUA2BA4o7cI",
971	       "TGf4oLbgwd5JQaHyKVQZU9UdGE0w5rtDsrZzfUaomLo",
972	       "XQ_3kPKt1XyX7KANkqVR6yZ2Va5NrPIvPYbyMvRKBMM",
973	       "XzFrzwscM6Gn6CJDc6vVK8BkMnfG8vOSKfpPIZdAfdE",
974	       "gbOsI4Edq2x2Kw-w5wPEzakob9hV1cRD0ATN3oQL9JM",
975	       "jsu9yVulwQQlhFlM_3JlzMaSFzglhQG0DpfayQwLUK4"
976	     ],
977	     "iss": "https://issuer.example.com",
978	     "iat": 1683000000,
979	     "exp": 1883000000,
980	     "sub": "user_42",
981	     "nationalities": [
982	       {
983	         "...": "pFndjkZ_VCzmyTa6UjlZo3dh-ko8aIKQc9DlGzhaVYo"
984	       },
985	       {
986	         "...": "7Cf6JkPudry3lcbwHgeZ8khAv1U1OSlerP0VkBJrWZ0"
987	       }
988	     ],
989	     "_sd_alg": "sha-256",
990	     "cnf": {
991	       "jwk": {
992	         "kty": "EC",
993	         "crv": "P-256",
994	         "x": "TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc",
995	         "y": "ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ"
996	       }
997	     }
998	   }

1000	   The respective Disclosures, created by the Issuer, are listed below.
1001	   In the text below and in other locations in this specification, the
1002	   label "SHA-256 Hash:" is used as a shorthand for the label
1003	   "Base64url-Encoded SHA-256 Hash:".

1005	   *Claim given_name*:

1007	   *  SHA-256 Hash: jsu9yVulwQQlhFlM_3JlzMaSFzglhQG0DpfayQwLUK4
1008	   *  Disclosure:
1009	      WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9o
1010	      biJd
1011	   *  Contents: ["2GLC42sKQveCfGfryNRN9w", "given_name", "John"]

1013	   *Claim family_name*:

1015	   *  SHA-256 Hash: TGf4oLbgwd5JQaHyKVQZU9UdGE0w5rtDsrZzfUaomLo
1016	   *  Disclosure:
1017	      WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIkRv
1018	      ZSJd
1019	   *  Contents: ["eluV5Og3gSNII8EYnsxA_A", "family_name", "Doe"]

1021	   *Claim email*:

1023	   *  SHA-256 Hash: JzYjH4svliH0R3PyEMfeZu6Jt69u5qehZo7F7EPYlSE
1024	   *  Disclosure:
1025	      WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImVtYWlsIiwgImpvaG5kb2VA
1026	      ZXhhbXBsZS5jb20iXQ
1027	   *  Contents: ["6Ij7tM-a5iVPGboS5tmvVA", "email",
1028	      "johndoe@example.com"]

1030	   *Claim phone_number*:

1032	   *  SHA-256 Hash: PorFbpKuVu6xymJagvkFsFXAbRoc2JGlAUA2BA4o7cI
1033	   *  Disclosure:
1034	      WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgInBob25lX251bWJlciIsICIr
1035	      MS0yMDItNTU1LTAxMDEiXQ
1036	   *  Contents: ["eI8ZWm9QnKPpNPeNenHdhQ", "phone_number",
1037	      "+1-202-555-0101"]

1039	   *Claim phone_number_verified*:

1041	   *  SHA-256 Hash: XQ_3kPKt1XyX7KANkqVR6yZ2Va5NrPIvPYbyMvRKBMM
1042	   *  Disclosure:
1043	      WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgInBob25lX251bWJlcl92ZXJp
1044	      ZmllZCIsIHRydWVd
1045	   *  Contents: ["Qg_O64zqAxe412a108iroA", "phone_number_verified",
1046	      true]

1048	   *Claim address*:

1050	   *  SHA-256 Hash: XzFrzwscM6Gn6CJDc6vVK8BkMnfG8vOSKfpPIZdAfdE
1051	   *  Disclosure:
1052	      WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVl
1053	      dF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRv
1054	      d24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0
1055	   *  Contents: ["AJx-095VPrpTtN4QMOqROA", "address", {"street_address":
1056	      "123 Main St", "locality": "Anytown", "region": "Anystate",
1057	      "country": "US"}]

1059	   *Claim birthdate*:

1061	   *  SHA-256 Hash: gbOsI4Edq2x2Kw-w5wPEzakob9hV1cRD0ATN3oQL9JM
1062	   *  Disclosure:
1063	      WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgImJpcnRoZGF0ZSIsICIxOTQw
1064	      LTAxLTAxIl0
1065	   *  Contents: ["Pc33JM2LchcU_lHggv_ufQ", "birthdate", "1940-01-01"]

1067	   *Claim updated_at*:

1069	   *  SHA-256 Hash: CrQe7S5kqBAHt-nMYXgc6bdt2SH5aTY1sU_M-PgkjPI
1070	   *  Disclosure:
1071	      WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgInVwZGF0ZWRfYXQiLCAxNTcw
1072	      MDAwMDAwXQ
1073	   *  Contents: ["G02NSrQfjFXQ7Io09syajA", "updated_at", 1570000000]

1075	   *Array Entry*:

1077	   *  SHA-256 Hash: pFndjkZ_VCzmyTa6UjlZo3dh-ko8aIKQc9DlGzhaVYo
1078	   *  Disclosure:
1079	      WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0
1080	   *  Contents: ["lklxF5jMYlGTPUovMNIvCA", "US"]

1082	   *Array Entry*:

1084	   *  SHA-256 Hash: 7Cf6JkPudry3lcbwHgeZ8khAv1U1OSlerP0VkBJrWZ0
1085	   *  Disclosure:
1086	      WyJuUHVvUW5rUkZxM0JJZUFtN0FuWEZBIiwgIkRFIl0
1087	   *  Contents: ["nPuoQnkRFq3BIeAm7AnXFA", "DE"]

1089	   The payload is then signed by the Issuer to create the following
1090	   Issuer-signed JWT:

1092	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOiBb
1093	   IkNyUWU3UzVrcUJBSHQtbk1ZWGdjNmJkdDJTSDVhVFkxc1VfTS1QZ2tqUEkiLCAiSnpZ
1094	   akg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBL
1095	   dVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1
1096	   SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiWFFfM2tQS3QxWHlYN0tB
1097	   TmtxVlI2eVoyVmE1TnJQSXZQWWJ5TXZSS0JNTSIsICJYekZyendzY002R242Q0pEYzZ2
1098	   Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwgImdiT3NJNEVkcTJ4Mkt3LXc1d1BFemFr
1099	   b2I5aFYxY1JEMEFUTjNvUUw5Sk0iLCAianN1OXlWdWx3UVFsaEZsTV8zSmx6TWFTRnpn
1100	   bGhRRzBEcGZheVF3TFVLNCJdLCAiaXNzIjogImh0dHBzOi8vaXNzdWVyLmV4YW1wbGUu
1101	   Y29tIiwgImlhdCI6IDE2ODMwMDAwMDAsICJleHAiOiAxODgzMDAwMDAwLCAic3ViIjog
1102	   InVzZXJfNDIiLCAibmF0aW9uYWxpdGllcyI6IFt7Ii4uLiI6ICJwRm5kamtaX1ZDem15
1103	   VGE2VWpsWm8zZGgta284YUlLUWM5RGxHemhhVllvIn0sIHsiLi4uIjogIjdDZjZKa1B1
1104	   ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sICJfc2RfYWxnIjog
1105	   InNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJjcnYiOiAiUC0y
1106	   NTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VH
1107	   ZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlG
1108	   MkhaUSJ9fX0.QdUEKqpvAO5WaO2de39F6tYOjygo2qQ6O1cHpMp7skh9gK1P1rCe-6L7
1109	   ueW1o85ZHkVTSFWpwFc2hlwPJZ63Xw
1110	   Adding the Disclosures produces the SD-JWT:

1112	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOiBb
1113	   IkNyUWU3UzVrcUJBSHQtbk1ZWGdjNmJkdDJTSDVhVFkxc1VfTS1QZ2tqUEkiLCAiSnpZ
1114	   akg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBL
1115	   dVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1
1116	   SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiWFFfM2tQS3QxWHlYN0tB
1117	   TmtxVlI2eVoyVmE1TnJQSXZQWWJ5TXZSS0JNTSIsICJYekZyendzY002R242Q0pEYzZ2
1118	   Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwgImdiT3NJNEVkcTJ4Mkt3LXc1d1BFemFr
1119	   b2I5aFYxY1JEMEFUTjNvUUw5Sk0iLCAianN1OXlWdWx3UVFsaEZsTV8zSmx6TWFTRnpn
1120	   bGhRRzBEcGZheVF3TFVLNCJdLCAiaXNzIjogImh0dHBzOi8vaXNzdWVyLmV4YW1wbGUu
1121	   Y29tIiwgImlhdCI6IDE2ODMwMDAwMDAsICJleHAiOiAxODgzMDAwMDAwLCAic3ViIjog
1122	   InVzZXJfNDIiLCAibmF0aW9uYWxpdGllcyI6IFt7Ii4uLiI6ICJwRm5kamtaX1ZDem15
1123	   VGE2VWpsWm8zZGgta284YUlLUWM5RGxHemhhVllvIn0sIHsiLi4uIjogIjdDZjZKa1B1
1124	   ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sICJfc2RfYWxnIjog
1125	   InNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJjcnYiOiAiUC0y
1126	   NTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VH
1127	   ZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlG
1128	   MkhaUSJ9fX0.QdUEKqpvAO5WaO2de39F6tYOjygo2qQ6O1cHpMp7skh9gK1P1rCe-6L7
1129	   ueW1o85ZHkVTSFWpwFc2hlwPJZ63Xw~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgI
1130	   mdpdmVuX25hbWUiLCAiSm9obiJd~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZh
1131	   bWlseV9uYW1lIiwgIkRvZSJd~WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImVtYWl
1132	   sIiwgImpvaG5kb2VAZXhhbXBsZS5jb20iXQ~WyJlSThaV205UW5LUHBOUGVOZW5IZGhR
1133	   IiwgInBob25lX251bWJlciIsICIrMS0yMDItNTU1LTAxMDEiXQ~WyJRZ19PNjR6cUF4Z
1134	   TQxMmExMDhpcm9BIiwgInBob25lX251bWJlcl92ZXJpZmllZCIsIHRydWVd~WyJBSngt
1135	   MDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjog
1136	   IjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFu
1137	   eXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZR
1138	   IiwgImJpcnRoZGF0ZSIsICIxOTQwLTAxLTAxIl0~WyJHMDJOU3JRZmpGWFE3SW8wOXN5
1139	   YWpBIiwgInVwZGF0ZWRfYXQiLCAxNTcwMDAwMDAwXQ~WyJsa2x4RjVqTVlsR1RQVW92T
1140	   U5JdkNBIiwgIlVTIl0~WyJuUHVvUW5rUkZxM0JJZUFtN0FuWEZBIiwgIkRFIl0~

1142	5.2.  Presentation

1144	   The following non-normative example shows an SD-JWT+KB as it would be
1145	   sent from the Holder to the Verifier.  Note that it consists of six
1146	   tilde-separated parts, with the Issuer-signed JWT as shown above in
1147	   the beginning, four Disclosures (for the claims given_name,
1148	   family_name, address, and one of the nationalities) in the middle,
1149	   and the Key Binding JWT as the last element.

1151	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOiBb
1152	   IkNyUWU3UzVrcUJBSHQtbk1ZWGdjNmJkdDJTSDVhVFkxc1VfTS1QZ2tqUEkiLCAiSnpZ
1153	   akg0c3ZsaUgwUjNQeUVNZmVadTZKdDY5dTVxZWhabzdGN0VQWWxTRSIsICJQb3JGYnBL
1154	   dVZ1Nnh5bUphZ3ZrRnNGWEFiUm9jMkpHbEFVQTJCQTRvN2NJIiwgIlRHZjRvTGJnd2Q1
1155	   SlFhSHlLVlFaVTlVZEdFMHc1cnREc3JaemZVYW9tTG8iLCAiWFFfM2tQS3QxWHlYN0tB
1156	   TmtxVlI2eVoyVmE1TnJQSXZQWWJ5TXZSS0JNTSIsICJYekZyendzY002R242Q0pEYzZ2
1157	   Vks4QmtNbmZHOHZPU0tmcFBJWmRBZmRFIiwgImdiT3NJNEVkcTJ4Mkt3LXc1d1BFemFr
1158	   b2I5aFYxY1JEMEFUTjNvUUw5Sk0iLCAianN1OXlWdWx3UVFsaEZsTV8zSmx6TWFTRnpn
1159	   bGhRRzBEcGZheVF3TFVLNCJdLCAiaXNzIjogImh0dHBzOi8vaXNzdWVyLmV4YW1wbGUu
1160	   Y29tIiwgImlhdCI6IDE2ODMwMDAwMDAsICJleHAiOiAxODgzMDAwMDAwLCAic3ViIjog
1161	   InVzZXJfNDIiLCAibmF0aW9uYWxpdGllcyI6IFt7Ii4uLiI6ICJwRm5kamtaX1ZDem15
1162	   VGE2VWpsWm8zZGgta284YUlLUWM5RGxHemhhVllvIn0sIHsiLi4uIjogIjdDZjZKa1B1
1163	   ZHJ5M2xjYndIZ2VaOGtoQXYxVTFPU2xlclAwVmtCSnJXWjAifV0sICJfc2RfYWxnIjog
1164	   InNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJjcnYiOiAiUC0y
1165	   NTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbERsczd2Q2VH
1166	   ZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U2dDRqVDlG
1167	   MkhaUSJ9fX0.QdUEKqpvAO5WaO2de39F6tYOjygo2qQ6O1cHpMp7skh9gK1P1rCe-6L7
1168	   ueW1o85ZHkVTSFWpwFc2hlwPJZ63Xw~WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgI
1169	   mZhbWlseV9uYW1lIiwgIkRvZSJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFk
1170	   ZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5
1171	   IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMi
1172	   fV0~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiSm9obiJd
1173	   ~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIlVTIl0~eyJhbGciOiAiRVMyNTYiLCA
1174	   idHlwIjogImtiK2p3dCJ9.eyJub25jZSI6ICIxMjM0NTY3ODkwIiwgImF1ZCI6ICJodH
1175	   RwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwgImlhdCI6IDE3NDcwNzc2MDYsICJzZF
1176	   9oYXNoIjogIjRSd1ZsVlBGc21ZMjRJZmpRSWRuZmJlbU50Skk0NWUtSmlrTmZNdS1jYj
1177	   AifQ.bTlh2W3AsUqbanu_j8KNjiVeZegAnVJcdSVDHigAuPAJQ8TOaquB69-CZIoa7JI
1178	   W-bOkAT3ipsRykEkLYrCuDQ

1180	   The following Key Binding JWT payload was created and signed for this
1181	   presentation by the Holder:

1183	   {
1184	     "nonce": "1234567890",
1185	     "aud": "https://verifier.example.org",
1186	     "iat": 1747077606,
1187	     "sd_hash": "4RwVlVPFsmY24IfjQIdnfbemNtJI45e-JikNfMu-cb0"
1188	   }

1190	   If the Verifier did not require Key Binding, then the Holder could
1191	   have presented the SD-JWT with selected Disclosures directly, instead
1192	   of encapsulating it in an SD-JWT+KB.

1194	   After validation, the Verifier will have the following processed SD-
1195	   JWT payload available for further handling:

1197	   {
1198	     "iss": "https://issuer.example.com",
1199	     "iat": 1683000000,
1200	     "exp": 1883000000,
1201	     "sub": "user_42",
1202	     "nationalities": [
1203	       "US"
1204	     ],
1205	     "cnf": {
1206	       "jwk": {
1207	         "kty": "EC",
1208	         "crv": "P-256",
1209	         "x": "TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc",
1210	         "y": "ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ"
1211	       }
1212	     },
1213	     "family_name": "Doe",
1214	     "address": {
1215	       "street_address": "123 Main St",
1216	       "locality": "Anytown",
1217	       "region": "Anystate",
1218	       "country": "US"
1219	     },
1220	     "given_name": "John"
1221	   }

1223	6.  Considerations on Nested Data in SD-JWTs

1225	   Being JSON, an object in an SD-JWT payload MAY contain name/value
1226	   pairs where the value is another object or objects MAY be elements in
1227	   arrays.  In SD-JWT, the Issuer decides for each claim individually,
1228	   on each level of the JSON, whether the claim should be selectively
1229	   disclosable or not.  This choice can be made on each level
1230	   independent of whether keys higher in the hierarchy are selectively
1231	   disclosable.

1233	   From this it follows that the _sd key containing digests MAY appear
1234	   multiple times in an SD-JWT, and likewise, there MAY be multiple
1235	   arrays within the hierarchy with each having selectively disclosable
1236	   elements.  Digests of selectively disclosable claims MAY even appear
1237	   within other Disclosures.

1239	   The following examples illustrate some of the options an Issuer has.
1240	   It is up to the Issuer to decide which structure to use, depending
1241	   on, for example, the expected use cases for the SD-JWT, requirements
1242	   for privacy, size considerations, or operating environment
1243	   requirements.  For more examples with nested structures, see
1244	   Appendix A.1 and Appendix A.2.

1246	   The following input JWT Claims Set is used as an example throughout
1247	   this section:

1249	   {
1250	     "sub": "6c5c0a49-b589-431d-bae7-219122a9ec2c",
1251	     "address": {
1252	       "street_address": "Schulstr. 12",
1253	       "locality": "Schulpforta",
1254	       "region": "Sachsen-Anhalt",
1255	       "country": "DE"
1256	     }
1257	   }

1259	   |  Note: The following examples of the structures are non-normative
1260	   |  and are not intended to represent all possible options.  They are
1261	   |  also not meant to define or restrict how address can be
1262	   |  represented in an SD-JWT.

1264	6.1.  Example: Flat SD-JWT

1266	   The Issuer can decide to treat the address claim as a block that can
1267	   either be disclosed completely or not at all.  The following example
1268	   shows that in this case, the entire address claim is treated as an
1269	   object in the Disclosure.

1271	   {
1272	     "_sd": [
1273	       "fOBUSQvo46yQO-wRwXBcGqvnbKIueISEL961_Sjd4do"
1274	     ],
1275	     "iss": "https://issuer.example.com",
1276	     "iat": 1683000000,
1277	     "exp": 1883000000,
1278	     "sub": "6c5c0a49-b589-431d-bae7-219122a9ec2c",
1279	     "_sd_alg": "sha-256"
1280	   }

1282	   The Issuer would create the following Disclosure referenced by the
1283	   one hash in the SD-JWT:

1285	   *Claim address*:

1287	   *  SHA-256 Hash: fOBUSQvo46yQO-wRwXBcGqvnbKIueISEL961_Sjd4do
1288	   *  Disclosure:
1289	      WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImFkZHJlc3MiLCB7InN0cmVl
1290	      dF9hZGRyZXNzIjogIlNjaHVsc3RyLiAxMiIsICJsb2NhbGl0eSI6ICJTY2h1
1291	      bHBmb3J0YSIsICJyZWdpb24iOiAiU2FjaHNlbi1BbmhhbHQiLCAiY291bnRy
1292	      eSI6ICJERSJ9XQ

1294	   *  Contents: ["2GLC42sKQveCfGfryNRN9w", "address", {"street_address":
1295	      "Schulstr. 12", "locality": "Schulpforta", "region":
1296	      "Sachsen-Anhalt", "country": "DE"}]

1298	6.2.  Example: Structured SD-JWT

1300	   The Issuer may instead decide to make the address claim contents
1301	   selectively disclosable individually:

1303	   {
1304	     "iss": "https://issuer.example.com",
1305	     "iat": 1683000000,
1306	     "exp": 1883000000,
1307	     "sub": "6c5c0a49-b589-431d-bae7-219122a9ec2c",
1308	     "address": {
1309	       "_sd": [
1310	         "6vh9bq-zS4GKM_7GpggVbYzzu6oOGXrmNVGPHP75Ud0",
1311	         "9gjVuXtdFROCgRrtNcGUXmF65rdezi_6Er_j76kmYyM",
1312	         "KURDPh4ZC19-3tiz-Df39V8eidy1oV3a3H1Da2N0g88",
1313	         "WN9r9dCBJ8HTCsS2jKASxTjEyW5m5x65_Z_2ro2jfXM"
1314	       ]
1315	     },
1316	     "_sd_alg": "sha-256"
1317	   }

1319	   In this case, the Issuer would use the following data in the
1320	   Disclosures for the address sub-claims:

1322	   *Claim street_address*:

1324	   *  SHA-256 Hash: 9gjVuXtdFROCgRrtNcGUXmF65rdezi_6Er_j76kmYyM
1325	   *  Disclosure:
1326	      WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgInN0cmVldF9hZGRyZXNzIiwg
1327	      IlNjaHVsc3RyLiAxMiJd
1328	   *  Contents: ["2GLC42sKQveCfGfryNRN9w", "street_address", "Schulstr.
1329	      12"]

1331	   *Claim locality*:

1333	   *  SHA-256 Hash: 6vh9bq-zS4GKM_7GpggVbYzzu6oOGXrmNVGPHP75Ud0
1334	   *  Disclosure:
1335	      WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImxvY2FsaXR5IiwgIlNjaHVs
1336	      cGZvcnRhIl0
1337	   *  Contents: ["eluV5Og3gSNII8EYnsxA_A", "locality", "Schulpforta"]

1339	   *Claim region*:

1341	   *  SHA-256 Hash: KURDPh4ZC19-3tiz-Df39V8eidy1oV3a3H1Da2N0g88
1342	   *  Disclosure:
1343	      WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgInJlZ2lvbiIsICJTYWNoc2Vu
1344	      LUFuaGFsdCJd
1345	   *  Contents: ["6Ij7tM-a5iVPGboS5tmvVA", "region", "Sachsen-Anhalt"]

1347	   *Claim country*:

1349	   *  SHA-256 Hash: WN9r9dCBJ8HTCsS2jKASxTjEyW5m5x65_Z_2ro2jfXM
1350	   *  Disclosure:
1351	      WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgImNvdW50cnkiLCAiREUiXQ
1352	   *  Contents: ["eI8ZWm9QnKPpNPeNenHdhQ", "country", "DE"]

1354	   The Issuer may also make one sub-claim of address permanently
1355	   disclosed and hide only the other sub-claims:

1357	   {
1358	     "iss": "https://issuer.example.com",
1359	     "iat": 1683000000,
1360	     "exp": 1883000000,
1361	     "sub": "6c5c0a49-b589-431d-bae7-219122a9ec2c",
1362	     "address": {
1363	       "_sd": [
1364	         "6vh9bq-zS4GKM_7GpggVbYzzu6oOGXrmNVGPHP75Ud0",
1365	         "9gjVuXtdFROCgRrtNcGUXmF65rdezi_6Er_j76kmYyM",
1366	         "KURDPh4ZC19-3tiz-Df39V8eidy1oV3a3H1Da2N0g88"
1367	       ],
1368	       "country": "DE"
1369	     },
1370	     "_sd_alg": "sha-256"
1371	   }

1373	   In this case, there would be no Disclosure for country, since it is
1374	   provided in the clear.

1376	6.3.  Example: SD-JWT with Recursive Disclosures

1378	   The Issuer may also decide to make the address claim contents
1379	   selectively disclosable recursively, i.e., the address claim is made
1380	   selectively disclosable as well as its sub-claims:

1382	   {
1383	     "_sd": [
1384	       "HvrKX6fPV0v9K_yCVFBiLFHsMaxcD_114Em6VT8x1lg"
1385	     ],
1386	     "iss": "https://issuer.example.com",
1387	     "iat": 1683000000,
1388	     "exp": 1883000000,
1389	     "sub": "6c5c0a49-b589-431d-bae7-219122a9ec2c",
1390	     "_sd_alg": "sha-256"
1391	   }

1393	   The Issuer creates Disclosures first for the sub-claims and then
1394	   includes their digests in the Disclosure for the address claim:

1396	   *Claim street_address*:

1398	   *  SHA-256 Hash: 9gjVuXtdFROCgRrtNcGUXmF65rdezi_6Er_j76kmYyM
1399	   *  Disclosure:
1400	      WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgInN0cmVldF9hZGRyZXNzIiwg
1401	      IlNjaHVsc3RyLiAxMiJd
1402	   *  Contents: ["2GLC42sKQveCfGfryNRN9w", "street_address", "Schulstr.
1403	      12"]

1405	   *Claim locality*:

1407	   *  SHA-256 Hash: 6vh9bq-zS4GKM_7GpggVbYzzu6oOGXrmNVGPHP75Ud0
1408	   *  Disclosure:
1409	      WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImxvY2FsaXR5IiwgIlNjaHVs
1410	      cGZvcnRhIl0
1411	   *  Contents: ["eluV5Og3gSNII8EYnsxA_A", "locality", "Schulpforta"]

1413	   *Claim region*:

1415	   *  SHA-256 Hash: KURDPh4ZC19-3tiz-Df39V8eidy1oV3a3H1Da2N0g88
1416	   *  Disclosure:
1417	      WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgInJlZ2lvbiIsICJTYWNoc2Vu
1418	      LUFuaGFsdCJd
1419	   *  Contents: ["6Ij7tM-a5iVPGboS5tmvVA", "region", "Sachsen-Anhalt"]

1421	   *Claim country*:

1423	   *  SHA-256 Hash: WN9r9dCBJ8HTCsS2jKASxTjEyW5m5x65_Z_2ro2jfXM
1424	   *  Disclosure:
1425	      WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgImNvdW50cnkiLCAiREUiXQ
1426	   *  Contents: ["eI8ZWm9QnKPpNPeNenHdhQ", "country", "DE"]

1428	   *Claim address*:

1430	   *  SHA-256 Hash: HvrKX6fPV0v9K_yCVFBiLFHsMaxcD_114Em6VT8x1lg
1431	   *  Disclosure:
1432	      WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImFkZHJlc3MiLCB7Il9zZCI6
1433	      IFsiNnZoOWJxLXpTNEdLTV83R3BnZ1ZiWXp6dTZvT0dYcm1OVkdQSFA3NVVk
1434	      MCIsICI5Z2pWdVh0ZEZST0NnUnJ0TmNHVVhtRjY1cmRlemlfNkVyX2o3Nmtt
1435	      WXlNIiwgIktVUkRQaDRaQzE5LTN0aXotRGYzOVY4ZWlkeTFvVjNhM0gxRGEy
1436	      TjBnODgiLCAiV045cjlkQ0JKOEhUQ3NTMmpLQVN4VGpFeVc1bTV4NjVfWl8y
1437	      cm8yamZYTSJdfV0
1438	   *  Contents: ["Qg_O64zqAxe412a108iroA", "address", {"_sd":
1439	      ["6vh9bq-zS4GKM_7GpggVbYzzu6oOGXrmNVGPHP75Ud0",
1440	      "9gjVuXtdFROCgRrtNcGUXmF65rdezi_6Er_j76kmYyM",
1441	      "KURDPh4ZC19-3tiz-Df39V8eidy1oV3a3H1Da2N0g88",
1442	      "WN9r9dCBJ8HTCsS2jKASxTjEyW5m5x65_Z_2ro2jfXM"]}]

1444	7.  Verification and Processing

1446	7.1.  Verification of the SD-JWT

1448	   Upon receiving an SD-JWT, either directly or as a component of an SD-
1449	   JWT+KB, a Holder or a Verifier needs to ensure that:

1451	   *  the Issuer-signed JWT is valid, i.e., it is signed by the Issuer,
1452	      the signature is valid, it is not expired, it is not suspended or
1453	      revoked, etc., and
1454	   *  all Disclosures are valid and correspond to a respective digest
1455	      value in the Issuer-signed JWT (directly in the payload or
1456	      recursively included in the contents of other Disclosures).

1458	   The Holder or the Verifier MUST perform the following (or equivalent)
1459	   steps when receiving an SD-JWT to validate the SD-JWT and extract the
1460	   payload:

1462	   1.  Separate the SD-JWT into the Issuer-signed JWT and the
1463	       Disclosures (if any).
1464	   2.  Validate the Issuer-signed JWT:
1465	       1.  Ensure that a signing algorithm was used that was deemed
1466	           secure for the application.  Refer to [RFC8725], Sections 3.1
1467	           and 3.2 for details.  The none algorithm MUST NOT be
1468	           accepted.
1469	       2.  Validate the signature over the Issuer-signed JWT per
1470	           Section 5.2 of [RFC7515].
1471	       3.  Validate the Issuer and that the signing key belongs to this
1472	           Issuer.
1473	       4.  Check that the _sd_alg claim value is understood and the hash
1474	           algorithm is deemed secure (see Section 4.1.1).
1475	   3.  Process the Disclosures and embedded digests in the Issuer-signed
1476	       JWT as follows:
1477	       1.  For each Disclosure provided:

1479	           1.  Calculate the digest over the base64url-encoded string as
1480	               described in Section 4.2.3.
1481	       2.  (*) Identify all embedded digests in the Issuer-signed JWT as
1482	           follows:
1483	           1.  Find all objects having an _sd key that refers to an
1484	               array of strings.
1485	           2.  Find all array elements that are objects with one key,
1486	               that key being ... and referring to a string.
1487	       3.  (**) For each embedded digest found in the previous step:
1488	           1.  Compare the value with the digests calculated previously
1489	               and find the matching Disclosure.  If no such Disclosure
1490	               can be found, the digest MUST be ignored.
1491	           2.  If the digest was found in an object's _sd key:
1492	               1.  If the contents of the respective Disclosure is not a
1493	                   JSON array of three elements (salt, claim name, claim
1494	                   value), the SD-JWT MUST be rejected.
1495	               2.  If the claim name is _sd or ..., the SD-JWT MUST be
1496	                   rejected.
1497	               3.  If the claim name already exists at the level of the
1498	                   _sd key, the SD-JWT MUST be rejected.
1499	               4.  Insert, at the level of the _sd key, a new claim
1500	                   using the claim name and claim value from the
1501	                   Disclosure.
1502	               5.  Recursively process the value using the steps
1503	                   described in (*) and (**).
1504	           3.  If the digest was found in an array element:
1505	               1.  If the contents of the respective Disclosure is not a
1506	                   JSON array of two elements (salt, value), the SD-JWT
1507	                   MUST be rejected.
1508	               2.  Replace the array element with the value from the
1509	                   Disclosure.
1510	               3.  Recursively process the value using the steps
1511	                   described in (*) and (**).
1512	       4.  Remove all array elements for which the digest was not found
1513	           in the previous step.
1514	       5.  Remove all _sd keys and their contents from the Issuer-signed
1515	           JWT payload.  If this results in an object with no
1516	           properties, it should be represented as an empty object {}.
1517	       6.  Remove the claim _sd_alg from the SD-JWT payload.
1518	   4.  If any digest value is encountered more than once in the Issuer-
1519	       signed JWT payload (directly or recursively via other
1520	       Disclosures), the SD-JWT MUST be rejected.
1521	   5.  If any Disclosure was not referenced by digest value in the
1522	       Issuer-signed JWT (directly or recursively via other
1523	       Disclosures), the SD-JWT MUST be rejected.
1524	   6.  Check that the SD-JWT is valid using claims such as nbf, iat, and
1525	       exp in the processed payload.  If a required validity-controlling
1526	       claim is missing (see Section 9.7), the SD-JWT MUST be rejected.

1528	   If any step fails, the SD-JWT is not valid, and processing MUST be
1529	   aborted.  Otherwise, the JSON document resulting from the preceding
1530	   processing and verification steps, herein referred to as the
1531	   processed SD-JWT payload, can be made available to the application to
1532	   be used for its intended purpose.

1534	   |  Note that these processing steps do not yield any guarantees to
1535	   |  the Holder about having received a complete set of Disclosures.
1536	   |  That is, for some digest values in the Issuer-signed JWT (which
1537	   |  are not decoy digests) there may be no corresponding Disclosures,
1538	   |  for example, if the message from the Issuer was truncated.  It is
1539	   |  up to the Holder how to maintain the mapping between the
1540	   |  Disclosures and the plaintext claim values to be able to display
1541	   |  them to the user when needed.

1543	7.2.  Processing by the Holder

1545	   The Issuer provides the Holder with an SD-JWT, not an SD-JWT+KB.  If
1546	   the Holder receives an SD-JWT+KB, it MUST be rejected.

1548	   When receiving an SD-JWT, the Holder MUST do the following:

1550	   1.  Process the SD-JWT as defined in Section 7.1 to validate it and
1551	       extract the payload.
1552	   2.  Ensure that the contents of claims in the payload are acceptable
1553	       (depending on the application; for example, check that any values
1554	       the Holder can check are correct).

1556	   For presentation to a Verifier, the Holder MUST perform the following
1557	   (or equivalent) steps (in addition to the checks described in
1558	   Section 7.1 performed after receiving the SD-JWT):

1560	   1.  Decide which Disclosures to release to the Verifier, obtaining
1561	       proper consent if necessary.
1562	   2.  Verify that each selected Disclosure satisfies one of the two
1563	       following conditions:
1564	       1.  The hash of the Disclosure is contained in the Issuer-signed
1565	           JWT claims
1566	       2.  The hash of the Disclosure is contained in the claim value of
1567	           another selected Disclosure
1568	   3.  Assemble the SD-JWT, including the Issuer-signed JWT and the
1569	       selected Disclosures (see Section 4 for the format).
1570	   4.  If Key Binding is not required:
1571	       1.  Send the SD-JWT to the Verifier.
1572	   5.  If Key Binding is required:
1573	       1.  Create a Key Binding JWT tied to the SD-JWT.
1574	       2.  Assemble the SD-JWT+KB by concatenating the SD-JWT and the
1575	           Key Binding JWT.

1577	       3.  Send the SD-JWT+KB to the Verifier.

1579	7.3.  Verification by the Verifier

1581	   Upon receiving a presentation from a Holder, in the form of either an
1582	   SD-JWT or an SD-JWT+KB, in addition to the checks described in
1583	   Section 7.1, Verifiers need to ensure that

1585	   *  if Key Binding is required, then the Holder has provided an SD-
1586	      JWT+KB, and
1587	   *  the Key Binding JWT is signed by the Holder and valid.

1589	   To this end, Verifiers MUST follow the following steps (or
1590	   equivalent):

1592	   1.  Determine if Key Binding is to be checked according to the
1593	       Verifier's policy for the use case at hand.  This decision MUST
1594	       NOT be based on whether a Key Binding JWT is provided by the
1595	       Holder or not.  Refer to Section 9.5 for details.
1596	   2.  If Key Binding is required and the Holder has provided an SD-JWT
1597	       (without Key Binding), the Verifier MUST reject the presentation.
1598	   3.  If the Holder has provided an SD-JWT+KB, parse it into an SD-JWT
1599	       and a Key Binding JWT.
1600	   4.  Process the SD-JWT as defined in Section 7.1 to validate the
1601	       presentation and extract the payload.
1602	   5.  If Key Binding is required:
1603	       1.  Determine the public key for the Holder from the SD-JWT (see
1604	           Section 4.1.2).
1605	       2.  Ensure that a signing algorithm was used that was deemed
1606	           secure for the application.  Refer to [RFC8725], Sections 3.1
1607	           and 3.2 for details.  The none algorithm MUST NOT be
1608	           accepted.
1609	       3.  Validate the signature over the Key Binding JWT per
1610	           Section 5.2 of [RFC7515].
1611	       4.  Check that the typ of the Key Binding JWT is kb+jwt (see
1612	           Section 4.3).
1613	       5.  Check that the creation time of the Key Binding JWT, as
1614	           determined by the iat claim, is within an acceptable window.
1615	       6.  Determine that the Key Binding JWT is bound to the current
1616	           transaction and was created for this Verifier (replay
1617	           detection) by validating nonce and aud claims.
1618	       7.  Calculate the digest over the Issuer-signed JWT and
1619	           Disclosures as defined in Section 4.3.1 and verify that it
1620	           matches the value of the sd_hash claim in the Key Binding
1621	           JWT.
1622	       8.  Check that the Key Binding JWT is a valid JWT in all other
1623	           respects, per [RFC7519] and [RFC8725].

1625	   If any step fails, the presentation is not valid and processing MUST
1626	   be aborted.

1628	   Otherwise, the processed SD-JWT payload can be passed to the
1629	   application to be used for the intended purpose.

1631	8.  JWS JSON Serialization

1633	   This section describes an alternative format for SD-JWTs and SD-
1634	   JWT+KBs using the JWS JSON Serialization from [RFC7515].  Supporting
1635	   this format is OPTIONAL.

1637	8.1.  New Unprotected Header Parameters

1639	   For both the General and Flattened JSON Serialization, the SD-JWT or
1640	   SD-JWT+KB is represented as a JSON object according to Section 7.2 of
1641	   [RFC7515].  The following new unprotected header parameters are
1642	   defined:

1644	   *  disclosures: An array of strings where each element is an
1645	      individual Disclosure as described in Section 4.2.
1646	   *  kb_jwt: Present only in an SD-JWT+KB, the Key Binding JWT as
1647	      described in Section 4.3.

1649	   In an SD-JWT+KB, kb_jwt MUST be present when using the JWS JSON
1650	   Serialization, and the digest in the sd_hash claim MUST be taken over
1651	   the SD-JWT as described in Section 4.3.1.  This means that even when
1652	   using the JWS JSON Serialization, the representation as a regular SD-
1653	   JWT Compact Serialization MUST be created temporarily to calculate
1654	   the digest.  In detail, the SD-JWT Compact Serialization part is
1655	   built by concatenating the protected header, the payload, and the
1656	   signature of the JWS JSON serialized SD-JWT using a . character as a
1657	   separator, and using the Disclosures from the disclosures member of
1658	   the unprotected header.

1660	   Unprotected headers other than disclosures are not covered by the
1661	   digest, and therefore, as usual, are not protected against tampering.

1663	8.2.  Flattened JSON Serialization

1665	   In case of the Flattened JSON Serialization, there is only one
1666	   unprotected header.

1668	   The following is a non-normative example of a JWS JSON serialized SD-
1669	   JWT as issued using the Flattened JSON Serialization:

1671	   {
1672	     "header": {
1673	       "disclosures": [
1674	         "WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgInN1YiIsICJqb2huX2RvZV80M
1675	           iJd",
1676	         "WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImdpdmVuX25hbWUiLCAiSm9ob
1677	           iJd",
1678	         "WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImZhbWlseV9uYW1lIiwgIkRvZ
1679	           SJd",
1680	         "WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgImJpcnRoZGF0ZSIsICIxOTQwL
1681	           TAxLTAxIl0"
1682	       ]
1683	     },
1684	     "payload": "eyJfc2QiOiBbIjRIQm42YUlZM1d0dUdHV1R4LXFVajZjZGs2V0JwWn
1685	       lnbHRkRmF2UGE3TFkiLCAiOHNtMVFDZjAyMXBObkhBQ0k1c1A0bTRLWmd5Tk9PQV
1686	       ljVGo5SE5hQzF3WSIsICJjZ0ZkaHFQbzgzeFlObEpmYWNhQ2FhN3VQOVJDUjUwVk
1687	       U1UjRMQVE5aXFVIiwgImpNQ1hWei0tOWI4eDM3WWNvRGZYUWluencxd1pjY2NmRl
1688	       JCQ0ZHcWRHMm8iXSwgImlzcyI6ICJodHRwczovL2lzc3Vlci5leGFtcGxlLmNvbS
1689	       IsICJpYXQiOiAxNjgzMDAwMDAwLCAiZXhwIjogMTg4MzAwMDAwMCwgIl9zZF9hbG
1690	       ciOiAic2hhLTI1NiIsICJjbmYiOiB7Imp3ayI6IHsia3R5IjogIkVDIiwgImNydi
1691	       I6ICJQLTI1NiIsICJ4IjogIlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTG
1692	       lsRGxzN3ZDZUdlbWMiLCAieSI6ICJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVm
1693	       Z1ZWNDRTZ0NGpUOUYySFpRIn19fQ",
1694	     "protected":
1695	       "eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0",
1696	     "signature": "Mk9jwErLgd9_aKgc2-PK1yfk6uzCgOBOysc-irMqlEHBAy4RZhQN
1697	       MxWoI2JsELhcCHPaROy5kuirDVPXbmvKyA"
1698	   }

1700	   The following is an SD-JWT+KB with two Disclosures:

1702	   {
1703	     "header": {
1704	       "disclosures": [
1705	         "WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImZhbWlseV9uYW1lIiwgIkRvZ
1706	           SJd",
1707	         "WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImdpdmVuX25hbWUiLCAiSm9ob
1708	           iJd"
1709	       ],
1710	       "kb_jwt": "eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImtiK2p3dCJ9.eyJub25j
1711	         ZSI6ICIxMjM0NTY3ODkwIiwgImF1ZCI6ICJodHRwczovL3ZlcmlmaWVyLmV4YW
1712	         1wbGUub3JnIiwgImlhdCI6IDE3NDcwNzc2MDYsICJzZF9oYXNoIjogIjlVU2RK
1713	         cGowYlBqdVdLLXhyWFFhU2lvRF94aWcteGJEN0pnNXY3alJkRFUifQ.j9eoD7Y
1714	         3wbEqsR8E6fnD6ZgoC1s3brMrhbyOyQY8hwvtalEUKl5HHaOW1UwAoo3zFnqEC
1715	         H9H9_ggs05TJtr0aQ"
1716	     },
1717	     "payload": "eyJfc2QiOiBbIjRIQm42YUlZM1d0dUdHV1R4LXFVajZjZGs2V0JwWn
1718	       lnbHRkRmF2UGE3TFkiLCAiOHNtMVFDZjAyMXBObkhBQ0k1c1A0bTRLWmd5Tk9PQV
1719	       ljVGo5SE5hQzF3WSIsICJjZ0ZkaHFQbzgzeFlObEpmYWNhQ2FhN3VQOVJDUjUwVk
1720	       U1UjRMQVE5aXFVIiwgImpNQ1hWei0tOWI4eDM3WWNvRGZYUWluencxd1pjY2NmRl
1721	       JCQ0ZHcWRHMm8iXSwgImlzcyI6ICJodHRwczovL2lzc3Vlci5leGFtcGxlLmNvbS
1722	       IsICJpYXQiOiAxNjgzMDAwMDAwLCAiZXhwIjogMTg4MzAwMDAwMCwgIl9zZF9hbG
1723	       ciOiAic2hhLTI1NiIsICJjbmYiOiB7Imp3ayI6IHsia3R5IjogIkVDIiwgImNydi
1724	       I6ICJQLTI1NiIsICJ4IjogIlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTG
1725	       lsRGxzN3ZDZUdlbWMiLCAieSI6ICJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVm
1726	       Z1ZWNDRTZ0NGpUOUYySFpRIn19fQ",
1727	     "protected":
1728	       "eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0",
1729	     "signature": "Mk9jwErLgd9_aKgc2-PK1yfk6uzCgOBOysc-irMqlEHBAy4RZhQN
1730	       MxWoI2JsELhcCHPaROy5kuirDVPXbmvKyA"
1731	   }

1733	8.3.  General JSON Serialization

1735	   In case of the General JSON Serialization, there are multiple
1736	   unprotected headers (one per signature).  If present, disclosures and
1737	   kb_jwt, MUST be included in the first unprotected header and MUST NOT
1738	   be present in any following unprotected headers.

1740	   The following is a non-normative example of a presentation of a JWS
1741	   JSON serialized SD-JWT including a Key Binding JWT using the General
1742	   JSON Serialization:

1744	   {
1745	     "payload": "eyJfc2QiOiBbIjRIQm42YUlZM1d0dUdHV1R4LXFVajZjZGs2V0JwWn
1746	       lnbHRkRmF2UGE3TFkiLCAiOHNtMVFDZjAyMXBObkhBQ0k1c1A0bTRLWmd5Tk9PQV
1747	       ljVGo5SE5hQzF3WSIsICJjZ0ZkaHFQbzgzeFlObEpmYWNhQ2FhN3VQOVJDUjUwVk
1748	       U1UjRMQVE5aXFVIiwgImpNQ1hWei0tOWI4eDM3WWNvRGZYUWluencxd1pjY2NmRl
1749	       JCQ0ZHcWRHMm8iXSwgImlzcyI6ICJodHRwczovL2lzc3Vlci5leGFtcGxlLmNvbS
1750	       IsICJpYXQiOiAxNjgzMDAwMDAwLCAiZXhwIjogMTg4MzAwMDAwMCwgIl9zZF9hbG
1751	       ciOiAic2hhLTI1NiIsICJjbmYiOiB7Imp3ayI6IHsia3R5IjogIkVDIiwgImNydi
1752	       I6ICJQLTI1NiIsICJ4IjogIlRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTG
1753	       lsRGxzN3ZDZUdlbWMiLCAieSI6ICJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVm
1754	       Z1ZWNDRTZ0NGpUOUYySFpRIn19fQ",
1755	     "signatures": [
1756	       {
1757	         "header": {
1758	           "disclosures": [
1759	             "WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImZhbWlseV9uYW1lIiwgI
1760	               kRvZSJd",
1761	             "WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImdpdmVuX25hbWUiLCAiS
1762	               m9obiJd"
1763	           ],
1764	           "kid": "issuer-key-1",
1765	           "kb_jwt": "eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImtiK2p3dCJ9.eyJu
1766	             b25jZSI6ICIxMjM0NTY3ODkwIiwgImF1ZCI6ICJodHRwczovL3ZlcmlmaW
1767	             VyLmV4YW1wbGUub3JnIiwgImlhdCI6IDE3NDcwNzc2MDYsICJzZF9oYXNo
1768	             IjogImh2THN3Y2xaZ09GVkN6VHI1eERibWNPSVA2S3dqT0NQOGd0cld5N1
1769	             pERkkifQ.FvLAlNWkuuUHf0dwT3uQkl4m8Ygvc5IMI2WBNqzYqiJOZIOuM
1770	             DmTJ3-F8ycMtb2Khmrgr13AU5HVaiVyAgnEmg"
1771	         },
1772	         "protected":
1773	           "eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0",
1774	         "signature": "1PFfJ7RnqI9XlPSCjInqlrTVL2dJL4NboDUNMDiU8AxMV-o9
1775	           35G63vli9C7UV8KtD2x30oc9xLJOBH_AGm3kMQ"
1776	       },
1777	       {
1778	         "header": {
1779	           "kid": "issuer-key-2"
1780	         },
1781	         "protected":
1782	           "eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0",
1783	         "signature": "nYH8wZ6ZCpOOWRhusUzdlfb3sBCh9kW0SS0-V2g4kPN__EqH
1784	           8xYZwkFjSuxlaVG79NW4sTDsvOOTNdzQM3O_zA"
1785	       }
1786	     ]
1787	   }

1789	8.4.  Verification of the JWS JSON Serialized SD-JWT

1791	   Verification of the JWS JSON serialized SD-JWT follows the rules
1792	   defined in Section 3.4, except for the following aspects:

1794	   *  The SD-JWT or SD-JWT+KB does not need to be split into component
1795	      parts and the Disclosures can be found in the disclosures member
1796	      of the unprotected header.
1797	   *  To verify the digest in sd_hash in the Key Binding JWT of an SD-
1798	      JWT+KB, the Verifier MUST assemble the string to be hashed as
1799	      described in Section 8.1.

1801	9.  Security Considerations

1803	   Security considerations in this section help achieve the following
1804	   properties:

1806	   *Selective Disclosure:* An adversary in the role of the Verifier
1807	   cannot obtain information from an SD-JWT about any claim name or
1808	   claim value that was not explicitly disclosed by the Holder unless
1809	   that information can be derived from other disclosed claims or
1810	   sources other than the presented SD-JWT.

1812	   *Integrity:* A malicious Holder cannot modify names or values of
1813	   selectively disclosable claims without detection by the Verifier.

1815	   Additionally, as described in Section 9.5, the application of Key
1816	   Binding can ensure that the presenter of an SD-JWT credential is the
1817	   Holder of the credential.

1819	9.1.  Mandatory Signing of the Issuer-signed JWT

1821	   The JWT MUST be signed by the Issuer to protect integrity of the
1822	   issued claims.  An attacker can modify or add claims if this JWT is
1823	   not signed (e.g., change the "email" attribute to take over the
1824	   victim's account or add an attribute indicating a fake academic
1825	   qualification).

1827	   The Verifier MUST always check the signature of the Issuer-signed JWT
1828	   to ensure that it has not been tampered with since the issuance.  The
1829	   Issuer-signed JWT MUST be rejected if the signature cannot be
1830	   verified.

1832	   The security of the Issuer-signed JWT depends on the security of the
1833	   signature algorithm.  Any of the JWS asymmetric digital signature
1834	   algorithms registered in [IANA.JWS.Algorithms] that meet the security
1835	   requirements described in the last paragraph of Section 5.2 of
1836	   [RFC7515] can be used, including post-quantum algorithms, when they
1837	   are ready.

1839	9.2.  Manipulation of Disclosures

1841	   Holders can manipulate the Disclosures by changing the values of the
1842	   claims before sending them to the Verifier.  The Verifier MUST check
1843	   the Disclosures to ensure that the values of the claims are correct,
1844	   i.e., the digests of the Disclosures are actually present in the
1845	   signed SD-JWT.

1847	   A naive Verifier that extracts all claim values from the Disclosures
1848	   (without checking the hashes) and inserts them into the SD-JWT
1849	   payload is vulnerable to this attack.  However, in a structured SD-
1850	   JWT, without comparing the digests of the Disclosures, such an
1851	   implementation could not determine the correct place in a nested
1852	   object where a claim needs to be inserted.  Therefore, the naive
1853	   implementation would not only be insecure, but also incorrect.

1855	   The steps described in Section 7.3 ensure that the Verifier checks
1856	   the Disclosures correctly.

1858	9.3.  Entropy of the Salt

1860	   The security model that conceals the plaintext claims relies on the
1861	   high entropy random data of the salt as additional input to the hash
1862	   function.  The randomness ensures that the same plaintext claim value
1863	   does not produce the same digest value.  It also makes it infeasible
1864	   to guess the preimage of the digest (thereby learning the plaintext
1865	   claim value) by enumerating the potential value space for a claim
1866	   into the hash function to search for a matching digest value.  It is
1867	   therefore vitally important that unrevealed salts cannot be learned
1868	   or guessed, even if other salts have been revealed.  As such, each
1869	   salt MUST be created in such a manner that it is cryptographically
1870	   random, sufficiently long, and has high enough entropy that it is
1871	   infeasible to guess.  A new salt MUST be chosen for each claim
1872	   independently of other salts.  See Randomness Requirements for
1873	   Security [RFC4086] for considerations on generating random values.

1875	   The RECOMMENDED minimum length of the randomly-generated portion of
1876	   the salt is 128 bits.

1878	   The Issuer MUST ensure that a new salt value is chosen for each
1879	   claim, including when the same claim name occurs at different places
1880	   in the structure of the SD-JWT.  This can be seen in the example in
1881	   Appendix A.2, where multiple claims with the name type appear, but
1882	   each of them has a different salt.

1884	9.4.  Choice of a Hash Algorithm

1886	   To ensure privacy of claims that are selectively disclosable, but are
1887	   not being disclosed in a given presentation, the hash function MUST
1888	   ensure that it is infeasible to calculate any portion of the three
1889	   elements (salt, claim name, claim value) from a particular digest.
1890	   This implies the hash function MUST be preimage resistant, but should
1891	   also not allow an observer to infer any partial information about the
1892	   undisclosed content.  In the terminology of cryptographic commitment
1893	   schemes, the hash function needs to be computationally hiding.

1895	   To ensure the integrity of selectively disclosable claims, the hash
1896	   function MUST be second-preimage resistant.  That is, for any
1897	   combination of salt, claim name and claim value, it is infeasible to
1898	   find a different combination of salt, claim name and claim value that
1899	   result in the same digest.

1901	   The hash function SHOULD also be collision resistant.  Although not
1902	   essential to the anticipated uses of SD-JWT, without collision
1903	   resistance an Issuer may be able to find multiple disclosures that
1904	   have the same hash value.  In which case, the signature over the SD-
1905	   JWT would not then commit the Issuer to the contents of the JWT.  The
1906	   collision resistance of the hash function used to generate digests
1907	   SHOULD match the collision resistance of the hash function used by
1908	   the signature scheme.  For example, use of the ES512 signature
1909	   algorithm would require a disclosure hash function with at least
1910	   256-bit collision resistance, such as SHA-512.

1912	   Inclusion in the "Named Information Hash Algorithm" registry
1913	   [IANA.Hash.Algorithms] alone does not indicate a hash algorithm's
1914	   suitability for use in SD-JWT (it contains several heavily truncated
1915	   digests, such as sha-256-32 and sha-256-64, which are unfit for
1916	   security applications).

1918	   Furthermore, the hash algorithms MD2, MD4, MD5, and SHA-1 revealed
1919	   fundamental weaknesses and MUST NOT be used.

1921	9.5.  Key Binding

1923	   Key Binding aims to ensure that the presenter of an SD-JWT credential
1924	   is actually the Holder of the credential.  An SD-JWT compatible with
1925	   Key Binding contains a public key, or a reference to a public key,
1926	   that corresponds to a private key possessed by the Holder.  The
1927	   Verifier requires that the Holder prove possession of that private
1928	   key when presenting the SD-JWT credential.

1930	   Without Key Binding, a Verifier only gets the proof that the
1931	   credential was issued by a particular Issuer, but the credential
1932	   itself can be replayed by anyone who gets access to it.  This means
1933	   that, for example, after a credential was leaked to an attacker, the
1934	   attacker can present the credential to any verifier that does not
1935	   require a binding.  But also a malicious Verifier to which the Holder
1936	   presented the credential can present the credential to another
1937	   Verifier if that other Verifier does not require Key Binding.

1939	   Verifiers MUST decide whether Key Binding is required for a
1940	   particular use case before verifying a credential.  This decision can
1941	   be informed by various factors including, but not limited to the
1942	   following: business requirements, the use case, the type of binding
1943	   between a Holder and its credential that is required for a use case,
1944	   the sensitivity of the use case, the expected properties of a
1945	   credential, the type and contents of other credentials expected to be
1946	   presented at the same time, etc.

1948	   It is important that a Verifier does not make its security policy
1949	   decisions based on data that can be influenced by an attacker.  For
1950	   this reason, when deciding whether Key Binding is required or not,
1951	   Verifiers MUST NOT take into account whether the Holder has provided
1952	   an SD-JWT+KB or a bare SD-JWT, since otherwise an attacker could
1953	   strip the KB-JWT from an SD-JWT+KB and present the resulting SD-JWT.

1955	   Furthermore, Verifiers should be aware that Key Binding information
1956	   may have been added to an SD-JWT in a format that they do not
1957	   recognize and therefore may not be able to tell whether the SD-JWT
1958	   supports Key Binding or not.

1960	   If a Verifier determines that Key Binding is required for a
1961	   particular use case and the Holder presents either a bare SD-JWT or
1962	   an SD-JWT+KB with an invalid Key Binding JWT, then the Verifier will
1963	   reject the presentation when following the verification steps
1964	   described in Section 7.3.

1966	9.6.  Concealing Claim Names

1968	   SD-JWT ensures that names of claims that are selectively disclosable
1969	   are always concealed unless the claim's value is disclosed.  This
1970	   prevents an attacker from learning the names of such claims.
1971	   However, the names of the claims that are permanently disclosed are
1972	   not hidden.  This includes the keys of objects that themselves are
1973	   not concealed, but contain concealed claims.  This limitation needs
1974	   to be taken into account by Issuers when creating the structure of
1975	   the SD-JWT.

1977	9.7.  Selectively-Disclosable Validity Claims

1979	   An Issuer MUST NOT allow any content to be selectively disclosable
1980	   that is critical for evaluating the SD-JWT's authenticity or
1981	   validity.  The exact list of such content will depend on the
1982	   application and SHOULD be listed by any application-specific profiles
1983	   of SD-JWT.  The following is a list of registered JWT claim names
1984	   that SHOULD be considered as security-critical:

1986	   *  iss (Issuer)
1987	   *  aud (Audience), although issuers MAY allow individual entries in
1988	      the array to be selectively disclosable
1989	   *  exp (Expiration Time)
1990	   *  nbf (Not Before)
1991	   *  cnf (Confirmation Key)

1993	   Issuers will typically include claims controlling the validity of the
1994	   SD-JWT in plaintext in the SD-JWT payload, but there is no guarantee
1995	   they would do so.  Therefore, Verifiers cannot reliably depend on
1996	   that and need to operate as though security-critical claims might be
1997	   selectively disclosable.

1999	   Verifiers therefore MUST ensure that all claims they deem necessary
2000	   for checking the validity of an SD-JWT in the given context are
2001	   present (or disclosed, respectively) during validation of the SD-JWT.
2002	   This is implemented in the last step of the verification defined in
2003	   Section 7.1.

2005	   The precise set of required validity claims will typically be defined
2006	   by operating environment rules, application-specific profile, or the
2007	   credential format and MAY include claims other than those listed
2008	   herein.

2010	9.8.  Distribution and Rotation of Issuer Signature Verification Key

2012	   This specification does not define how signature verification keys of
2013	   Issuers are distributed to Verifiers.  However, it is RECOMMENDED
2014	   that Issuers publish their keys in a way that allows for efficient
2015	   and secure key rotation and revocation, for example, by publishing
2016	   keys at a predefined location using the JSON Web Key Set (JWKS)
2017	   format [RFC7517].  Verifiers need to ensure that they are not using
2018	   expired or revoked keys for signature verification using reasonable
2019	   and appropriate means for the given key-distribution method.

2021	9.9.  Forwarding Credentials

2023	   Any entity in possession of an SD-JWT (including an SD-JWT extracted
2024	   from an SD-JWT+KB) can forward it to any third party that does not
2025	   enforce Key Binding.  When doing so, that entity may remove
2026	   Disclosures such that the receiver learns only a subset of the claims
2027	   contained in the original SD-JWT.

2029	   For example, a device manufacturer might produce an SD-JWT containing
2030	   information about upstream and downstream supply chain contributors.
2031	   Each supply chain party can verify only the claims that were
2032	   selectively disclosed to them by an upstream party, and they can
2033	   choose to further reduce the disclosed claims when presenting to a
2034	   downstream party.

2036	   In some scenarios this behavior could be desirable, but if it is not,
2037	   Issuers need to support and Verifiers need to enforce Key Binding.

2039	9.10.  Integrity of SD-JWTs and SD-JWT+KBs

2041	   With an SD-JWT, the Issuer-signed JWT is integrity-protected by the
2042	   Issuer's signature, and the values of the Disclosures are integrity-
2043	   protected by the digests included therein.  The specific set of
2044	   Disclosures, however, is not integrity-protected; the SD-JWT can be
2045	   modified by adding or removing Disclosures and still be valid.

2047	   With an SD-JWT+KB, the set of selected Disclosures is integrity-
2048	   protected.  The signature in the Key Binding JWT covers a specific
2049	   SD-JWT, with a specific Issuer-signed JWT and a specific set of
2050	   Disclosures.  Thus, the signature on the Key Binding JWT, in addition
2051	   to proving Key Binding, also assures the authenticity and integrity
2052	   of the set of Disclosures the Holder disclosed.  The set of
2053	   Disclosures in an SD-JWT+KB is the set that the Holder intended to
2054	   send; no intermediate party has added, removed, or modified the list
2055	   of Disclosures.

2057	9.11.  Explicit Typing

2059	   Section 3.11 of [RFC8725] describes the use of explicit typing as one
2060	   mechanism to prevent confusion attacks (described in Section 2.8 of
2061	   [RFC8725]) in which one kind of JWT is mistaken for another.  SD-JWTs
2062	   are also potentially subject to such confusion attacks, so in the
2063	   absence of other techniques, it is RECOMMENDED that application
2064	   profiles of SD-JWT specify an explicit type by including the typ
2065	   header parameter when the SD-JWT is issued, and for Verifiers to
2066	   check this value.

2068	   When explicit typing using the typ header is employed for an SD-JWT,
2069	   it is RECOMMENDED that a media type name of the format "application/
2070	   example+sd-jwt" be used, where "example" is replaced by the
2071	   identifier for the specific kind of SD-JWT.  The definition of typ in
2072	   Section 4.1.9 of [RFC7515] recommends that the "application/" prefix
2073	   be omitted, so "example+sd-jwt" would be the value of the typ header
2074	   parameter.

2076	   Use of the cty content type header parameter to indicate the content
2077	   type of the SD-JWT payload can also be used to distinguish different
2078	   types of JSON objects, or different kinds of JWT Claim Sets.

2080	9.12.  Key Pair Generation and Lifecycle Management

2082	   Implementations of SD-JWT rely on asymmetric cryptographic keys and
2083	   must therefore ensure that key pair generation, handling, storage,
2084	   and lifecycle management are performed securely.

2086	   While the specific mechanisms for secure key management are out of
2087	   scope for this document, implementers should follow established best
2088	   practices, such as those outlined in NIST SP 800-57 Part 1
2089	   [NIST.SP.800-57pt1r5].  This includes:

2091	   *  Secure Generation: Using cryptographically secure methods and
2092	      random number generators.
2093	   *  Secure Storage: Protecting private keys from unauthorized access.
2094	   *  Lifecycle Management: Ensuring secure key rotation, revocation,
2095	      and disposal as needed.

2097	   Appropriate key management is essential, as any compromise can lead
2098	   to unauthorized disclosure or forgery of SD-JWTs.

2100	10.  Privacy Considerations
2101	10.1.  Unlinkability

2103	   Unlinkability is a property whereby adversaries are prevented from
2104	   correlating credential presentations of the same user beyond the
2105	   user's consent.  Without unlinkability, an adversary might be able to
2106	   learn more about the user than the user intended to disclose, for
2107	   example:

2109	   *  Cooperating Verifiers might want to track users across services to
2110	      build advertising profiles.
2111	   *  Issuers might want to track where users present their credentials
2112	      to enable surveillance.
2113	   *  After a data breach at multiple Verifiers, publicly available
2114	      information might allow linking identifiable information presented
2115	      to Verifier A with originally anonymous information presented to
2116	      Verifier B, therefore revealing the identities of users of
2117	      Verifier B.

2119	   The following types of unlinkability are discussed below:

2121	   *  Presentation Unlinkability: A Verifier should not be able to link
2122	      two presentations of the same credential.
2123	   *  Verifier/Verifier Unlinkability: The presentations made to two
2124	      different Verifiers should not reveal that the same credential was
2125	      presented (e.g., if the two Verifiers collude, or if they are
2126	      forced by a third party to reveal the presentations made to them,
2127	      or data leaks from one Verifier to the other).
2128	   *  Issuer/Verifier Unlinkability (Honest Verifier): An Issuer of a
2129	      credential should not be able to know that a user presented this
2130	      credential unless the Verifier is sharing presentation data with
2131	      the Issuer accidentally, deliberately, or because it is forced to
2132	      do so.
2133	   *  Issuer/Verifier Unlinkability (Careless/Colluding/Compromised/
2134	      Coerced Verifier): An Issuer of a credential should under no
2135	      circumstances be able to tell that a user presented this
2136	      credential to a certain Verifier.  In particular this includes
2137	      cases when the Verifier accidentally or deliberately shares
2138	      presentation data with the Issuer or is forced to do so.

2140	   In all cases, unlinkability is limited to cases where the disclosed
2141	   claims do not contain information that directly or indirectly
2142	   identifies the user.  For example, when a taxpayer identification
2143	   number is contained in the disclosed claims, the Issuer and Verifier
2144	   can easily link the user's transactions.  However, when the user only
2145	   discloses a birthdate to one Verifier and a postal code to another
2146	   Verifier, the two Verifiers should not be able to determine that they
2147	   were interacting with the same user.

2149	   Issuer/Verifier unlinkability with a careless, colluding,
2150	   compromised, or coerced Verifier cannot be achieved in salted-hash
2151	   based selective disclosure approaches, such as SD-JWT, as the issued
2152	   credential with the Issuer's signature is directly presented to the
2153	   Verifier, who can forward it to the Issuer.  To reduce the risk of
2154	   revealing the data later on, Section 10.2 defines requirements to
2155	   reduce the amount of data stored.

2157	   In considering Issuer/Verifier unlinkability, it is important to note
2158	   the potential for an asymmetric power dynamic between Issuers and
2159	   Verifiers.  This dynamic can compel an otherwise honest Verifier into
2160	   collusion.  For example, a governmental Issuer might have the
2161	   authority to mandate that a Verifier report back information about
2162	   the credentials presented to it.  Legal requirements could further
2163	   enforce this, explicitly undermining Issuer/Verifier unlinkability.
2164	   Similarly, a large service provider issuing credentials might
2165	   implicitly pressure Verifiers into collusion by incentivizing
2166	   participation in their larger operating environment.  Deployers of
2167	   SD-JWT must be aware of these potential power dynamics, mitigate them
2168	   as much as possible, and/or make the risks transparent to the user.

2170	   Contrary to that, Issuer/Verifier unlinkability with an honest
2171	   Verifier can generally be achieved.  However, a callback from the
2172	   Verifier to the Issuer, such as a revocation check, could potentially
2173	   disclose information about the credential's usage to the Issuer.
2174	   Where such callbacks are necessary, they need to be executed in a
2175	   manner that preserves privacy and does not disclose details about the
2176	   credential to the Issuer (the mechanism described in
2177	   [I-D.ietf-oauth-status-list] is an example of an approach with
2178	   minimal information disclosure towards the Issuer).  It is important
2179	   to note that the timing of such requests could potentially serve as a
2180	   side-channel.

2182	   Verifier/Verifier unlinkability and presentation unlinkability can be
2183	   achieved using batch issuance: A batch of credentials based on the
2184	   same claims is issued to the Holder instead of just a single
2185	   credential.  The Holder can then use a different credential for each
2186	   Verifier or even for each session with a Verifier.  New key binding
2187	   keys and salts MUST be used for each credential in the batch to
2188	   ensure that the Verifiers cannot link the credentials using these
2189	   values.  Likewise, claims carrying time information, like iat, exp,
2190	   and nbf, MUST either be randomized within a time period considered
2191	   appropriate (e.g., randomize iat within the last 24 hours and
2192	   calculate exp accordingly) or rounded (e.g., rounded down to the
2193	   beginning of the day).

2195	   SD-JWT only conceals the value of claims that are not revealed.  It
2196	   does not meet the security properties for anonymous credentials
2197	   [CL01].  In particular, colluding Verifiers and Issuers can know when
2198	   they have seen the same credential no matter what fields have been
2199	   disclosed, even when none have been disclosed.  This behavior may not
2200	   align with what users naturally anticipate or are guided to expect
2201	   from user interface interactions, potentially causing them to make
2202	   decisions they might not otherwise make.  Workarounds such as batch
2203	   issuance, as described above, help with keeping Verifiers from
2204	   linking different presentations, but cannot work for Issuer/Verifier
2205	   unlinkability.  This issue applies to all salted hash-based
2206	   approaches, including mDL/mDoc [ISO.18013-5] and SD-CWT
2207	   [I-D.ietf-spice-sd-cwt].

2209	10.2.  Storage of User Data

2211	   Wherever user data is stored, it represents a potential target for an
2212	   attacker.  This target can be of particularly high value when the
2213	   data is signed by a trusted authority like an official national
2214	   identity service.  For example, in OpenID Connect [OpenID.Core],
2215	   signed ID Tokens can be stored by Relying Parties.  In the case of
2216	   SD-JWT, Holders have to store SD-JWTs, and Issuers and Verifiers may
2217	   decide to do so as well.

2219	   Not surprisingly, a leak of such data risks revealing private data of
2220	   users to third parties.  Signed user data, the authenticity of which
2221	   can be easily verified by third parties, further exacerbates the
2222	   risk.  As discussed in Section 9.5, leaked SD-JWTs may also allow
2223	   attackers to impersonate Holders unless Key Binding is enforced and
2224	   the attacker does not have access to the Holder's cryptographic keys.

2226	   Due to these risks, and the risks described in Section 10.1, systems
2227	   implementing SD-JWT SHOULD be designed to minimize the amount of data
2228	   that is stored.  All involved parties SHOULD NOT store SD-JWTs longer
2229	   than strictly needed, including in log files.

2231	   After Issuance, Issuers SHOULD NOT store the Issuer-signed JWT or the
2232	   respective Disclosures.

2234	   Holders SHOULD store SD-JWTs only in encrypted form, and, wherever
2235	   possible, use hardware-backed encryption in particular for the
2236	   private Key Binding key.  Decentralized storage of data, e.g., on
2237	   user devices, SHOULD be preferred for user credentials over
2238	   centralized storage.  Expired SD-JWTs SHOULD be deleted as soon as
2239	   possible.

2241	   After Verification, Verifiers SHOULD NOT store the Issuer-signed JWT
2242	   or the respective Disclosures.  It may be sufficient to store the
2243	   result of the verification and any user data that is needed for the
2244	   application.

2246	   Exceptions from the rules above can be made if there are strong
2247	   requirements to do so (e.g., functional requirements or legal audit
2248	   requirements), secure storage can be ensured, and the privacy impact
2249	   has been assessed.

2251	10.3.  Confidentiality during Transport

2253	   If the SD-JWT is transmitted over an insecure channel during issuance
2254	   or presentation, an adversary may be able to intercept and read the
2255	   user's personal data or correlate the information with previous uses
2256	   of the same SD-JWT.

2258	   Usually, transport protocols for issuance and presentation of
2259	   credentials are designed to protect the confidentiality of the
2260	   transmitted data, for example, by requiring the use of TLS.

2262	   This specification therefore considers the confidentiality of the
2263	   data to be provided by the transport protocol and does not specify
2264	   any encryption mechanism.

2266	   Implementers MUST ensure that the transport protocol provides
2267	   confidentiality if the privacy of user data or correlation attacks by
2268	   passive observers are a concern.

2270	   To encrypt the SD-JWT when transmitted over an insecure channel,
2271	   implementers MAY use JSON Web Encryption (JWE) [RFC7516] by nesting
2272	   the SD-JWT as the plaintext payload of a JWE.  Especially, when an
2273	   SD-JWT is transmitted via a URL and information may be stored/cached
2274	   in the browser or end up in web server logs, the SD-JWT SHOULD be
2275	   encrypted using JWE.

2277	10.4.  Decoy Digests

2279	   The use of decoy digests is RECOMMENDED when the number of claims (or
2280	   the existence of particular claims) can be a side-channel disclosing
2281	   information about otherwise undisclosed claims.  In particular, if a
2282	   claim in an SD-JWT is present only if a certain condition is met
2283	   (e.g., a membership number is only contained if the user is a member
2284	   of a group), the Issuer SHOULD add decoy digests when the condition
2285	   is not met.

2287	   Decoy digests increase the size of the SD-JWT.  The number of decoy
2288	   digests (or whether to use them at all) is a trade-off between the
2289	   size of the SD-JWT and the privacy of the user's data.

2291	10.5.  Issuer Identifier

2293	   An Issuer issuing only one type of SD-JWT might have privacy
2294	   implications, because if the Holder has an SD-JWT issued by that
2295	   Issuer, its type and claim names can be determined.

2297	   For example, if the National Cancer Institute only issued SD-JWTs
2298	   with cancer registry information, it is possible to deduce that the
2299	   Holder owning its SD-JWT is a cancer patient.

2301	   Moreover, the issuer identifier alone may reveal information about
2302	   the user.

2304	   For example, when a military organization or a drug rehabilitation
2305	   center issues a vaccine credential, verifiers can deduce that the
2306	   holder is a military member or may have a substance use disorder.

2308	   To mitigate this issue, a group of issuers may elect to use a common
2309	   Issuer identifier.  A group signature scheme outside the scope of
2310	   this specification may also be used, instead of an individual
2311	   signature.

2313	11.  Acknowledgements

2315	   We would like to thank Alen Horvat, Alex Hodder, Anders Rundgren,
2316	   Arjan Geluk, Chad Parry, Christian Bormann, Christian Paquin, Dale
2317	   Bowie, David Bakker, David Waite, Dick Hardt, Fabian Hauck, Filip
2318	   Skokan, Giuseppe De Marco, Jacob Ward, Jeffrey Yasskin, John
2319	   Mattsson, Joseph Heenan, Justin Richer, Kushal Das, Martin Thomson,
2320	   Matthew Miller, Michael Fraser, Michael B.  Jones, Mike Prorock, Nat
2321	   Sakimura, Neil Madden, Oliver Terbu, Orie Steele, Paul Bastian, Peter
2322	   Altmann, Pieter Kasselman, Richard Barnes, Rohan Mahy, Ryosuke Abe,
2323	   Sami Rosendahl, Shawn Emery, Shawn Butterfield, Simon Schulz, Tobias
2324	   Looker, Takahiko Kawasaki, Torsten Lodderstedt, Vittorio Bertocci,
2325	   Watson Ladd, and Yaron Sheffer for their contributions (some of which
2326	   were substantial) to this draft and to the initial set of
2327	   implementations.

2329	   The work on this draft was started at OAuth Security Workshop 2022 in
2330	   Trondheim, Norway.

2332	12.  IANA Considerations

2334	12.1.  JSON Web Token Claims Registration

2336	   This specification requests registration of the following Claims in
2337	   the IANA "JSON Web Token Claims" registry [IANA.JWT] established by
2338	   [RFC7519].

2340	   *  Claim Name: _sd
2341	   *  Claim Description: Digests of Disclosures for object properties
2342	   *  Change Controller: IETF
2343	   *  Specification Document(s): [[ Section 4.2.4.1 of this
2344	      specification ]]

2346	   *  Claim Name: ...
2347	   *  Claim Description: Digest of the Disclosure for an array element
2348	   *  Change Controller: IETF
2349	   *  Specification Document(s): [[ Section 4.2.4.2 of this
2350	      specification ]]

2352	   *  Claim Name: _sd_alg
2353	   *  Claim Description: Hash algorithm used to generate Disclosure
2354	      digests and digest over presentation
2355	   *  Change Controller: IETF
2356	   *  Specification Document(s): [[ Section 4.1.1 of this specification
2357	      ]]

2359	   *  Claim Name: sd_hash
2360	   *  Claim Description: Digest of the SD-JWT to which the KB-JWT is
2361	      tied
2362	   *  Change Controller: IETF
2363	   *  Specification Document(s): [[ Section 4.3 of this specification ]]

2365	12.2.  Media Type Registration

2367	   This section requests registration of the following media types
2368	   [RFC2046] in the "Media Types" registry [IANA.MediaTypes] in the
2369	   manner described in [RFC6838].

2371	   |  Note: For the media type value used in the typ header in the
2372	   |  Issuer-signed JWT itself, see Section 9.11.

2374	   To indicate that the content is an SD-JWT:

2376	   *  Type name: application
2377	   *  Subtype name: sd-jwt
2378	   *  Required parameters: n/a
2379	   *  Optional parameters: n/a
2380	   *  Encoding considerations: binary; application/sd-jwt values are a
2381	      series of base64url-encoded values (some of which may be the empty
2382	      string) separated by period ('.') and tilde ('~') characters.
2383	   *  Security considerations: See the Security Considerations section
2384	      of [[ this specification ]], [RFC7519], and [RFC8725].
2385	   *  Interoperability considerations: n/a
2386	   *  Published specification: [[ this specification ]]
2387	   *  Applications that use this media type: Applications requiring
2388	      selective disclosure of integrity protected content.
2389	   *  Fragment identifier considerations: n/a
2390	   *  Additional information:
2391	      -  Magic number(s): n/a
2392	      -  File extension(s): n/a
2393	      -  Macintosh file type code(s): n/a
2394	   *  Person & email address to contact for further information: Daniel
2395	      Fett, mail@danielfett.de
2396	   *  Intended usage: COMMON
2397	   *  Restrictions on usage: none
2398	   *  Author: Daniel Fett, mail@danielfett.de
2399	   *  Change Controller: IETF
2400	   *  Provisional registration?  No

2402	   To indicate that the content is a JWS JSON serialized SD-JWT:

2404	   *  Type name: application
2405	   *  Subtype name: sd-jwt+json
2406	   *  Required parameters: n/a
2407	   *  Optional parameters: n/a
2408	   *  Encoding considerations: binary; application/sd-jwt+json values
2409	      are represented as a JSON Object.
2410	   *  Security considerations: See the Security Considerations section
2411	      of [[ this specification ]], and [RFC7515].
2412	   *  Interoperability considerations: n/a
2413	   *  Published specification: [[ this specification ]]
2414	   *  Applications that use this media type: Applications requiring
2415	      selective disclosure of content protected by ETSI JAdES compliant
2416	      signatures.
2417	   *  Fragment identifier considerations: n/a
2418	   *  Additional information:
2419	      -  Magic number(s): n/a
2420	      -  File extension(s): n/a
2421	      -  Macintosh file type code(s): n/a
2422	   *  Person & email address to contact for further information: Daniel
2423	      Fett, mail@danielfett.de
2424	   *  Intended usage: COMMON
2425	   *  Restrictions on usage: none
2426	   *  Author: Daniel Fett, mail@danielfett.de
2427	   *  Change Controller: IETF
2428	   *  Provisional registration?  No

2430	   To indicate that the content is a Key Binding JWT:

2432	   *  Type name: application
2433	   *  Subtype name: kb+jwt
2434	   *  Required parameters: n/a
2435	   *  Optional parameters: n/a
2436	   *  Encoding considerations: binary; A Key Binding JWT is a JWT; JWT
2437	      values are encoded as a series of base64url-encoded values
2438	      separated by period ('.') characters.
2439	   *  Security considerations: See the Security Considerations section
2440	      of [[ this specification ]], [RFC7519], and [RFC8725].
2441	   *  Interoperability considerations: n/a
2442	   *  Published specification: [[ this specification ]]
2443	   *  Applications that use this media type: Applications utilizing a
2444	      JWT based proof of possession mechanism.
2445	   *  Fragment identifier considerations: n/a
2446	   *  Additional information:
2447	      -  Magic number(s): n/a
2448	      -  File extension(s): n/a
2449	      -  Macintosh file type code(s): n/a
2450	   *  Person & email address to contact for further information: Daniel
2451	      Fett, mail@danielfett.de
2452	   *  Intended usage: COMMON
2453	   *  Restrictions on usage: none
2454	   *  Author: Daniel Fett, mail@danielfett.de
2455	   *  Change Controller: IETF
2456	   *  Provisional registration?  No

2458	12.3.  Structured Syntax Suffix Registration

2460	   This section requests registration of the "+sd-jwt" structured syntax
2461	   suffix in the "Structured Syntax Suffix" registry
2462	   [IANA.StructuredSuffix] in the manner described in [RFC6838], which
2463	   can be used to indicate that the media type is encoded as an SD-JWT.

2465	   *  Name: SD-JWT
2466	   *  +suffix: +sd-jwt
2467	   *  References: [[ this specification ]]
2468	   *  Encoding considerations: binary; SD-JWT values are a series of
2469	      base64url-encoded values (some of which may be the empty string)
2470	      separated by period ('.') or tilde ('~') characters.
2471	   *  Interoperability considerations: n/a
2472	   *  Fragment identifier considerations: n/a
2473	   *  Security considerations: See the Security Considerations section
2474	      of [[ this specification ]], [RFC7519], and [RFC8725].
2475	   *  Contact: Daniel Fett, mail@danielfett.de
2476	   *  Author/Change controller: IETF

2478	13.  References

2480	13.1.  Normative References

2482	   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
2483	              Requirement Levels", BCP 14, RFC 2119,
2484	              DOI 10.17487/RFC2119, March 1997,
2485	              <https://www.rfc-editor.org/info/rfc2119>.

2487	   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, "Media Type
2488	              Specifications and Registration Procedures", BCP 13,
2489	              RFC 6838, DOI 10.17487/RFC6838, January 2013,
2490	              <https://www.rfc-editor.org/info/rfc6838>.

2492	   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
2493	              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
2494	              2015, <https://www.rfc-editor.org/info/rfc7515>.

2496	   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
2497	              RFC 7516, DOI 10.17487/RFC7516, May 2015,
2498	              <https://www.rfc-editor.org/info/rfc7516>.

2500	   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
2501	              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
2502	              <https://www.rfc-editor.org/info/rfc7519>.

2504	   [RFC7800]  Jones, M., Bradley, J., and H. Tschofenig, "Proof-of-
2505	              Possession Key Semantics for JSON Web Tokens (JWTs)",
2506	              RFC 7800, DOI 10.17487/RFC7800, April 2016,
2507	              <https://www.rfc-editor.org/info/rfc7800>.

2509	   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
2510	              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
2511	              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

2513	   [RFC8725]  Sheffer, Y., Hardt, D., and M. Jones, "JSON Web Token Best
2514	              Current Practices", BCP 225, RFC 8725,
2515	              DOI 10.17487/RFC8725, February 2020,
2516	              <https://www.rfc-editor.org/info/rfc8725>.

2518	13.2.  Informative References

2520	   [CL01]     Camenisch, J. and A. Lysyanskaya, "An Efficient System for
2521	              Non-Transferable Anonymous Credentials with Optional
2522	              Anonymity Revocation", Proceedings of the International
2523	              Conference on the Theory and Application of Cryptographic
2524	              Techniques (EUROCRYPT) 2001, 2001,
2525	              <https://eprint.iacr.org/2001/019.pdf>.

2527	   [EUDIW.ARF]
2528	              Commission, E., "The European Digital Identity Wallet
2529	              Architecture and Reference Framework", <https://eu-
2530	              digital-identity-wallet.github.io/eudi-doc-architecture-
2531	              and-reference-framework>.

2533	   [I-D.ietf-oauth-sd-jwt-vc]
2534	              Terbu, O., Fett, D., and B. Campbell, "SD-JWT-based
2535	              Verifiable Credentials (SD-JWT VC)", Work in Progress,
2536	              Internet-Draft, draft-ietf-oauth-sd-jwt-vc-08, 3 December
2537	              2024, <https://datatracker.ietf.org/doc/html/draft-ietf-
2538	              oauth-sd-jwt-vc-08>.

2540	   [I-D.ietf-oauth-status-list]
2541	              Looker, T., Bastian, P., and C. Bormann, "Token Status
2542	              List", Work in Progress, Internet-Draft, draft-ietf-oauth-
2543	              status-list-10, 25 March 2025,
2544	              <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-
2545	              status-list-10>.

2547	   [I-D.ietf-spice-sd-cwt]
2548	              Prorock, M., Steele, O., Birkholz, H., and R. Mahy, "SPICE
2549	              SD-CWT", Work in Progress, Internet-Draft, draft-ietf-
2550	              spice-sd-cwt-03, 2 March 2025,
2551	              <https://datatracker.ietf.org/doc/html/draft-ietf-spice-
2552	              sd-cwt-03>.

2554	   [IANA.Hash.Algorithms]
2555	              IANA, "Named Information Hash Algorithm",
2556	              <https://www.iana.org/assignments/named-information/named-
2557	              information.xhtml>.

2559	   [IANA.JWS.Algorithms]
2560	              IANA, "JSON Web Signature and Encryption Algorithms",
2561	              <https://www.iana.org/assignments/jose/jose.xhtml#web-
2562	              signature-encryption-algorithms>.

2564	   [IANA.JWT] IANA, "JSON Web Token Claims",
2565	              <https://www.iana.org/assignments/jwt>.

2567	   [IANA.MediaTypes]
2568	              IANA, "Media Types", <https://www.iana.org/assignments/
2569	              media-types/media-types.xhtml>.

2571	   [IANA.StructuredSuffix]
2572	              IANA, "Structured Syntax Suffixs",
2573	              <https://www.iana.org/assignments/media-type-structured-
2574	              suffix/media-type-structured-suffix.xhtml>.

2576	   [ISO.18013-5]
2577	              ISO/IEC JTC 1/SC 17 Cards and security devices for
2578	              personal identification, "ISO/IEC 18013-5:2021 Personal
2579	              identification — ISO-compliant driving license — Part 5:
2580	              Mobile driving license (mDL) application", 2021,
2581	              <https://www.iso.org/standard/69084.html>.

2583	   [NIST.SP.800-57pt1r5]
2584	              Barker, E. and NIST, "Recommendation for key
2585	              management:part 1 - general", NIST Special Publications
2586	              (General) 800-57pt1r5, DOI 10.6028/NIST.SP.800-57pt1r5,
2587	              May 2020,
2588	              <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/
2589	              NIST.SP.800-57pt1r5.pdf>.

2591	   [OIDC.IDA] Lodderstedt, T., Fett, D., Haine, M., Pulido, A., Lehmann,
2592	              K., and K. Koiwai, "OpenID Connect for Identity Assurance
2593	              1.0", 24 July 2024, <https://openid.net/specs/openid-
2594	              connect-4-identity-assurance-1_0.html>.

2596	   [OpenID.Core]
2597	              Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and
2598	              C. Mortimore, "OpenID Connect Core 1.0 incorporating
2599	              errata set 2", 15 December 2023,
2600	              <https://openid.net/specs/openid-connect-core-1_0.html>.

2602	   [RFC2046]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
2603	              Extensions (MIME) Part Two: Media Types", RFC 2046,
2604	              DOI 10.17487/RFC2046, November 1996,
2605	              <https://www.rfc-editor.org/info/rfc2046>.

2607	   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,
2608	              "Randomness Requirements for Security", BCP 106, RFC 4086,
2609	              DOI 10.17487/RFC4086, June 2005,
2610	              <https://www.rfc-editor.org/info/rfc4086>.

2612	   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
2613	              Specifications: ABNF", STD 68, RFC 5234,
2614	              DOI 10.17487/RFC5234, January 2008,
2615	              <https://www.rfc-editor.org/info/rfc5234>.

2617	   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
2618	              DOI 10.17487/RFC7517, May 2015,
2619	              <https://www.rfc-editor.org/info/rfc7517>.

2621	   [RFC8785]  Rundgren, A., Jordan, B., and S. Erdtman, "JSON
2622	              Canonicalization Scheme (JCS)", RFC 8785,
2623	              DOI 10.17487/RFC8785, June 2020,
2624	              <https://www.rfc-editor.org/info/rfc8785>.

2626	   [VC_DATA_v2.0]
2627	              Sporny, M., Jr, T. T., Jones, M. B., Cohen, G., and I.
2628	              Herman, "Verifiable Credentials Data Model 2.0 Candidate
2629	              Recommendation Draft", 9 August 2024,
2630	              <https://www.w3.org/TR/vc-data-model-2.0/>.

2632	Appendix A.  Additional Examples

2634	   The following examples are not normative and are provided for
2635	   illustrative purposes only.  In particular, neither the structure of
2636	   the claims nor the selection of selectively disclosable claims is
2637	   normative.

2639	   Line breaks have been added for readability.

2641	A.1.  Simple Structured SD-JWT

2643	   In this example, in contrast to Section 5, the Issuer decided to
2644	   create a structured object for the address claim, allowing to
2645	   separately disclose individual members of the claim.

2647	   The following data about the user comprises the input JWT Claims Set
2648	   used by the Issuer:

2650	   {
2651	     "sub": "6c5c0a49-b589-431d-bae7-219122a9ec2c",
2652	     "given_name": "太郎",
2653	     "family_name": "山田",
2654	     "email": "\"unusual email address\"@example.jp",
2655	     "phone_number": "+81-80-1234-5678",
2656	     "address": {
2657	       "street_address": "東京都港区芝公園４丁目２−８",
2658	       "locality": "東京都",
2659	       "region": "港区",
2660	       "country": "JP"
2661	     },
2662	     "birthdate": "1940-01-01"
2663	   }

2665	   The Issuer also decided to add decoy digests to prevent the Verifier
2666	   from deducing the true number of claims.

2668	   The following payload is used for the SD-JWT:

2670	   {
2671	     "_sd": [
2672	       "C9inp6YoRaEXR427zYJP7Qrk1WH_8bdwOA_YUrUnGQU",
2673	       "Kuet1yAa0HIQvYnOVd59hcViO9Ug6J2kSfqYRBeowvE",
2674	       "MMldOFFzB2d0umlmpTIaGerhWdU_PpYfLvKhh_f_9aY",
2675	       "X6ZAYOII2vPN40V7xExZwVwz7yRmLNcVwt5DL8RLv4g",
2676	       "Y34zmIo0QLLOtdMpXGwjBgLvr17yEhhYT0FGofR-aIE",
2677	       "fyGp0WTwwPv2JDQln1lSiaeobZsMWA10bQ5989-9DTs",
2678	       "ommFAicVT8LGHCB0uywx7fYuo3MHYKO15cz-RZEYM5Q",
2679	       "s0BKYsLWxQQeU8tVlltM7MKsIRTrEIa1PkJmqxBBf5U"
2680	     ],
2681	     "iss": "https://issuer.example.com",
2682	     "iat": 1683000000,
2683	     "exp": 1883000000,
2684	     "address": {
2685	       "_sd": [
2686	         "6aUhzYhZ7SJ1kVmagQAO3u2ETN2CC1aHheZpKnaF0_E",
2687	         "AzLlFobkJ2xiaupREPyoJz-9-NSldB6Cgjr7fUyoHzg",
2688	         "PzzcVu0qbMuBGSjulfewzkesD9zutOExn5EWNwkrQ-k",
2689	         "b2Dkw0jcIF9rGg8_PF8ZcvncW7zwZj5ryBWvXfrpzek",
2690	         "cPYJHIZ8Vu-f9CCyVub2UfgEk8jvvXezwK1p_JneeXQ",
2691	         "glT3hrSU7fSWgwF5UDZmWwBTw32gnUldIhi8hGVCaV4",
2692	         "rvJd6iq6T5ejmsBMoGwuNXh9qAAFATAci40oidEeVsA",
2693	         "uNHoWYhXsZhVJCNE2Dqy-zqt7t69gJKy5QaFv7GrMX4"
2694	       ]
2695	     },
2696	     "_sd_alg": "sha-256"
2697	   }
2698	   The digests in the SD-JWT payload reference the following
2699	   Disclosures:

2701	   *Claim sub*:

2703	   *  SHA-256 Hash: X6ZAYOII2vPN40V7xExZwVwz7yRmLNcVwt5DL8RLv4g
2704	   *  Disclosure:
2705	      WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgInN1YiIsICI2YzVjMGE0OS1i
2706	      NTg5LTQzMWQtYmFlNy0yMTkxMjJhOWVjMmMiXQ
2707	   *  Contents: ["2GLC42sKQveCfGfryNRN9w", "sub",
2708	      "6c5c0a49-b589-431d-bae7-219122a9ec2c"]

2710	   *Claim given_name*:

2712	   *  SHA-256 Hash: ommFAicVT8LGHCB0uywx7fYuo3MHYKO15cz-RZEYM5Q
2713	   *  Disclosure:
2714	      WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImdpdmVuX25hbWUiLCAiXHU1
2715	      OTJhXHU5MGNlIl0
2716	   *  Contents: ["eluV5Og3gSNII8EYnsxA_A", "given_name", "\u592a\u90ce"]

2718	   *Claim family_name*:

2720	   *  SHA-256 Hash: C9inp6YoRaEXR427zYJP7Qrk1WH_8bdwOA_YUrUnGQU
2721	   *  Disclosure:
2722	      WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImZhbWlseV9uYW1lIiwgIlx1
2723	      NWM3MVx1NzUzMCJd
2724	   *  Contents: ["6Ij7tM-a5iVPGboS5tmvVA", "family_name",
2725	      "\u5c71\u7530"]

2727	   *Claim email*:

2729	   *  SHA-256 Hash: Kuet1yAa0HIQvYnOVd59hcViO9Ug6J2kSfqYRBeowvE
2730	   *  Disclosure:
2731	      WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgImVtYWlsIiwgIlwidW51c3Vh
2732	      bCBlbWFpbCBhZGRyZXNzXCJAZXhhbXBsZS5qcCJd
2733	   *  Contents: ["eI8ZWm9QnKPpNPeNenHdhQ", "email", "\"unusual email
2734	      address\"@example.jp"]

2736	   *Claim phone_number*:

2738	   *  SHA-256 Hash: s0BKYsLWxQQeU8tVlltM7MKsIRTrEIa1PkJmqxBBf5U
2739	   *  Disclosure:
2740	      WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgInBob25lX251bWJlciIsICIr
2741	      ODEtODAtMTIzNC01Njc4Il0
2742	   *  Contents: ["Qg_O64zqAxe412a108iroA", "phone_number",
2743	      "+81-80-1234-5678"]

2745	   *Claim street_address*:

2747	   *  SHA-256 Hash: 6aUhzYhZ7SJ1kVmagQAO3u2ETN2CC1aHheZpKnaF0_E
2748	   *  Disclosure:
2749	      WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgInN0cmVldF9hZGRyZXNzIiwg
2750	      Ilx1Njc3MVx1NGVhY1x1OTBmZFx1NmUyZlx1NTMzYVx1ODI5ZFx1NTE2Y1x1
2751	      NTcxMlx1ZmYxNFx1NGUwMVx1NzZlZVx1ZmYxMlx1MjIxMlx1ZmYxOCJd
2752	   *  Contents: ["AJx-095VPrpTtN4QMOqROA", "street_address",
2753	      "\u6771\u4eac\u
2754	      90fd\u6e2f\u533a\u829d\u516c\u5712\uff14\u4e01\u76ee\uff12\u
2755	      2212\uff18"]

2757	   *Claim locality*:

2759	   *  SHA-256 Hash: rvJd6iq6T5ejmsBMoGwuNXh9qAAFATAci40oidEeVsA
2760	   *  Disclosure:
2761	      WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgImxvY2FsaXR5IiwgIlx1Njc3
2762	      MVx1NGVhY1x1OTBmZCJd
2763	   *  Contents: ["Pc33JM2LchcU_lHggv_ufQ", "locality",
2764	      "\u6771\u4eac\u90fd"]

2766	   *Claim region*:

2768	   *  SHA-256 Hash: PzzcVu0qbMuBGSjulfewzkesD9zutOExn5EWNwkrQ-k
2769	   *  Disclosure:
2770	      WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgInJlZ2lvbiIsICJcdTZlMmZc
2771	      dTUzM2EiXQ
2772	   *  Contents: ["G02NSrQfjFXQ7Io09syajA", "region", "\u6e2f\u533a"]

2774	   *Claim country*:

2776	   *  SHA-256 Hash: uNHoWYhXsZhVJCNE2Dqy-zqt7t69gJKy5QaFv7GrMX4
2777	   *  Disclosure:
2778	      WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImNvdW50cnkiLCAiSlAiXQ
2779	   *  Contents: ["lklxF5jMYlGTPUovMNIvCA", "country", "JP"]

2781	   *Claim birthdate*:

2783	   *  SHA-256 Hash: MMldOFFzB2d0umlmpTIaGerhWdU_PpYfLvKhh_f_9aY
2784	   *  Disclosure:
2785	      WyJ5eXRWYmRBUEdjZ2wyckk0QzlHU29nIiwgImJpcnRoZGF0ZSIsICIxOTQw
2786	      LTAxLTAxIl0
2787	   *  Contents: ["yytVbdAPGcgl2rI4C9GSog", "birthdate", "1940-01-01"]

2789	   The following decoy digests are added:

2791	   *  AzLlFobkJ2xiaupREPyoJz-9-NSldB6Cgjr7fUyoHzg
2792	   *  cPYJHIZ8Vu-f9CCyVub2UfgEk8jvvXezwK1p_JneeXQ
2793	   *  glT3hrSU7fSWgwF5UDZmWwBTw32gnUldIhi8hGVCaV4
2794	   *  b2Dkw0jcIF9rGg8_PF8ZcvncW7zwZj5ryBWvXfrpzek
2795	   *  fyGp0WTwwPv2JDQln1lSiaeobZsMWA10bQ5989-9DTs
2796	   *  Y34zmIo0QLLOtdMpXGwjBgLvr17yEhhYT0FGofR-aIE

2798	   The following is a presentation of the SD-JWT that discloses only
2799	   region and country of the address property:

2801	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOiBb
2802	   IkM5aW5wNllvUmFFWFI0Mjd6WUpQN1FyazFXSF84YmR3T0FfWVVyVW5HUVUiLCAiS3Vl
2803	   dDF5QWEwSElRdlluT1ZkNTloY1ZpTzlVZzZKMmtTZnFZUkJlb3d2RSIsICJNTWxkT0ZG
2804	   ekIyZDB1bWxtcFRJYUdlcmhXZFVfUHBZZkx2S2hoX2ZfOWFZIiwgIlg2WkFZT0lJMnZQ
2805	   TjQwVjd4RXhad1Z3ejd5Um1MTmNWd3Q1REw4Ukx2NGciLCAiWTM0em1JbzBRTExPdGRN
2806	   cFhHd2pCZ0x2cjE3eUVoaFlUMEZHb2ZSLWFJRSIsICJmeUdwMFdUd3dQdjJKRFFsbjFs
2807	   U2lhZW9iWnNNV0ExMGJRNTk4OS05RFRzIiwgIm9tbUZBaWNWVDhMR0hDQjB1eXd4N2ZZ
2808	   dW8zTUhZS08xNWN6LVJaRVlNNVEiLCAiczBCS1lzTFd4UVFlVTh0VmxsdE03TUtzSVJU
2809	   ckVJYTFQa0ptcXhCQmY1VSJdLCAiaXNzIjogImh0dHBzOi8vaXNzdWVyLmV4YW1wbGUu
2810	   Y29tIiwgImlhdCI6IDE2ODMwMDAwMDAsICJleHAiOiAxODgzMDAwMDAwLCAiYWRkcmVz
2811	   cyI6IHsiX3NkIjogWyI2YVVoelloWjdTSjFrVm1hZ1FBTzN1MkVUTjJDQzFhSGhlWnBL
2812	   bmFGMF9FIiwgIkF6TGxGb2JrSjJ4aWF1cFJFUHlvSnotOS1OU2xkQjZDZ2pyN2ZVeW9I
2813	   emciLCAiUHp6Y1Z1MHFiTXVCR1NqdWxmZXd6a2VzRDl6dXRPRXhuNUVXTndrclEtayIs
2814	   ICJiMkRrdzBqY0lGOXJHZzhfUEY4WmN2bmNXN3p3Wmo1cnlCV3ZYZnJwemVrIiwgImNQ
2815	   WUpISVo4VnUtZjlDQ3lWdWIyVWZnRWs4anZ2WGV6d0sxcF9KbmVlWFEiLCAiZ2xUM2hy
2816	   U1U3ZlNXZ3dGNVVEWm1Xd0JUdzMyZ25VbGRJaGk4aEdWQ2FWNCIsICJydkpkNmlxNlQ1
2817	   ZWptc0JNb0d3dU5YaDlxQUFGQVRBY2k0MG9pZEVlVnNBIiwgInVOSG9XWWhYc1poVkpD
2818	   TkUyRHF5LXpxdDd0NjlnSkt5NVFhRnY3R3JNWDQiXX0sICJfc2RfYWxnIjogInNoYS0y
2819	   NTYifQ.-XS_E0tJ-LEvQh4Gr9fRIKTSa9vKZ3T-uqVC-Mm1zYFqHg-qXgKbgtsrBcqlc
2820	   sAp6MTGNniiOcstnir6RQ7yyg~WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgInJlZ2
2821	   lvbiIsICJcdTZlMmZcdTUzM2EiXQ~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImN
2822	   vdW50cnkiLCAiSlAiXQ~

2824	   After validation, the Verifier will have the following processed SD-
2825	   JWT payload available for further handling:

2827	   {
2828	     "iss": "https://issuer.example.com",
2829	     "iat": 1683000000,
2830	     "exp": 1883000000,
2831	     "address": {
2832	       "region": "港区",
2833	       "country": "JP"
2834	     }
2835	   }

2837	A.2.  Complex Structured SD-JWT

2839	   In this example, an SD-JWT with a complex object is represented.  The
2840	   data structures defined in OpenID Connect for Identity Assurance
2841	   [OIDC.IDA] are used.

2843	   The Issuer is using the following user data as the input JWT Claims
2844	   Set:

2846	   {
2847	     "verified_claims": {
2848	       "verification": {
2849	         "trust_framework": "de_aml",
2850	         "time": "2012-04-23T18:25Z",
2851	         "verification_process": "f24c6f-6d3f-4ec5-973e-b0d8506f3bc7",
2852	         "evidence": [
2853	           {
2854	             "type": "document",
2855	             "method": "pipp",
2856	             "time": "2012-04-22T11:30Z",
2857	             "document": {
2858	               "type": "idcard",
2859	               "issuer": {
2860	                 "name": "Stadt Augsburg",
2861	                 "country": "DE"
2862	               },
2863	               "number": "53554554",
2864	               "date_of_issuance": "2010-03-23",
2865	               "date_of_expiry": "2020-03-22"
2866	             }
2867	           }
2868	         ]
2869	       },
2870	       "claims": {
2871	         "given_name": "Max",
2872	         "family_name": "Müller",
2873	         "nationalities": [
2874	           "DE"
2875	         ],
2876	         "birthdate": "1956-01-28",
2877	         "place_of_birth": {
2878	           "country": "IS",
2879	           "locality": "Þykkvabæjarklaustur"
2880	         },
2881	         "address": {
2882	           "locality": "Maxstadt",
2883	           "postal_code": "12344",
2884	           "country": "DE",
2885	           "street_address": "Weidenstraße 22"
2886	         }
2887	       }
2888	     },
2889	     "birth_middle_name": "Timotheus",
2890	     "salutation": "Dr.",
2891	     "msisdn": "49123456789"
2892	   }
2893	   The following payload is used for the SD-JWT:

2895	   {
2896	     "_sd": [
2897	       "-aSznId9mWM8ocuQolCllsxVggq1-vHW4OtnhUtVmWw",
2898	       "IKbrYNn3vA7WEFrysvbdBJjDDU_EvQIr0W18vTRpUSg",
2899	       "otkxuT14nBiwzNJ3MPaOitOl9pVnXOaEHal_xkyNfKI"
2900	     ],
2901	     "iss": "https://issuer.example.com",
2902	     "iat": 1683000000,
2903	     "exp": 1883000000,
2904	     "verified_claims": {
2905	       "verification": {
2906	         "_sd": [
2907	           "7h4UE9qScvDKodXVCuoKfKBJpVBfXMF_TmAGVaZe3Sc",
2908	           "vTwe3raHIFYgFA3xaUD2aMxFz5oDo8iBu05qKlOg9Lw"
2909	         ],
2910	         "trust_framework": "de_aml",
2911	         "evidence": [
2912	           {
2913	             "...": "tYJ0TDucyZZCRMbROG4qRO5vkPSFRxFhUELc18CSl3k"
2914	           }
2915	         ]
2916	       },
2917	       "claims": {
2918	         "_sd": [
2919	           "RiOiCn6_w5ZHaadkQMrcQJf0Jte5RwurRs54231DTlo",
2920	           "S_498bbpKzB6Eanftss0xc7cOaoneRr3pKr7NdRmsMo",
2921	           "WNA-UNK7F_zhsAb9syWO6IIQ1uHlTmOU8r8CvJ0cIMk",
2922	           "Wxh_sV3iRH9bgrTBJi-aYHNCLt-vjhX1sd-igOf_9lk",
2923	           "_O-wJiH3enSB4ROHntToQT8JmLtz-mhO2f1c89XoerQ",
2924	           "hvDXhwmGcJQsBCA2OtjuLAcwAMpDsaU0nkovcKOqWNE"
2925	         ]
2926	       }
2927	     },
2928	     "_sd_alg": "sha-256"
2929	   }

2931	   The digests in the SD-JWT payload reference the following
2932	   Disclosures:

2934	   *Claim time*:

2936	   *  SHA-256 Hash: vTwe3raHIFYgFA3xaUD2aMxFz5oDo8iBu05qKlOg9Lw
2937	   *  Disclosure:
2938	      WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgInRpbWUiLCAiMjAxMi0wNC0y
2939	      M1QxODoyNVoiXQ
2940	   *  Contents: ["2GLC42sKQveCfGfryNRN9w", "time", "2012-04-23T18:25Z"]
2941	   *Claim verification_process*:

2943	   *  SHA-256 Hash: 7h4UE9qScvDKodXVCuoKfKBJpVBfXMF_TmAGVaZe3Sc
2944	   *  Disclosure:
2945	      WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgInZlcmlmaWNhdGlvbl9wcm9j
2946	      ZXNzIiwgImYyNGM2Zi02ZDNmLTRlYzUtOTczZS1iMGQ4NTA2ZjNiYzciXQ
2947	   *  Contents: ["eluV5Og3gSNII8EYnsxA_A", "verification_process",
2948	      "f24c6f-6d3f-4ec5-973e-b0d8506f3bc7"]

2950	   *Claim type*:

2952	   *  SHA-256 Hash: G5EnhOAOoU9X_6QMNvzFXjpEA_Rc-AEtm1bG_wcaKIk
2953	   *  Disclosure:
2954	      WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgInR5cGUiLCAiZG9jdW1lbnQi
2955	      XQ
2956	   *  Contents: ["6Ij7tM-a5iVPGboS5tmvVA", "type", "document"]

2958	   *Claim method*:

2960	   *  SHA-256 Hash: WpxQ4HSoEtcTmCCKOeDslB_emucYLz2oO8oHNr1bEVQ
2961	   *  Disclosure:
2962	      WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgIm1ldGhvZCIsICJwaXBwIl0
2963	   *  Contents: ["eI8ZWm9QnKPpNPeNenHdhQ", "method", "pipp"]

2965	   *Claim time*:

2967	   *  SHA-256 Hash: 9wpjVPWuD7PK0nsQDL8B06lmdgV3LVybhHydQpTNyLI
2968	   *  Disclosure:
2969	      WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgInRpbWUiLCAiMjAxMi0wNC0y
2970	      MlQxMTozMFoiXQ
2971	   *  Contents: ["Qg_O64zqAxe412a108iroA", "time", "2012-04-22T11:30Z"]

2973	   *Claim document*:

2975	   *  SHA-256 Hash: IhwFrWUB63RcZq9yvgZ0XPc7Gowh3O2kqXeBIswg1B4
2976	   *  Disclosure:
2977	      WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImRvY3VtZW50IiwgeyJ0eXBl
2978	      IjogImlkY2FyZCIsICJpc3N1ZXIiOiB7Im5hbWUiOiAiU3RhZHQgQXVnc2J1
2979	      cmciLCAiY291bnRyeSI6ICJERSJ9LCAibnVtYmVyIjogIjUzNTU0NTU0Iiwg
2980	      ImRhdGVfb2ZfaXNzdWFuY2UiOiAiMjAxMC0wMy0yMyIsICJkYXRlX29mX2V4
2981	      cGlyeSI6ICIyMDIwLTAzLTIyIn1d
2982	   *  Contents: ["AJx-095VPrpTtN4QMOqROA", "document", {"type":
2983	      "idcard",
2984	      "issuer": {"name": "Stadt Augsburg", "country": "DE"},
2985	      "number": "53554554", "date_of_issuance": "2010-03-23",
2986	      "date_of_expiry": "2020-03-22"}]

2988	   *Array Entry*:

2990	   *  SHA-256 Hash: tYJ0TDucyZZCRMbROG4qRO5vkPSFRxFhUELc18CSl3k
2991	   *  Disclosure:
2992	      WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgeyJfc2QiOiBbIjl3cGpWUFd1
2993	      RDdQSzBuc1FETDhCMDZsbWRnVjNMVnliaEh5ZFFwVE55TEkiLCAiRzVFbmhP
2994	      QU9vVTlYXzZRTU52ekZYanBFQV9SYy1BRXRtMWJHX3djYUtJayIsICJJaHdG
2995	      cldVQjYzUmNacTl5dmdaMFhQYzdHb3doM08ya3FYZUJJc3dnMUI0IiwgIldw
2996	      eFE0SFNvRXRjVG1DQ0tPZURzbEJfZW11Y1lMejJvTzhvSE5yMWJFVlEiXX1d
2997	   *  Contents: ["Pc33JM2LchcU_lHggv_ufQ", {"_sd":
2998	      ["9wpjVPWuD7PK0nsQDL8B06lmdgV3LVybhHydQpTNyLI",
2999	      "G5EnhOAOoU9X_6QMNvzFXjpEA_Rc-AEtm1bG_wcaKIk",
3000	      "IhwFrWUB63RcZq9yvgZ0XPc7Gowh3O2kqXeBIswg1B4",
3001	      "WpxQ4HSoEtcTmCCKOeDslB_emucYLz2oO8oHNr1bEVQ"]}]

3003	   *Claim given_name*:

3005	   *  SHA-256 Hash: S_498bbpKzB6Eanftss0xc7cOaoneRr3pKr7NdRmsMo
3006	   *  Disclosure:
3007	      WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgImdpdmVuX25hbWUiLCAiTWF4
3008	      Il0
3009	   *  Contents: ["G02NSrQfjFXQ7Io09syajA", "given_name", "Max"]

3011	   *Claim family_name*:

3013	   *  SHA-256 Hash: Wxh_sV3iRH9bgrTBJi-aYHNCLt-vjhX1sd-igOf_9lk
3014	   *  Disclosure:
3015	      WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImZhbWlseV9uYW1lIiwgIk1c
3016	      dTAwZmNsbGVyIl0
3017	   *  Contents: ["lklxF5jMYlGTPUovMNIvCA", "family_name", "M\u00fcller"]

3019	   *Claim nationalities*:

3021	   *  SHA-256 Hash: hvDXhwmGcJQsBCA2OtjuLAcwAMpDsaU0nkovcKOqWNE
3022	   *  Disclosure:
3023	      WyJuUHVvUW5rUkZxM0JJZUFtN0FuWEZBIiwgIm5hdGlvbmFsaXRpZXMiLCBb
3024	      IkRFIl1d
3025	   *  Contents: ["nPuoQnkRFq3BIeAm7AnXFA", "nationalities", ["DE"]]

3027	   *Claim birthdate*:

3029	   *  SHA-256 Hash: WNA-UNK7F_zhsAb9syWO6IIQ1uHlTmOU8r8CvJ0cIMk
3030	   *  Disclosure:
3031	      WyI1YlBzMUlxdVpOYTBoa2FGenp6Wk53IiwgImJpcnRoZGF0ZSIsICIxOTU2
3032	      LTAxLTI4Il0
3033	   *  Contents: ["5bPs1IquZNa0hkaFzzzZNw", "birthdate", "1956-01-28"]

3035	   *Claim place_of_birth*:

3037	   *  SHA-256 Hash: RiOiCn6_w5ZHaadkQMrcQJf0Jte5RwurRs54231DTlo
3038	   *  Disclosure:
3039	      WyI1YTJXMF9OcmxFWnpmcW1rXzdQcS13IiwgInBsYWNlX29mX2JpcnRoIiwg
3040	      eyJjb3VudHJ5IjogIklTIiwgImxvY2FsaXR5IjogIlx1MDBkZXlra3ZhYlx1
3041	      MDBlNmphcmtsYXVzdHVyIn1d
3042	   *  Contents: ["5a2W0_NrlEZzfqmk_7Pq-w", "place_of_birth", {"country":
3043	      "IS", "locality": "\u00deykkvab\u00e6jarklaustur"}]

3045	   *Claim address*:

3047	   *  SHA-256 Hash: _O-wJiH3enSB4ROHntToQT8JmLtz-mhO2f1c89XoerQ
3048	   *  Disclosure:
3049	      WyJ5MXNWVTV3ZGZKYWhWZGd3UGdTN1JRIiwgImFkZHJlc3MiLCB7ImxvY2Fs
3050	      aXR5IjogIk1heHN0YWR0IiwgInBvc3RhbF9jb2RlIjogIjEyMzQ0IiwgImNv
3051	      dW50cnkiOiAiREUiLCAic3RyZWV0X2FkZHJlc3MiOiAiV2VpZGVuc3RyYVx1
3052	      MDBkZmUgMjIifV0
3053	   *  Contents: ["y1sVU5wdfJahVdgwPgS7RQ", "address", {"locality":
3054	      "Maxstadt", "postal_code": "12344", "country": "DE",
3055	      "street_address": "Weidenstra\u00dfe 22"}]

3057	   *Claim birth_middle_name*:

3059	   *  SHA-256 Hash: otkxuT14nBiwzNJ3MPaOitOl9pVnXOaEHal_xkyNfKI
3060	   *  Disclosure:
3061	      WyJIYlE0WDhzclZXM1FEeG5JSmRxeU9BIiwgImJpcnRoX21pZGRsZV9uYW1l
3062	      IiwgIlRpbW90aGV1cyJd
3063	   *  Contents: ["HbQ4X8srVW3QDxnIJdqyOA", "birth_middle_name",
3064	      "Timotheus"]

3066	   *Claim salutation*:

3068	   *  SHA-256 Hash: -aSznId9mWM8ocuQolCllsxVggq1-vHW4OtnhUtVmWw
3069	   *  Disclosure:
3070	      WyJDOUdTb3VqdmlKcXVFZ1lmb2pDYjFBIiwgInNhbHV0YXRpb24iLCAiRHIu
3071	      Il0
3072	   *  Contents: ["C9GSoujviJquEgYfojCb1A", "salutation", "Dr."]

3074	   *Claim msisdn*:

3076	   *  SHA-256 Hash: IKbrYNn3vA7WEFrysvbdBJjDDU_EvQIr0W18vTRpUSg
3077	   *  Disclosure:
3078	      WyJreDVrRjE3Vi14MEptd1V4OXZndnR3IiwgIm1zaXNkbiIsICI0OTEyMzQ1
3079	      Njc4OSJd
3080	   *  Contents: ["kx5kF17V-x0JmwUx9vgvtw", "msisdn", "49123456789"]

3082	   The following is a presentation of the SD-JWT:

3084	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJfc2QiOiBb
3085	   Ii1hU3puSWQ5bVdNOG9jdVFvbENsbHN4VmdncTEtdkhXNE90bmhVdFZtV3ciLCAiSUti
3086	   cllObjN2QTdXRUZyeXN2YmRCSmpERFVfRXZRSXIwVzE4dlRScFVTZyIsICJvdGt4dVQx
3087	   NG5CaXd6TkozTVBhT2l0T2w5cFZuWE9hRUhhbF94a3lOZktJIl0sICJpc3MiOiAiaHR0
3088	   cHM6Ly9pc3N1ZXIuZXhhbXBsZS5jb20iLCAiaWF0IjogMTY4MzAwMDAwMCwgImV4cCI6
3089	   IDE4ODMwMDAwMDAsICJ2ZXJpZmllZF9jbGFpbXMiOiB7InZlcmlmaWNhdGlvbiI6IHsi
3090	   X3NkIjogWyI3aDRVRTlxU2N2REtvZFhWQ3VvS2ZLQkpwVkJmWE1GX1RtQUdWYVplM1Nj
3091	   IiwgInZUd2UzcmFISUZZZ0ZBM3hhVUQyYU14Rno1b0RvOGlCdTA1cUtsT2c5THciXSwg
3092	   InRydXN0X2ZyYW1ld29yayI6ICJkZV9hbWwiLCAiZXZpZGVuY2UiOiBbeyIuLi4iOiAi
3093	   dFlKMFREdWN5WlpDUk1iUk9HNHFSTzV2a1BTRlJ4RmhVRUxjMThDU2wzayJ9XX0sICJj
3094	   bGFpbXMiOiB7Il9zZCI6IFsiUmlPaUNuNl93NVpIYWFka1FNcmNRSmYwSnRlNVJ3dXJS
3095	   czU0MjMxRFRsbyIsICJTXzQ5OGJicEt6QjZFYW5mdHNzMHhjN2NPYW9uZVJyM3BLcjdO
3096	   ZFJtc01vIiwgIldOQS1VTks3Rl96aHNBYjlzeVdPNklJUTF1SGxUbU9VOHI4Q3ZKMGNJ
3097	   TWsiLCAiV3hoX3NWM2lSSDliZ3JUQkppLWFZSE5DTHQtdmpoWDFzZC1pZ09mXzlsayIs
3098	   ICJfTy13SmlIM2VuU0I0Uk9IbnRUb1FUOEptTHR6LW1oTzJmMWM4OVhvZXJRIiwgImh2
3099	   RFhod21HY0pRc0JDQTJPdGp1TEFjd0FNcERzYVUwbmtvdmNLT3FXTkUiXX19LCAiX3Nk
3100	   X2FsZyI6ICJzaGEtMjU2In0.e3BPK9zoys2oFkCu-whXJBXEEgOiNBLywrkW0jdgwodu
3101	   Cn3Ep5bUbfnm2ihka0JBsKtrB7YYPQDpneb9Hl7bpw~WyIyR0xDNDJzS1F2ZUNmR2Zye
3102	   U5STjl3IiwgInRpbWUiLCAiMjAxMi0wNC0yM1QxODoyNVoiXQ~WyJQYzMzSk0yTGNoY1
3103	   VfbEhnZ3ZfdWZRIiwgeyJfc2QiOiBbIjl3cGpWUFd1RDdQSzBuc1FETDhCMDZsbWRnVj
3104	   NMVnliaEh5ZFFwVE55TEkiLCAiRzVFbmhPQU9vVTlYXzZRTU52ekZYanBFQV9SYy1BRX
3105	   RtMWJHX3djYUtJayIsICJJaHdGcldVQjYzUmNacTl5dmdaMFhQYzdHb3doM08ya3FYZU
3106	   JJc3dnMUI0IiwgIldweFE0SFNvRXRjVG1DQ0tPZURzbEJfZW11Y1lMejJvTzhvSE5yMW
3107	   JFVlEiXX1d~WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgIm1ldGhvZCIsICJwaXBwI
3108	   l0~WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgImdpdmVuX25hbWUiLCAiTWF4Il0~W
3109	   yJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImZhbWlseV9uYW1lIiwgIk1cdTAwZmNsb
3110	   GVyIl0~WyJ5MXNWVTV3ZGZKYWhWZGd3UGdTN1JRIiwgImFkZHJlc3MiLCB7ImxvY2Fsa
3111	   XR5IjogIk1heHN0YWR0IiwgInBvc3RhbF9jb2RlIjogIjEyMzQ0IiwgImNvdW50cnkiO
3112	   iAiREUiLCAic3RyZWV0X2FkZHJlc3MiOiAiV2VpZGVuc3RyYVx1MDBkZmUgMjIifV0~

3114	   The Verifier will have this processed SD-JWT payload available after
3115	   validation:

3117	   {
3118	     "iss": "https://issuer.example.com",
3119	     "iat": 1683000000,
3120	     "exp": 1883000000,
3121	     "verified_claims": {
3122	       "verification": {
3123	         "trust_framework": "de_aml",
3124	         "evidence": [
3125	           {
3126	             "method": "pipp"
3127	           }
3128	         ],
3129	         "time": "2012-04-23T18:25Z"
3130	       },
3131	       "claims": {
3132	         "given_name": "Max",
3133	         "family_name": "Müller",
3134	         "address": {
3135	           "locality": "Maxstadt",
3136	           "postal_code": "12344",
3137	           "country": "DE",
3138	           "street_address": "Weidenstraße 22"
3139	         }
3140	       }
3141	     }
3142	   }

3144	A.3.  SD-JWT-based Verifiable Credentials (SD-JWT VC)

3146	   This example shows how the artifacts defined in this specification
3147	   could be used in the context of SD-JWT-based Verifiable Credentials
3148	   (SD-JWT VC) [I-D.ietf-oauth-sd-jwt-vc] to represent the concept of a
3149	   Person Identification Data (PID) as defined in the "PID Rulebook" in
3150	   [EUDIW.ARF].  This example uses fictional data of a German citizen.

3152	   Key Binding is applied using the Holder's public key passed in a cnf
3153	   claim in the SD-JWT.

3155	   The following citizen data is the input JWT Claims Set:

3157	   {
3158	     "vct": "urn:eudi:pid:de:1",
3159	     "iss": "https://pid-issuer.bund.de.example",
3160	     "given_name": "Erika",
3161	     "family_name": "Mustermann",
3162	     "birthdate": "1963-08-12",
3163	     "address": {
3164	       "street_address": "Heidestraße 17",
3165	       "locality": "Köln",
3166	       "postal_code": "51147",
3167	       "country": "DE"
3168	     },
3169	     "nationalities": [
3170	       "DE"
3171	     ],
3172	     "sex": 2,
3173	     "birth_family_name": "Gabler",
3174	     "place_of_birth": {
3175	       "locality": "Berlin",
3176	       "country": "DE"
3177	     },
3178	     "age_equal_or_over": {
3179	       "12": true,
3180	       "14": true,
3181	       "16": true,
3182	       "18": true,
3183	       "21": true,
3184	       "65": false
3185	     },
3186	     "age_in_years": 62,
3187	     "age_birth_year": 1963,
3188	     "issuance_date": "2020-03-11",
3189	     "expiry_date": "2030-03-12",
3190	     "issuing_authority": "DE",
3191	     "issuing_country": "DE"
3192	   }

3194	   The following is the issued SD-JWT:

3196	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImRjK3NkLWp3dCJ9.eyJfc2QiOiBbIjBIWm1
3197	   uU0lQejMzN2tTV2U3QzM0bC0tODhnekppLWVCSjJWel9ISndBVGciLCAiMUNybjAzV21
3198	   VZVJXcDR6d1B2dkNLWGw5WmFRcC1jZFFWX2dIZGFHU1dvdyIsICIycjAwOWR6dkh1VnJ
3199	   XclJYVDVrSk1tSG5xRUhIbldlME1MVlp3OFBBVEI4IiwgIjZaTklTRHN0NjJ5bWxyT0F
3200	   rYWRqZEQ1WnVsVDVBMjk5Sjc4U0xoTV9fT3MiLCAiNzhqZzc3LUdZQmVYOElRZm9FTFB
3201	   5TDBEWVBkbWZabzBKZ1ZpVjBfbEtDTSIsICI5MENUOEFhQlBibjVYOG5SWGtlc2p1MWk
3202	   wQnFoV3FaM3dxRDRqRi1xREdrIiwgIkkwMGZjRlVvRFhDdWNwNXl5MnVqcVBzc0RWR2F
3203	   XTmlVbGlOel9hd0QwZ2MiLCAiS2pBWGdBQTlONVdIRUR0UkloNHU1TW4xWnNXaXhoaFd
3204	   BaVgtQTRRaXdnQSIsICJMYWk2SVU2ZDdHUWFnWFI3QXZHVHJuWGdTbGQzejhFSWdfZnY
3205	   zZk9aMVdnIiwgIkxlemphYlJxaVpPWHpFWW1WWmY4Uk1pOXhBa2QzX00xTFo4VTdFNHM
3206	   zdTQiLCAiUlR6M3FUbUZOSGJwV3JyT01aUzQxRjQ3NGtGcVJ2M3ZJUHF0aDZQVWhsTSI
3207	   sICJXMTRYSGJVZmZ6dVc0SUZNanBTVGIxbWVsV3hVV2Y0Tl9vMmxka2tJcWM4IiwgIld
3208	   UcEk3UmNNM2d4WnJ1UnBYemV6U2JrYk9yOTNQVkZ2V3g4d29KM2oxY0UiLCAiX29oSlZ
3209	   JUUlCc1U0dXBkTlM0X3c0S2IxTUhxSjBMOXFMR3NoV3E2SlhRcyIsICJ5NTBjemMwSVN
3210	   DaHlfYnNiYTFkTW9VdUFPUTVBTW1PU2ZHb0VlODF2MUZVIl0sICJpc3MiOiAiaHR0cHM
3211	   6Ly9waWQtaXNzdWVyLmJ1bmQuZGUuZXhhbXBsZSIsICJpYXQiOiAxNjgzMDAwMDAwLCA
3212	   iZXhwIjogMTg4MzAwMDAwMCwgInZjdCI6ICJ1cm46ZXVkaTpwaWQ6ZGU6MSIsICJfc2R
3213	   fYWxnIjogInNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJjcnY
3214	   iOiAiUC0yNTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbER
3215	   sczd2Q2VHZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U
3216	   2dDRqVDlGMkhaUSJ9fX0.kewtSMp25Qz_GYmVOdObWzuQFTCyrooFV4NNqKVn-vV1n_U
3217	   FrSuklT91-e1_qShDXD6AlFq0WuPswYzzerRXKA~WyIyR0xDNDJzS1F2ZUNmR2ZyeU5S
3218	   Tjl3IiwgImdpdmVuX25hbWUiLCAiRXJpa2EiXQ~WyJlbHVWNU9nM2dTTklJOEVZbnN4Q
3219	   V9BIiwgImZhbWlseV9uYW1lIiwgIk11c3Rlcm1hbm4iXQ~WyI2SWo3dE0tYTVpVlBHYm
3220	   9TNXRtdlZBIiwgImJpcnRoZGF0ZSIsICIxOTYzLTA4LTEyIl0~WyJlSThaV205UW5LUH
3221	   BOUGVOZW5IZGhRIiwgInN0cmVldF9hZGRyZXNzIiwgIkhlaWRlc3RyYVx1MDBkZmUgMT
3222	   ciXQ~WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImxvY2FsaXR5IiwgIktcdTAwZjZ
3223	   sbiJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgInBvc3RhbF9jb2RlIiwgIjUxMT
3224	   Q3Il0~WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgImNvdW50cnkiLCAiREUiXQ~WyJ
3225	   HMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgImFkZHJlc3MiLCB7Il9zZCI6IFsiQUxaRVJ
3226	   zU241V05pRVhkQ2tzVzhJNXFRdzNfTnBBblJxcFNBWkR1ZGd3OCIsICJEX19XX3VZY3Z
3227	   SejN0dlVuSUp2QkRIaVRjN0NfX3FIZDB4Tkt3SXNfdzlrIiwgImVCcENYVTFKNWRoSDJ
3228	   nNHQ4UVlOVzVFeFM5QXhVVmJsVW9kb0xZb1BobzAiLCAieE9QeTktZ0pBTEs2VWJXS0Z
3229	   MUjg1Y09CeVVEM0FiTndGZzNJM1lmUUVfSSJdfV0~WyJsa2x4RjVqTVlsR1RQVW92TU5
3230	   JdkNBIiwgIm5hdGlvbmFsaXRpZXMiLCBbIkRFIl1d~WyJuUHVvUW5rUkZxM0JJZUFtN0
3231	   FuWEZBIiwgInNleCIsIDJd~WyI1YlBzMUlxdVpOYTBoa2FGenp6Wk53IiwgImJpcnRoX
3232	   2ZhbWlseV9uYW1lIiwgIkdhYmxlciJd~WyI1YTJXMF9OcmxFWnpmcW1rXzdQcS13Iiwg
3233	   ImxvY2FsaXR5IiwgIkJlcmxpbiJd~WyJ5MXNWVTV3ZGZKYWhWZGd3UGdTN1JRIiwgImN
3234	   vdW50cnkiLCAiREUiXQ~WyJIYlE0WDhzclZXM1FEeG5JSmRxeU9BIiwgInBsYWNlX29m
3235	   X2JpcnRoIiwgeyJfc2QiOiBbIktVVmlhYUxuWTVqU01MOTBHMjlPT0xFTlBiYlhmaFNq
3236	   U1BNalphR2t4QUUiLCAiWWJzVDBTNzZWcVhDVnNkMWpVU2x3S1BEZ21BTGVCMXVaY2xG
3237	   SFhmLVVTUSJdfV0~WyJDOUdTb3VqdmlKcXVFZ1lmb2pDYjFBIiwgIjEyIiwgdHJ1ZV0~
3238	   WyJreDVrRjE3Vi14MEptd1V4OXZndnR3IiwgIjE0IiwgdHJ1ZV0~WyJIM28xdXN3UDc2
3239	   MEZpMnllR2RWQ0VRIiwgIjE2IiwgdHJ1ZV0~WyJPQktsVFZsdkxnLUFkd3FZR2JQOFpB
3240	   IiwgIjE4IiwgdHJ1ZV0~WyJNMEpiNTd0NDF1YnJrU3V5ckRUM3hBIiwgIjIxIiwgdHJ1
3241	   ZV0~WyJEc210S05ncFY0ZEFIcGpyY2Fvc0F3IiwgIjY1IiwgZmFsc2Vd~WyJlSzVvNXB
3242	   IZmd1cFBwbHRqMXFoQUp3IiwgImFnZV9lcXVhbF9vcl9vdmVyIiwgeyJfc2QiOiBbIjF
3243	   0RWl5elBSWU9Lc2Y3U3NZR01nUFpLc09UMWxRWlJ4SFhBMHI1X0J3a2siLCAiQ1ZLbmx
3244	   5NVA5MHlKczNFd3R4UWlPdFVjemFYQ1lOQTRJY3pSYW9ock1EZyIsICJhNDQtZzJHcjh
3245	   fM0FtSncyWFo4a0kxeTBRel96ZTlpT2NXMlczUkxwWEdnIiwgImdrdnkwRnV2QkJ2ajB
3246	   oczJaTnd4Y3FPbGY4bXUyLWtDRTctTmIyUXh1QlUiLCAiaHJZNEhubUY1YjVKd0M5ZVR
3247	   6YUZDVWNlSVFBYUlkaHJxVVhRTkNXYmZaSSIsICJ5NlNGclZGUnlxNTBJYlJKdmlUWnF
3248	   xalFXejB0TGl1Q21NZU8wS3FhekdJIl19XQ~WyJqN0FEZGIwVVZiMExpMGNpUGNQMGV3
3249	   IiwgImFnZV9pbl95ZWFycyIsIDYyXQ~WyJXcHhKckZ1WDh1U2kycDRodDA5anZ3IiwgI
3250	   mFnZV9iaXJ0aF95ZWFyIiwgMTk2M10~WyJhdFNtRkFDWU1iSlZLRDA1bzNKZ3RRIiwgI
3251	   mlzc3VhbmNlX2RhdGUiLCAiMjAyMC0wMy0xMSJd~WyI0S3lSMzJvSVp0LXprV3ZGcWJV
3252	   TEtnIiwgImV4cGlyeV9kYXRlIiwgIjIwMzAtMDMtMTIiXQ~WyJjaEJDc3loeWgtSjg2S
3253	   S1hd1FEaUNRIiwgImlzc3VpbmdfYXV0aG9yaXR5IiwgIkRFIl0~WyJmbE5QMW5jTXo5T
3254	   GctYzlxTUl6XzlnIiwgImlzc3VpbmdfY291bnRyeSIsICJERSJd~

3256	   The following payload is used for the SD-JWT:

3258	   {
3259	     "_sd": [
3260	       "0HZmnSIPz337kSWe7C34l--88gzJi-eBJ2Vz_HJwATg",
3261	       "1Crn03WmUeRWp4zwPvvCKXl9ZaQp-cdQV_gHdaGSWow",
3262	       "2r009dzvHuVrWrRXT5kJMmHnqEHHnWe0MLVZw8PATB8",
3263	       "6ZNISDst62ymlrOAkadjdD5ZulT5A299J78SLhM__Os",
3264	       "78jg77-GYBeX8IQfoELPyL0DYPdmfZo0JgViV0_lKCM",
3265	       "90CT8AaBPbn5X8nRXkesju1i0BqhWqZ3wqD4jF-qDGk",
3266	       "I00fcFUoDXCucp5yy2ujqPssDVGaWNiUliNz_awD0gc",
3267	       "KjAXgAA9N5WHEDtRIh4u5Mn1ZsWixhhWAiX-A4QiwgA",
3268	       "Lai6IU6d7GQagXR7AvGTrnXgSld3z8EIg_fv3fOZ1Wg",
3269	       "LezjabRqiZOXzEYmVZf8RMi9xAkd3_M1LZ8U7E4s3u4",
3270	       "RTz3qTmFNHbpWrrOMZS41F474kFqRv3vIPqth6PUhlM",
3271	       "W14XHbUffzuW4IFMjpSTb1melWxUWf4N_o2ldkkIqc8",
3272	       "WTpI7RcM3gxZruRpXzezSbkbOr93PVFvWx8woJ3j1cE",
3273	       "_ohJVIQIBsU4updNS4_w4Kb1MHqJ0L9qLGshWq6JXQs",
3274	       "y50czc0ISChy_bsba1dMoUuAOQ5AMmOSfGoEe81v1FU"
3275	     ],
3276	     "iss": "https://pid-issuer.bund.de.example",
3277	     "iat": 1683000000,
3278	     "exp": 1883000000,
3279	     "vct": "urn:eudi:pid:de:1",
3280	     "_sd_alg": "sha-256",
3281	     "cnf": {
3282	       "jwk": {
3283	         "kty": "EC",
3284	         "crv": "P-256",
3285	         "x": "TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc",
3286	         "y": "ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ"
3287	       }
3288	     }
3289	   }

3291	   The digests in the SD-JWT payload reference the following
3292	   Disclosures:

3294	   *Claim given_name*:

3296	   *  SHA-256 Hash: 0HZmnSIPz337kSWe7C34l--88gzJi-eBJ2Vz_HJwATg
3297	   *  Disclosure:
3298	      WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImdpdmVuX25hbWUiLCAiRXJp
3299	      a2EiXQ
3300	   *  Contents: ["2GLC42sKQveCfGfryNRN9w", "given_name", "Erika"]
3301	   *Claim family_name*:

3303	   *  SHA-256 Hash: I00fcFUoDXCucp5yy2ujqPssDVGaWNiUliNz_awD0gc
3304	   *  Disclosure:
3305	      WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImZhbWlseV9uYW1lIiwgIk11
3306	      c3Rlcm1hbm4iXQ
3307	   *  Contents: ["eluV5Og3gSNII8EYnsxA_A", "family_name", "Mustermann"]

3309	   *Claim birthdate*:

3311	   *  SHA-256 Hash: Lai6IU6d7GQagXR7AvGTrnXgSld3z8EIg_fv3fOZ1Wg
3312	   *  Disclosure:
3313	      WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImJpcnRoZGF0ZSIsICIxOTYz
3314	      LTA4LTEyIl0
3315	   *  Contents: ["6Ij7tM-a5iVPGboS5tmvVA", "birthdate", "1963-08-12"]

3317	   *Claim street_address*:

3319	   *  SHA-256 Hash: ALZERsSn5WNiEXdCksW8I5qQw3_NpAnRqpSAZDudgw8
3320	   *  Disclosure:
3321	      WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgInN0cmVldF9hZGRyZXNzIiwg
3322	      IkhlaWRlc3RyYVx1MDBkZmUgMTciXQ
3323	   *  Contents: ["eI8ZWm9QnKPpNPeNenHdhQ", "street_address",
3324	      "Heidestra\u00dfe 17"]

3326	   *Claim locality*:

3328	   *  SHA-256 Hash: D__W_uYcvRz3tvUnIJvBDHiTc7C__qHd0xNKwIs_w9k
3329	   *  Disclosure:
3330	      WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImxvY2FsaXR5IiwgIktcdTAw
3331	      ZjZsbiJd
3332	   *  Contents: ["Qg_O64zqAxe412a108iroA", "locality", "K\u00f6ln"]

3334	   *Claim postal_code*:

3336	   *  SHA-256 Hash: xOPy9-gJALK6UbWKFLR85cOByUD3AbNwFg3I3YfQE_I
3337	   *  Disclosure:
3338	      WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgInBvc3RhbF9jb2RlIiwgIjUx
3339	      MTQ3Il0
3340	   *  Contents: ["AJx-095VPrpTtN4QMOqROA", "postal_code", "51147"]

3342	   *Claim country*:

3344	   *  SHA-256 Hash: eBpCXU1J5dhH2g4t8QYNW5ExS9AxUVblUodoLYoPho0
3345	   *  Disclosure:
3346	      WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgImNvdW50cnkiLCAiREUiXQ
3347	   *  Contents: ["Pc33JM2LchcU_lHggv_ufQ", "country", "DE"]
3348	   *Claim address*:

3350	   *  SHA-256 Hash: RTz3qTmFNHbpWrrOMZS41F474kFqRv3vIPqth6PUhlM
3351	   *  Disclosure:
3352	      WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgImFkZHJlc3MiLCB7Il9zZCI6
3353	      IFsiQUxaRVJzU241V05pRVhkQ2tzVzhJNXFRdzNfTnBBblJxcFNBWkR1ZGd3
3354	      OCIsICJEX19XX3VZY3ZSejN0dlVuSUp2QkRIaVRjN0NfX3FIZDB4Tkt3SXNf
3355	      dzlrIiwgImVCcENYVTFKNWRoSDJnNHQ4UVlOVzVFeFM5QXhVVmJsVW9kb0xZ
3356	      b1BobzAiLCAieE9QeTktZ0pBTEs2VWJXS0ZMUjg1Y09CeVVEM0FiTndGZzNJ
3357	      M1lmUUVfSSJdfV0
3358	   *  Contents: ["G02NSrQfjFXQ7Io09syajA", "address", {"_sd":
3359	      ["ALZERsSn5WNiEXdCksW8I5qQw3_NpAnRqpSAZDudgw8",
3360	      "D__W_uYcvRz3tvUnIJvBDHiTc7C__qHd0xNKwIs_w9k",
3361	      "eBpCXU1J5dhH2g4t8QYNW5ExS9AxUVblUodoLYoPho0",
3362	      "xOPy9-gJALK6UbWKFLR85cOByUD3AbNwFg3I3YfQE_I"]}]

3364	   *Claim nationalities*:

3366	   *  SHA-256 Hash: y50czc0ISChy_bsba1dMoUuAOQ5AMmOSfGoEe81v1FU
3367	   *  Disclosure:
3368	      WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIm5hdGlvbmFsaXRpZXMiLCBb
3369	      IkRFIl1d
3370	   *  Contents: ["lklxF5jMYlGTPUovMNIvCA", "nationalities", ["DE"]]

3372	   *Claim sex*:

3374	   *  SHA-256 Hash: 90CT8AaBPbn5X8nRXkesju1i0BqhWqZ3wqD4jF-qDGk
3375	   *  Disclosure:
3376	      WyJuUHVvUW5rUkZxM0JJZUFtN0FuWEZBIiwgInNleCIsIDJd
3377	   *  Contents: ["nPuoQnkRFq3BIeAm7AnXFA", "sex", 2]

3379	   *Claim birth_family_name*:

3381	   *  SHA-256 Hash: KjAXgAA9N5WHEDtRIh4u5Mn1ZsWixhhWAiX-A4QiwgA
3382	   *  Disclosure:
3383	      WyI1YlBzMUlxdVpOYTBoa2FGenp6Wk53IiwgImJpcnRoX2ZhbWlseV9uYW1l
3384	      IiwgIkdhYmxlciJd
3385	   *  Contents: ["5bPs1IquZNa0hkaFzzzZNw", "birth_family_name",
3386	      "Gabler"]

3388	   *Claim locality*:

3390	   *  SHA-256 Hash: KUViaaLnY5jSML90G29OOLENPbbXfhSjSPMjZaGkxAE
3391	   *  Disclosure:
3392	      WyI1YTJXMF9OcmxFWnpmcW1rXzdQcS13IiwgImxvY2FsaXR5IiwgIkJlcmxp
3393	      biJd
3394	   *  Contents: ["5a2W0_NrlEZzfqmk_7Pq-w", "locality", "Berlin"]
3395	   *Claim country*:

3397	   *  SHA-256 Hash: YbsT0S76VqXCVsd1jUSlwKPDgmALeB1uZclFHXf-USQ
3398	   *  Disclosure:
3399	      WyJ5MXNWVTV3ZGZKYWhWZGd3UGdTN1JRIiwgImNvdW50cnkiLCAiREUiXQ
3400	   *  Contents: ["y1sVU5wdfJahVdgwPgS7RQ", "country", "DE"]

3402	   *Claim place_of_birth*:

3404	   *  SHA-256 Hash: 1Crn03WmUeRWp4zwPvvCKXl9ZaQp-cdQV_gHdaGSWow
3405	   *  Disclosure:
3406	      WyJIYlE0WDhzclZXM1FEeG5JSmRxeU9BIiwgInBsYWNlX29mX2JpcnRoIiwg
3407	      eyJfc2QiOiBbIktVVmlhYUxuWTVqU01MOTBHMjlPT0xFTlBiYlhmaFNqU1BN
3408	      alphR2t4QUUiLCAiWWJzVDBTNzZWcVhDVnNkMWpVU2x3S1BEZ21BTGVCMXVa
3409	      Y2xGSFhmLVVTUSJdfV0
3410	   *  Contents: ["HbQ4X8srVW3QDxnIJdqyOA", "place_of_birth", {"_sd":
3411	      ["KUViaaLnY5jSML90G29OOLENPbbXfhSjSPMjZaGkxAE",
3412	      "YbsT0S76VqXCVsd1jUSlwKPDgmALeB1uZclFHXf-USQ"]}]

3414	   *Claim 12*:

3416	   *  SHA-256 Hash: gkvy0FuvBBvj0hs2ZNwxcqOlf8mu2-kCE7-Nb2QxuBU
3417	   *  Disclosure:
3418	      WyJDOUdTb3VqdmlKcXVFZ1lmb2pDYjFBIiwgIjEyIiwgdHJ1ZV0
3419	   *  Contents: ["C9GSoujviJquEgYfojCb1A", "12", true]

3421	   *Claim 14*:

3423	   *  SHA-256 Hash: y6SFrVFRyq50IbRJviTZqqjQWz0tLiuCmMeO0KqazGI
3424	   *  Disclosure:
3425	      WyJreDVrRjE3Vi14MEptd1V4OXZndnR3IiwgIjE0IiwgdHJ1ZV0
3426	   *  Contents: ["kx5kF17V-x0JmwUx9vgvtw", "14", true]

3428	   *Claim 16*:

3430	   *  SHA-256 Hash: hrY4HnmF5b5JwC9eTzaFCUceIQAaIdhrqUXQNCWbfZI
3431	   *  Disclosure:
3432	      WyJIM28xdXN3UDc2MEZpMnllR2RWQ0VRIiwgIjE2IiwgdHJ1ZV0
3433	   *  Contents: ["H3o1uswP760Fi2yeGdVCEQ", "16", true]

3435	   *Claim 18*:

3437	   *  SHA-256 Hash: CVKnly5P90yJs3EwtxQiOtUczaXCYNA4IczRaohrMDg
3438	   *  Disclosure:
3439	      WyJPQktsVFZsdkxnLUFkd3FZR2JQOFpBIiwgIjE4IiwgdHJ1ZV0
3440	   *  Contents: ["OBKlTVlvLg-AdwqYGbP8ZA", "18", true]

3442	   *Claim 21*:

3444	   *  SHA-256 Hash: 1tEiyzPRYOKsf7SsYGMgPZKsOT1lQZRxHXA0r5_Bwkk
3445	   *  Disclosure:
3446	      WyJNMEpiNTd0NDF1YnJrU3V5ckRUM3hBIiwgIjIxIiwgdHJ1ZV0
3447	   *  Contents: ["M0Jb57t41ubrkSuyrDT3xA", "21", true]

3449	   *Claim 65*:

3451	   *  SHA-256 Hash: a44-g2Gr8_3AmJw2XZ8kI1y0Qz_ze9iOcW2W3RLpXGg
3452	   *  Disclosure:
3453	      WyJEc210S05ncFY0ZEFIcGpyY2Fvc0F3IiwgIjY1IiwgZmFsc2Vd
3454	   *  Contents: ["DsmtKNgpV4dAHpjrcaosAw", "65", false]

3456	   *Claim age_equal_or_over*:

3458	   *  SHA-256 Hash: 2r009dzvHuVrWrRXT5kJMmHnqEHHnWe0MLVZw8PATB8
3459	   *  Disclosure:
3460	      WyJlSzVvNXBIZmd1cFBwbHRqMXFoQUp3IiwgImFnZV9lcXVhbF9vcl9vdmVy
3461	      IiwgeyJfc2QiOiBbIjF0RWl5elBSWU9Lc2Y3U3NZR01nUFpLc09UMWxRWlJ4
3462	      SFhBMHI1X0J3a2siLCAiQ1ZLbmx5NVA5MHlKczNFd3R4UWlPdFVjemFYQ1lO
3463	      QTRJY3pSYW9ock1EZyIsICJhNDQtZzJHcjhfM0FtSncyWFo4a0kxeTBRel96
3464	      ZTlpT2NXMlczUkxwWEdnIiwgImdrdnkwRnV2QkJ2ajBoczJaTnd4Y3FPbGY4
3465	      bXUyLWtDRTctTmIyUXh1QlUiLCAiaHJZNEhubUY1YjVKd0M5ZVR6YUZDVWNl
3466	      SVFBYUlkaHJxVVhRTkNXYmZaSSIsICJ5NlNGclZGUnlxNTBJYlJKdmlUWnFx
3467	      alFXejB0TGl1Q21NZU8wS3FhekdJIl19XQ
3468	   *  Contents: ["eK5o5pHfgupPpltj1qhAJw", "age_equal_or_over", {"_sd":
3469	      ["1tEiyzPRYOKsf7SsYGMgPZKsOT1lQZRxHXA0r5_Bwkk",
3470	      "CVKnly5P90yJs3EwtxQiOtUczaXCYNA4IczRaohrMDg",
3471	      "a44-g2Gr8_3AmJw2XZ8kI1y0Qz_ze9iOcW2W3RLpXGg",
3472	      "gkvy0FuvBBvj0hs2ZNwxcqOlf8mu2-kCE7-Nb2QxuBU",
3473	      "hrY4HnmF5b5JwC9eTzaFCUceIQAaIdhrqUXQNCWbfZI",
3474	      "y6SFrVFRyq50IbRJviTZqqjQWz0tLiuCmMeO0KqazGI"]}]

3476	   *Claim age_in_years*:

3478	   *  SHA-256 Hash: WTpI7RcM3gxZruRpXzezSbkbOr93PVFvWx8woJ3j1cE
3479	   *  Disclosure:
3480	      WyJqN0FEZGIwVVZiMExpMGNpUGNQMGV3IiwgImFnZV9pbl95ZWFycyIsIDYy
3481	      XQ
3482	   *  Contents: ["j7ADdb0UVb0Li0ciPcP0ew", "age_in_years", 62]

3484	   *Claim age_birth_year*:

3486	   *  SHA-256 Hash: LezjabRqiZOXzEYmVZf8RMi9xAkd3_M1LZ8U7E4s3u4
3487	   *  Disclosure:
3488	      WyJXcHhKckZ1WDh1U2kycDRodDA5anZ3IiwgImFnZV9iaXJ0aF95ZWFyIiwg
3489	      MTk2M10
3490	   *  Contents: ["WpxJrFuX8uSi2p4ht09jvw", "age_birth_year", 1963]
3491	   *Claim issuance_date*:

3493	   *  SHA-256 Hash: W14XHbUffzuW4IFMjpSTb1melWxUWf4N_o2ldkkIqc8
3494	   *  Disclosure:
3495	      WyJhdFNtRkFDWU1iSlZLRDA1bzNKZ3RRIiwgImlzc3VhbmNlX2RhdGUiLCAi
3496	      MjAyMC0wMy0xMSJd
3497	   *  Contents: ["atSmFACYMbJVKD05o3JgtQ", "issuance_date",
3498	      "2020-03-11"]

3500	   *Claim expiry_date*:

3502	   *  SHA-256 Hash: 78jg77-GYBeX8IQfoELPyL0DYPdmfZo0JgViV0_lKCM
3503	   *  Disclosure:
3504	      WyI0S3lSMzJvSVp0LXprV3ZGcWJVTEtnIiwgImV4cGlyeV9kYXRlIiwgIjIw
3505	      MzAtMDMtMTIiXQ
3506	   *  Contents: ["4KyR32oIZt-zkWvFqbULKg", "expiry_date", "2030-03-12"]

3508	   *Claim issuing_authority*:

3510	   *  SHA-256 Hash: 6ZNISDst62ymlrOAkadjdD5ZulT5A299J78SLhM__Os
3511	   *  Disclosure:
3512	      WyJjaEJDc3loeWgtSjg2SS1hd1FEaUNRIiwgImlzc3VpbmdfYXV0aG9yaXR5
3513	      IiwgIkRFIl0
3514	   *  Contents: ["chBCsyhyh-J86I-awQDiCQ", "issuing_authority", "DE"]

3516	   *Claim issuing_country*:

3518	   *  SHA-256 Hash: _ohJVIQIBsU4updNS4_w4Kb1MHqJ0L9qLGshWq6JXQs
3519	   *  Disclosure:
3520	      WyJmbE5QMW5jTXo5TGctYzlxTUl6XzlnIiwgImlzc3VpbmdfY291bnRyeSIs
3521	      ICJERSJd
3522	   *  Contents: ["flNP1ncMz9Lg-c9qMIz_9g", "issuing_country", "DE"]

3524	   The following is an example of an SD-JWT+KB that discloses only
3525	   nationality and the fact that the person is over 18 years old:

3527	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImRjK3NkLWp3dCJ9.eyJfc2QiOiBbIjBIWm1
3528	   uU0lQejMzN2tTV2U3QzM0bC0tODhnekppLWVCSjJWel9ISndBVGciLCAiMUNybjAzV21
3529	   VZVJXcDR6d1B2dkNLWGw5WmFRcC1jZFFWX2dIZGFHU1dvdyIsICIycjAwOWR6dkh1VnJ
3530	   XclJYVDVrSk1tSG5xRUhIbldlME1MVlp3OFBBVEI4IiwgIjZaTklTRHN0NjJ5bWxyT0F
3531	   rYWRqZEQ1WnVsVDVBMjk5Sjc4U0xoTV9fT3MiLCAiNzhqZzc3LUdZQmVYOElRZm9FTFB
3532	   5TDBEWVBkbWZabzBKZ1ZpVjBfbEtDTSIsICI5MENUOEFhQlBibjVYOG5SWGtlc2p1MWk
3533	   wQnFoV3FaM3dxRDRqRi1xREdrIiwgIkkwMGZjRlVvRFhDdWNwNXl5MnVqcVBzc0RWR2F
3534	   XTmlVbGlOel9hd0QwZ2MiLCAiS2pBWGdBQTlONVdIRUR0UkloNHU1TW4xWnNXaXhoaFd
3535	   BaVgtQTRRaXdnQSIsICJMYWk2SVU2ZDdHUWFnWFI3QXZHVHJuWGdTbGQzejhFSWdfZnY
3536	   zZk9aMVdnIiwgIkxlemphYlJxaVpPWHpFWW1WWmY4Uk1pOXhBa2QzX00xTFo4VTdFNHM
3537	   zdTQiLCAiUlR6M3FUbUZOSGJwV3JyT01aUzQxRjQ3NGtGcVJ2M3ZJUHF0aDZQVWhsTSI
3538	   sICJXMTRYSGJVZmZ6dVc0SUZNanBTVGIxbWVsV3hVV2Y0Tl9vMmxka2tJcWM4IiwgIld
3539	   UcEk3UmNNM2d4WnJ1UnBYemV6U2JrYk9yOTNQVkZ2V3g4d29KM2oxY0UiLCAiX29oSlZ
3540	   JUUlCc1U0dXBkTlM0X3c0S2IxTUhxSjBMOXFMR3NoV3E2SlhRcyIsICJ5NTBjemMwSVN
3541	   DaHlfYnNiYTFkTW9VdUFPUTVBTW1PU2ZHb0VlODF2MUZVIl0sICJpc3MiOiAiaHR0cHM
3542	   6Ly9waWQtaXNzdWVyLmJ1bmQuZGUuZXhhbXBsZSIsICJpYXQiOiAxNjgzMDAwMDAwLCA
3543	   iZXhwIjogMTg4MzAwMDAwMCwgInZjdCI6ICJ1cm46ZXVkaTpwaWQ6ZGU6MSIsICJfc2R
3544	   fYWxnIjogInNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJjcnY
3545	   iOiAiUC0yNTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxpbER
3546	   sczd2Q2VHZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVjQ0U
3547	   2dDRqVDlGMkhaUSJ9fX0.kewtSMp25Qz_GYmVOdObWzuQFTCyrooFV4NNqKVn-vV1n_U
3548	   FrSuklT91-e1_qShDXD6AlFq0WuPswYzzerRXKA~WyJlSzVvNXBIZmd1cFBwbHRqMXFo
3549	   QUp3IiwgImFnZV9lcXVhbF9vcl9vdmVyIiwgeyJfc2QiOiBbIjF0RWl5elBSWU9Lc2Y3
3550	   U3NZR01nUFpLc09UMWxRWlJ4SFhBMHI1X0J3a2siLCAiQ1ZLbmx5NVA5MHlKczNFd3R4
3551	   UWlPdFVjemFYQ1lOQTRJY3pSYW9ock1EZyIsICJhNDQtZzJHcjhfM0FtSncyWFo4a0kx
3552	   eTBRel96ZTlpT2NXMlczUkxwWEdnIiwgImdrdnkwRnV2QkJ2ajBoczJaTnd4Y3FPbGY4
3553	   bXUyLWtDRTctTmIyUXh1QlUiLCAiaHJZNEhubUY1YjVKd0M5ZVR6YUZDVWNlSVFBYUlk
3554	   aHJxVVhRTkNXYmZaSSIsICJ5NlNGclZGUnlxNTBJYlJKdmlUWnFxalFXejB0TGl1Q21N
3555	   ZU8wS3FhekdJIl19XQ~WyJPQktsVFZsdkxnLUFkd3FZR2JQOFpBIiwgIjE4IiwgdHJ1Z
3556	   V0~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgIm5hdGlvbmFsaXRpZXMiLCBbIkRFI
3557	   l1d~eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImtiK2p3dCJ9.eyJub25jZSI6ICIxMjM
3558	   0NTY3ODkwIiwgImF1ZCI6ICJodHRwczovL3ZlcmlmaWVyLmV4YW1wbGUub3JnIiwgIml
3559	   hdCI6IDE3NDcwNzc2MDYsICJzZF9oYXNoIjogIjR6NS1SVGdYOC1rSnZycDlzMjVtell
3560	   iQlJPMExzSktTMWJoVUtKd0xwYWsifQ.dRH1OYZKzdAEx3xYiQRJd_eumoBWHIdEcxfy
3561	   dftgD5Ow2QGGIPUEB5rgVWpUI408lS8idawDJeG2QxTS6Onj9Q

3563	   This is the payload of the corresponding Key Binding JWT:

3565	   {
3566	     "nonce": "1234567890",
3567	     "aud": "https://verifier.example.org",
3568	     "iat": 1747077606,
3569	     "sd_hash": "4z5-RTgX8-kJvrp9s25mzYbBRO0LsJKS1bhUKJwLpak"
3570	   }

3572	   After validation, the Verifier will have the following processed SD-
3573	   JWT payload available for further handling:

3575	   {
3576	     "iss": "https://pid-issuer.bund.de.example",
3577	     "iat": 1683000000,
3578	     "exp": 1883000000,
3579	     "vct": "urn:eudi:pid:de:1",
3580	     "cnf": {
3581	       "jwk": {
3582	         "kty": "EC",
3583	         "crv": "P-256",
3584	         "x": "TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc",
3585	         "y": "ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ"
3586	       }
3587	     },
3588	     "age_equal_or_over": {
3589	       "18": true
3590	     },
3591	     "nationalities": [
3592	       "DE"
3593	     ]
3594	   }

3596	A.4.  W3C Verifiable Credentials Data Model v2.0

3598	   This non-normative example illustrates how the artifacts defined in
3599	   this specification could be used to express a W3C Verifiable
3600	   Credentials Data Model v2.0 [VC_DATA_v2.0] payload.

3602	   Key Binding is applied using the Holder's public key passed in a cnf
3603	   claim in the SD-JWT.

3605	   The following is the input JWT Claims Set:

3607	   {
3608	     "@context": [
3609	       "https://www.w3.org/2018/credentials/v1",
3610	       "https://w3id.org/vaccination/v1"
3611	     ],
3612	     "type": [
3613	       "VerifiableCredential",
3614	       "VaccinationCertificate"
3615	     ],
3616	     "issuer": "https://example.com/issuer",
3617	     "issuanceDate": "2023-02-09T11:01:59Z",
3618	     "expirationDate": "2028-02-08T11:01:59Z",
3619	     "name": "COVID-19 Vaccination Certificate",
3620	     "description": "COVID-19 Vaccination Certificate",
3621	     "credentialSubject": {
3622	       "vaccine": {
3623	         "type": "Vaccine",
3624	         "atcCode": "J07BX03",
3625	         "medicinalProductName": "COVID-19 Vaccine Moderna",
3626	         "marketingAuthorizationHolder": "Moderna Biotech"
3627	       },
3628	       "nextVaccinationDate": "2021-08-16T13:40:12Z",
3629	       "countryOfVaccination": "GE",
3630	       "dateOfVaccination": "2021-06-23T13:40:12Z",
3631	       "order": "3/3",
3632	       "recipient": {
3633	         "type": "VaccineRecipient",
3634	         "gender": "Female",
3635	         "birthDate": "1961-08-17",
3636	         "givenName": "Marion",
3637	         "familyName": "Mustermann"
3638	       },
3639	       "type": "VaccinationEvent",
3640	       "administeringCentre": "Praxis Sommergarten",
3641	       "batchNumber": "1626382736",
3642	       "healthProfessional": "883110000015376"
3643	     }
3644	   }

3646	   The following is the issued SD-JWT:

3648	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJAY29udGV4
3649	   dCI6IFsiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCAiaHR0
3650	   cHM6Ly93M2lkLm9yZy92YWNjaW5hdGlvbi92MSJdLCAidHlwZSI6IFsiVmVyaWZpYWJs
3651	   ZUNyZWRlbnRpYWwiLCAiVmFjY2luYXRpb25DZXJ0aWZpY2F0ZSJdLCAiaXNzdWVyIjog
3652	   Imh0dHBzOi8vZXhhbXBsZS5jb20vaXNzdWVyIiwgImlzc3VhbmNlRGF0ZSI6ICIyMDIz
3653	   LTAyLTA5VDExOjAxOjU5WiIsICJleHBpcmF0aW9uRGF0ZSI6ICIyMDI4LTAyLTA4VDEx
3654	   OjAxOjU5WiIsICJuYW1lIjogIkNPVklELTE5IFZhY2NpbmF0aW9uIENlcnRpZmljYXRl
3655	   IiwgImRlc2NyaXB0aW9uIjogIkNPVklELTE5IFZhY2NpbmF0aW9uIENlcnRpZmljYXRl
3656	   IiwgImNyZWRlbnRpYWxTdWJqZWN0IjogeyJfc2QiOiBbIjFWX0stOGxEUThpRlhCRlhi
3657	   Wlk5ZWhxUjRIYWJXQ2k1VDB5Ykl6WlBld3ciLCAiSnpqTGd0UDI5ZFAtQjN0ZDEyUDY3
3658	   NGdGbUsyenk4MUhNdEJnZjZDSk5XZyIsICJSMmZHYmZBMDdaX1lsa3FtTlp5bWExeHl5
3659	   eDFYc3RJaVM2QjFZYmwySlo0IiwgIlRDbXpybDdLMmdldl9kdTdwY01JeXpSTEhwLVll
3660	   Zy1GbF9jeHRyVXZQeGciLCAiVjdrSkJMSzc4VG1WRE9tcmZKN1p1VVBIdUtfMmNjN3la
3661	   UmE0cVYxdHh3TSIsICJiMGVVc3ZHUC1PRERkRm9ZNE5semxYYzN0RHNsV0p0Q0pGNzVO
3662	   dzhPal9nIiwgInpKS19lU01YandNOGRYbU1aTG5JOEZHTTA4ekozX3ViR2VFTUotNVRC
3663	   eTAiXSwgInZhY2NpbmUiOiB7Il9zZCI6IFsiMWNGNWhMd2toTU5JYXFmV0pyWEk3Tk1X
3664	   ZWRMLTlmNlkyUEE1MnlQalNaSSIsICJIaXk2V1d1ZUxENWJuMTYyOTh0UHY3R1hobWxk
3665	   TURPVG5CaS1DWmJwaE5vIiwgIkxiMDI3cTY5MWpYWGwtakM3M3ZpOGViT2o5c214M0Mt
3666	   X29nN2dBNFRCUUUiXSwgInR5cGUiOiAiVmFjY2luZSJ9LCAicmVjaXBpZW50IjogeyJf
3667	   c2QiOiBbIjFsU1FCTlkyNHEwVGg2T0d6dGhxLTctNGw2Y0FheHJZWE9HWnBlV19sbkEi
3668	   LCAiM256THE4MU0yb04wNndkdjFzaEh2T0VKVnhaNUtMbWREa0hFREpBQldFSSIsICJQ
3669	   bjFzV2kwNkc0TEpybm4tX1JUMFJiTV9IVGR4blBKUXVYMmZ6V3ZfSk9VIiwgImxGOXV6
3670	   ZHN3N0hwbEdMYzcxNFRyNFdPN01HSnphN3R0N1FGbGVDWDRJdHciXSwgInR5cGUiOiAi
3671	   VmFjY2luZVJlY2lwaWVudCJ9LCAidHlwZSI6ICJWYWNjaW5hdGlvbkV2ZW50In0sICJf
3672	   c2RfYWxnIjogInNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJj
3673	   cnYiOiAiUC0yNTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxp
3674	   bERsczd2Q2VHZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVj
3675	   Q0U2dDRqVDlGMkhaUSJ9fX0.uiqzysGXtv-RtXz2e_3_aaOwH-gFyka4ayLABsBJHvkR
3676	   FQVq80nc64EyClCWwKQeu--6CYk4RklkWLZ80ZnAzA~WyIyR0xDNDJzS1F2ZUNmR2Zye
3677	   U5STjl3IiwgImF0Y0NvZGUiLCAiSjA3QlgwMyJd~WyJlbHVWNU9nM2dTTklJOEVZbnN4
3678	   QV9BIiwgIm1lZGljaW5hbFByb2R1Y3ROYW1lIiwgIkNPVklELTE5IFZhY2NpbmUgTW9k
3679	   ZXJuYSJd~WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgIm1hcmtldGluZ0F1dGhvcml
3680	   6YXRpb25Ib2xkZXIiLCAiTW9kZXJuYSBCaW90ZWNoIl0~WyJlSThaV205UW5LUHBOUGV
3681	   OZW5IZGhRIiwgIm5leHRWYWNjaW5hdGlvbkRhdGUiLCAiMjAyMS0wOC0xNlQxMzo0MDo
3682	   xMloiXQ~WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImNvdW50cnlPZlZhY2NpbmF0
3683	   aW9uIiwgIkdFIl0~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImRhdGVPZlZhY2Np
3684	   bmF0aW9uIiwgIjIwMjEtMDYtMjNUMTM6NDA6MTJaIl0~WyJQYzMzSk0yTGNoY1VfbEhn
3685	   Z3ZfdWZRIiwgIm9yZGVyIiwgIjMvMyJd~WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiw
3686	   gImdlbmRlciIsICJGZW1hbGUiXQ~WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImJp
3687	   cnRoRGF0ZSIsICIxOTYxLTA4LTE3Il0~WyJuUHVvUW5rUkZxM0JJZUFtN0FuWEZBIiwg
3688	   ImdpdmVuTmFtZSIsICJNYXJpb24iXQ~WyI1YlBzMUlxdVpOYTBoa2FGenp6Wk53IiwgI
3689	   mZhbWlseU5hbWUiLCAiTXVzdGVybWFubiJd~WyI1YTJXMF9OcmxFWnpmcW1rXzdQcS13
3690	   IiwgImFkbWluaXN0ZXJpbmdDZW50cmUiLCAiUHJheGlzIFNvbW1lcmdhcnRlbiJd~WyJ
3691	   5MXNWVTV3ZGZKYWhWZGd3UGdTN1JRIiwgImJhdGNoTnVtYmVyIiwgIjE2MjYzODI3MzY
3692	   iXQ~WyJIYlE0WDhzclZXM1FEeG5JSmRxeU9BIiwgImhlYWx0aFByb2Zlc3Npb25hbCIs
3693	   ICI4ODMxMTAwMDAwMTUzNzYiXQ~

3695	   The following payload is used for the SD-JWT:

3697	   {
3698	     "@context": [
3699	       "https://www.w3.org/2018/credentials/v1",
3700	       "https://w3id.org/vaccination/v1"
3701	     ],
3702	     "type": [
3703	       "VerifiableCredential",
3704	       "VaccinationCertificate"
3705	     ],
3706	     "issuer": "https://example.com/issuer",
3707	     "issuanceDate": "2023-02-09T11:01:59Z",
3708	     "expirationDate": "2028-02-08T11:01:59Z",
3709	     "name": "COVID-19 Vaccination Certificate",
3710	     "description": "COVID-19 Vaccination Certificate",
3711	     "credentialSubject": {
3712	       "_sd": [
3713	         "1V_K-8lDQ8iFXBFXbZY9ehqR4HabWCi5T0ybIzZPeww",
3714	         "JzjLgtP29dP-B3td12P674gFmK2zy81HMtBgf6CJNWg",
3715	         "R2fGbfA07Z_YlkqmNZyma1xyyx1XstIiS6B1Ybl2JZ4",
3716	         "TCmzrl7K2gev_du7pcMIyzRLHp-Yeg-Fl_cxtrUvPxg",
3717	         "V7kJBLK78TmVDOmrfJ7ZuUPHuK_2cc7yZRa4qV1txwM",
3718	         "b0eUsvGP-ODDdFoY4NlzlXc3tDslWJtCJF75Nw8Oj_g",
3719	         "zJK_eSMXjwM8dXmMZLnI8FGM08zJ3_ubGeEMJ-5TBy0"
3720	       ],
3721	       "vaccine": {
3722	         "_sd": [
3723	           "1cF5hLwkhMNIaqfWJrXI7NMWedL-9f6Y2PA52yPjSZI",
3724	           "Hiy6WWueLD5bn16298tPv7GXhmldMDOTnBi-CZbphNo",
3725	           "Lb027q691jXXl-jC73vi8ebOj9smx3C-_og7gA4TBQE"
3726	         ],
3727	         "type": "Vaccine"
3728	       },
3729	       "recipient": {
3730	         "_sd": [
3731	           "1lSQBNY24q0Th6OGzthq-7-4l6cAaxrYXOGZpeW_lnA",
3732	           "3nzLq81M2oN06wdv1shHvOEJVxZ5KLmdDkHEDJABWEI",
3733	           "Pn1sWi06G4LJrnn-_RT0RbM_HTdxnPJQuX2fzWv_JOU",
3734	           "lF9uzdsw7HplGLc714Tr4WO7MGJza7tt7QFleCX4Itw"
3735	         ],
3736	         "type": "VaccineRecipient"
3737	       },
3738	       "type": "VaccinationEvent"
3739	     },
3740	     "_sd_alg": "sha-256",
3741	     "cnf": {
3742	       "jwk": {
3743	         "kty": "EC",
3744	         "crv": "P-256",
3745	         "x": "TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc",
3746	         "y": "ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ"
3747	       }
3748	     }
3749	   }

3751	   The digests in the SD-JWT payload reference the following
3752	   Disclosures:

3754	   *Claim atcCode*:

3756	   *  SHA-256 Hash: 1cF5hLwkhMNIaqfWJrXI7NMWedL-9f6Y2PA52yPjSZI
3757	   *  Disclosure:
3758	      WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImF0Y0NvZGUiLCAiSjA3Qlgw
3759	      MyJd
3760	   *  Contents: ["2GLC42sKQveCfGfryNRN9w", "atcCode", "J07BX03"]

3762	   *Claim medicinalProductName*:

3764	   *  SHA-256 Hash: Hiy6WWueLD5bn16298tPv7GXhmldMDOTnBi-CZbphNo
3765	   *  Disclosure:
3766	      WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgIm1lZGljaW5hbFByb2R1Y3RO
3767	      YW1lIiwgIkNPVklELTE5IFZhY2NpbmUgTW9kZXJuYSJd
3768	   *  Contents: ["eluV5Og3gSNII8EYnsxA_A", "medicinalProductName",
3769	      "COVID-19
3770	      Vaccine Moderna"]

3772	   *Claim marketingAuthorizationHolder*:

3774	   *  SHA-256 Hash: Lb027q691jXXl-jC73vi8ebOj9smx3C-_og7gA4TBQE
3775	   *  Disclosure:
3776	      WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgIm1hcmtldGluZ0F1dGhvcml6
3777	      YXRpb25Ib2xkZXIiLCAiTW9kZXJuYSBCaW90ZWNoIl0
3778	   *  Contents: ["6Ij7tM-a5iVPGboS5tmvVA",
3779	      "marketingAuthorizationHolder",
3780	      "Moderna Biotech"]

3782	   *Claim nextVaccinationDate*:

3784	   *  SHA-256 Hash: R2fGbfA07Z_YlkqmNZyma1xyyx1XstIiS6B1Ybl2JZ4
3785	   *  Disclosure:
3786	      WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgIm5leHRWYWNjaW5hdGlvbkRh
3787	      dGUiLCAiMjAyMS0wOC0xNlQxMzo0MDoxMloiXQ
3788	   *  Contents: ["eI8ZWm9QnKPpNPeNenHdhQ", "nextVaccinationDate",
3789	      "2021-08-16T13:40:12Z"]

3791	   *Claim countryOfVaccination*:

3793	   *  SHA-256 Hash: JzjLgtP29dP-B3td12P674gFmK2zy81HMtBgf6CJNWg
3794	   *  Disclosure:
3795	      WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgImNvdW50cnlPZlZhY2NpbmF0
3796	      aW9uIiwgIkdFIl0
3797	   *  Contents: ["Qg_O64zqAxe412a108iroA", "countryOfVaccination", "GE"]

3799	   *Claim dateOfVaccination*:

3801	   *  SHA-256 Hash: zJK_eSMXjwM8dXmMZLnI8FGM08zJ3_ubGeEMJ-5TBy0
3802	   *  Disclosure:
3803	      WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImRhdGVPZlZhY2NpbmF0aW9u
3804	      IiwgIjIwMjEtMDYtMjNUMTM6NDA6MTJaIl0
3805	   *  Contents: ["AJx-095VPrpTtN4QMOqROA", "dateOfVaccination",
3806	      "2021-06-23T13:40:12Z"]

3808	   *Claim order*:

3810	   *  SHA-256 Hash: b0eUsvGP-ODDdFoY4NlzlXc3tDslWJtCJF75Nw8Oj_g
3811	   *  Disclosure:
3812	      WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgIm9yZGVyIiwgIjMvMyJd
3813	   *  Contents: ["Pc33JM2LchcU_lHggv_ufQ", "order", "3/3"]

3815	   *Claim gender*:

3817	   *  SHA-256 Hash: 3nzLq81M2oN06wdv1shHvOEJVxZ5KLmdDkHEDJABWEI
3818	   *  Disclosure:
3819	      WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgImdlbmRlciIsICJGZW1hbGUi
3820	      XQ
3821	   *  Contents: ["G02NSrQfjFXQ7Io09syajA", "gender", "Female"]

3823	   *Claim birthDate*:

3825	   *  SHA-256 Hash: Pn1sWi06G4LJrnn-_RT0RbM_HTdxnPJQuX2fzWv_JOU
3826	   *  Disclosure:
3827	      WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgImJpcnRoRGF0ZSIsICIxOTYx
3828	      LTA4LTE3Il0
3829	   *  Contents: ["lklxF5jMYlGTPUovMNIvCA", "birthDate", "1961-08-17"]

3831	   *Claim givenName*:

3833	   *  SHA-256 Hash: lF9uzdsw7HplGLc714Tr4WO7MGJza7tt7QFleCX4Itw
3834	   *  Disclosure:
3835	      WyJuUHVvUW5rUkZxM0JJZUFtN0FuWEZBIiwgImdpdmVuTmFtZSIsICJNYXJp
3836	      b24iXQ
3837	   *  Contents: ["nPuoQnkRFq3BIeAm7AnXFA", "givenName", "Marion"]

3839	   *Claim familyName*:

3841	   *  SHA-256 Hash: 1lSQBNY24q0Th6OGzthq-7-4l6cAaxrYXOGZpeW_lnA
3842	   *  Disclosure:
3843	      WyI1YlBzMUlxdVpOYTBoa2FGenp6Wk53IiwgImZhbWlseU5hbWUiLCAiTXVz
3844	      dGVybWFubiJd
3845	   *  Contents: ["5bPs1IquZNa0hkaFzzzZNw", "familyName", "Mustermann"]

3847	   *Claim administeringCentre*:

3849	   *  SHA-256 Hash: TCmzrl7K2gev_du7pcMIyzRLHp-Yeg-Fl_cxtrUvPxg
3850	   *  Disclosure:
3851	      WyI1YTJXMF9OcmxFWnpmcW1rXzdQcS13IiwgImFkbWluaXN0ZXJpbmdDZW50
3852	      cmUiLCAiUHJheGlzIFNvbW1lcmdhcnRlbiJd
3853	   *  Contents: ["5a2W0_NrlEZzfqmk_7Pq-w", "administeringCentre",
3854	      "Praxis
3855	      Sommergarten"]

3857	   *Claim batchNumber*:

3859	   *  SHA-256 Hash: V7kJBLK78TmVDOmrfJ7ZuUPHuK_2cc7yZRa4qV1txwM
3860	   *  Disclosure:
3861	      WyJ5MXNWVTV3ZGZKYWhWZGd3UGdTN1JRIiwgImJhdGNoTnVtYmVyIiwgIjE2
3862	      MjYzODI3MzYiXQ
3863	   *  Contents: ["y1sVU5wdfJahVdgwPgS7RQ", "batchNumber", "1626382736"]

3865	   *Claim healthProfessional*:

3867	   *  SHA-256 Hash: 1V_K-8lDQ8iFXBFXbZY9ehqR4HabWCi5T0ybIzZPeww
3868	   *  Disclosure:
3869	      WyJIYlE0WDhzclZXM1FEeG5JSmRxeU9BIiwgImhlYWx0aFByb2Zlc3Npb25h
3870	      bCIsICI4ODMxMTAwMDAwMTUzNzYiXQ
3871	   *  Contents: ["HbQ4X8srVW3QDxnIJdqyOA", "healthProfessional",
3872	      "883110000015376"]

3874	   This is an example of an SD-JWT+KB that discloses only type,
3875	   medicinalProductName, atcCode of the vaccine, type of the recipient,
3876	   type, order and dateOfVaccination:

3878	   eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0.eyJAY29udGV4
3879	   dCI6IFsiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCAiaHR0
3880	   cHM6Ly93M2lkLm9yZy92YWNjaW5hdGlvbi92MSJdLCAidHlwZSI6IFsiVmVyaWZpYWJs
3881	   ZUNyZWRlbnRpYWwiLCAiVmFjY2luYXRpb25DZXJ0aWZpY2F0ZSJdLCAiaXNzdWVyIjog
3882	   Imh0dHBzOi8vZXhhbXBsZS5jb20vaXNzdWVyIiwgImlzc3VhbmNlRGF0ZSI6ICIyMDIz
3883	   LTAyLTA5VDExOjAxOjU5WiIsICJleHBpcmF0aW9uRGF0ZSI6ICIyMDI4LTAyLTA4VDEx
3884	   OjAxOjU5WiIsICJuYW1lIjogIkNPVklELTE5IFZhY2NpbmF0aW9uIENlcnRpZmljYXRl
3885	   IiwgImRlc2NyaXB0aW9uIjogIkNPVklELTE5IFZhY2NpbmF0aW9uIENlcnRpZmljYXRl
3886	   IiwgImNyZWRlbnRpYWxTdWJqZWN0IjogeyJfc2QiOiBbIjFWX0stOGxEUThpRlhCRlhi
3887	   Wlk5ZWhxUjRIYWJXQ2k1VDB5Ykl6WlBld3ciLCAiSnpqTGd0UDI5ZFAtQjN0ZDEyUDY3
3888	   NGdGbUsyenk4MUhNdEJnZjZDSk5XZyIsICJSMmZHYmZBMDdaX1lsa3FtTlp5bWExeHl5
3889	   eDFYc3RJaVM2QjFZYmwySlo0IiwgIlRDbXpybDdLMmdldl9kdTdwY01JeXpSTEhwLVll
3890	   Zy1GbF9jeHRyVXZQeGciLCAiVjdrSkJMSzc4VG1WRE9tcmZKN1p1VVBIdUtfMmNjN3la
3891	   UmE0cVYxdHh3TSIsICJiMGVVc3ZHUC1PRERkRm9ZNE5semxYYzN0RHNsV0p0Q0pGNzVO
3892	   dzhPal9nIiwgInpKS19lU01YandNOGRYbU1aTG5JOEZHTTA4ekozX3ViR2VFTUotNVRC
3893	   eTAiXSwgInZhY2NpbmUiOiB7Il9zZCI6IFsiMWNGNWhMd2toTU5JYXFmV0pyWEk3Tk1X
3894	   ZWRMLTlmNlkyUEE1MnlQalNaSSIsICJIaXk2V1d1ZUxENWJuMTYyOTh0UHY3R1hobWxk
3895	   TURPVG5CaS1DWmJwaE5vIiwgIkxiMDI3cTY5MWpYWGwtakM3M3ZpOGViT2o5c214M0Mt
3896	   X29nN2dBNFRCUUUiXSwgInR5cGUiOiAiVmFjY2luZSJ9LCAicmVjaXBpZW50IjogeyJf
3897	   c2QiOiBbIjFsU1FCTlkyNHEwVGg2T0d6dGhxLTctNGw2Y0FheHJZWE9HWnBlV19sbkEi
3898	   LCAiM256THE4MU0yb04wNndkdjFzaEh2T0VKVnhaNUtMbWREa0hFREpBQldFSSIsICJQ
3899	   bjFzV2kwNkc0TEpybm4tX1JUMFJiTV9IVGR4blBKUXVYMmZ6V3ZfSk9VIiwgImxGOXV6
3900	   ZHN3N0hwbEdMYzcxNFRyNFdPN01HSnphN3R0N1FGbGVDWDRJdHciXSwgInR5cGUiOiAi
3901	   VmFjY2luZVJlY2lwaWVudCJ9LCAidHlwZSI6ICJWYWNjaW5hdGlvbkV2ZW50In0sICJf
3902	   c2RfYWxnIjogInNoYS0yNTYiLCAiY25mIjogeyJqd2siOiB7Imt0eSI6ICJFQyIsICJj
3903	   cnYiOiAiUC0yNTYiLCAieCI6ICJUQ0FFUjE5WnZ1M09IRjRqNFc0dmZTVm9ISVAxSUxp
3904	   bERsczd2Q2VHZW1jIiwgInkiOiAiWnhqaVdXYlpNUUdIVldLVlE0aGJTSWlyc1ZmdWVj
3905	   Q0U2dDRqVDlGMkhaUSJ9fX0.uiqzysGXtv-RtXz2e_3_aaOwH-gFyka4ayLABsBJHvkR
3906	   FQVq80nc64EyClCWwKQeu--6CYk4RklkWLZ80ZnAzA~WyJQYzMzSk0yTGNoY1VfbEhnZ
3907	   3ZfdWZRIiwgIm9yZGVyIiwgIjMvMyJd~WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwg
3908	   ImRhdGVPZlZhY2NpbmF0aW9uIiwgIjIwMjEtMDYtMjNUMTM6NDA6MTJaIl0~WyIyR0xD
3909	   NDJzS1F2ZUNmR2ZyeU5STjl3IiwgImF0Y0NvZGUiLCAiSjA3QlgwMyJd~WyJlbHVWNU9
3910	   nM2dTTklJOEVZbnN4QV9BIiwgIm1lZGljaW5hbFByb2R1Y3ROYW1lIiwgIkNPVklELTE
3911	   5IFZhY2NpbmUgTW9kZXJuYSJd~eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImtiK2p3dC
3912	   J9.eyJub25jZSI6ICIxMjM0NTY3ODkwIiwgImF1ZCI6ICJodHRwczovL3ZlcmlmaWVyL
3913	   mV4YW1wbGUub3JnIiwgImlhdCI6IDE3NDcwNzc2MDYsICJzZF9oYXNoIjogInMyM2pzU
3914	   kdHaEcwYkVHVUlkYWZLVTI1VnRiNkZIem5ydG9LbWhWX3FDaWcifQ.MB570tNTQFQF8x
3915	   v-Uer0bvlspO81GBItejKsKryZ2hYYSIaTesw7kCqX0qoxYTqH6pLn8zllPmLD_52hem
3916	   HHpA

3918	   After the validation, the Verifier will have the following processed
3919	   SD-JWT payload available for further handling:

3921	   {
3922	     "@context": [
3923	       "https://www.w3.org/2018/credentials/v1",
3924	       "https://w3id.org/vaccination/v1"
3925	     ],
3926	     "type": [
3927	       "VerifiableCredential",
3928	       "VaccinationCertificate"
3929	     ],
3930	     "issuer": "https://example.com/issuer",
3931	     "issuanceDate": "2023-02-09T11:01:59Z",
3932	     "expirationDate": "2028-02-08T11:01:59Z",
3933	     "name": "COVID-19 Vaccination Certificate",
3934	     "description": "COVID-19 Vaccination Certificate",
3935	     "credentialSubject": {
3936	       "vaccine": {
3937	         "type": "Vaccine",
3938	         "atcCode": "J07BX03",
3939	         "medicinalProductName": "COVID-19 Vaccine Moderna"
3940	       },
3941	       "recipient": {
3942	         "type": "VaccineRecipient"
3943	       },
3944	       "type": "VaccinationEvent",
3945	       "order": "3/3",
3946	       "dateOfVaccination": "2021-06-23T13:40:12Z"
3947	     },
3948	     "cnf": {
3949	       "jwk": {
3950	         "kty": "EC",
3951	         "crv": "P-256",
3952	         "x": "TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc",
3953	         "y": "ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ"
3954	       }
3955	     }
3956	   }

3958	A.5.  Elliptic Curve Key Used in the Examples

3960	   The following Elliptic Curve public key, represented in JWK format,
3961	   can be used to validate the Issuer signatures in the above examples:

3963	   {
3964	     "kty": "EC",
3965	     "crv": "P-256",
3966	     "x": "b28d4MwZMjw8-00CG4xfnn9SLMVMM19SlqZpVb_uNtQ",
3967	     "y": "Xv5zWwuoaTgdS6hV43yI6gBwTnjukmFQQnJ_kCxzqk8"
3968	   }
3969	   The public key used to validate a Key Binding JWT can be found in the
3970	   examples as the content of the cnf claim.

3972	Appendix B.  Disclosure Format Considerations

3974	   As described in Section 4.2, the Disclosure structure is JSON
3975	   containing salt and the cleartext content of a claim, which is
3976	   base64url encoded.  The encoded value is the input used to calculate
3977	   a digest for the respective claim.  The inclusion of digest value in
3978	   the signed JWT ensures the integrity of the claim value.  Using
3979	   encoded content as the input to the integrity mechanism is
3980	   conceptually similar to the approach in JWS and particularly useful
3981	   when the content, like JSON, can have different representations but
3982	   is semantically equivalent, thus avoiding canonicalization.  Some
3983	   further discussion of the considerations around this design decision
3984	   follows.

3986	   When receiving an SD-JWT, a Verifier must be able to re-compute
3987	   digests of the disclosed claim values and, given the same input
3988	   values, obtain the same digest values as signed by the Issuer.

3990	   Usually, JSON-based formats transport claim values as simple
3991	   properties of a JSON object such as this:

3993	   ...
3994	     "family_name": "Möbius",
3995	     "address": {
3996	       "street_address": "Schulstr. 12",
3997	       "locality": "Schulpforta"
3998	     }
3999	   ...

4001	   However, a problem arises when computation over the data needs to be
4002	   performed and verified, like signing or computing digests.  Common
4003	   signature schemes require the same byte string as input to the
4004	   signature verification as was used for creating the signature.  In
4005	   the digest approach outlined above, the same problem exists: for the
4006	   Issuer and the Verifier to arrive at the same digest, the same byte
4007	   string must be hashed.

4009	   JSON, however, does not prescribe a unique encoding for data, but
4010	   allows for variations in the encoded string.  The data above, for
4011	   example, can be encoded as
4012	   ...
4013	   "family_name": "M\u00f6bius",
4014	   "address": {
4015	     "street_address": "Schulstr. 12",
4016	     "locality": "Schulpforta"
4017	   }
4018	   ...

4020	   or as

4022	  ...
4023	  "family_name": "Möbius",
4024	  "address": {"locality":"Schulpforta", "street_address":"Schulstr. 12"}
4025	  ...

4027	   The two representations of the value in family_name are very
4028	   different on the byte-level, but yield equivalent objects.  Same for
4029	   the representations of address, varying in white space and order of
4030	   elements in the object.

4032	   The variations in white space, ordering of object properties, and
4033	   encoding of Unicode characters are all allowed by the JSON
4034	   specification, including further variations, e.g., concerning
4035	   floating-point numbers, as described in [RFC8785].  Variations can be
4036	   introduced whenever JSON data is serialized or deserialized and
4037	   unless dealt with, will lead to different digests and the inability
4038	   to verify signatures.

4040	   There are generally two approaches to deal with this problem:

4042	   1.  Canonicalization: The data is transferred in JSON format,
4043	       potentially introducing variations in its representation, but is
4044	       transformed into a canonical form before computing a digest.
4045	       Both the Issuer and the Verifier must use the same
4046	       canonicalization algorithm to arrive at the same byte string for
4047	       computing a digest.
4048	   2.  Source string hardening: Instead of transferring data in a format
4049	       that may introduce variations, a representation of the data is
4050	       serialized.  This representation is then used as the hashing
4051	       input at the Verifier, but also transferred to the Verifier and
4052	       used for the same digest calculation there.  This means that the
4053	       Verifier can easily compute and check the digest of the byte
4054	       string before finally deserializing and accessing the data.

4056	   Mixed approaches are conceivable, i.e., transferring both the
4057	   original JSON data plus a string suitable for computing a digest, but
4058	   such approaches can easily lead to undetected inconsistencies
4059	   resulting in time-of-check-time-of-use type security vulnerabilities.

4061	   In this specification, the source string hardening approach is used,
4062	   as it allows for simple and reliable interoperability without the
4063	   requirement for a canonicalization library.  To harden the source
4064	   string, any serialization format that supports the necessary data
4065	   types could be used in theory, like protobuf, msgpack, or pickle.  In
4066	   this specification, JSON is used and plaintext contents of each
4067	   Disclosure are encoded using base64url-encoding for transport.  This
4068	   approach means that SD-JWTs can be implemented purely based on widely
4069	   available JWT, JSON, and Base64 encoding and decoding libraries.

4071	   A Verifier can then easily check the digest over the source string
4072	   before extracting the original JSON data.  Variations in the encoding
4073	   of the source string are implicitly tolerated by the Verifier, as the
4074	   digest is computed over a predefined byte string and not over a JSON
4075	   object.

4077	   It is important to note that the Disclosures are neither intended nor
4078	   suitable for direct consumption by an application that needs to
4079	   access the disclosed claim values after the verification by the
4080	   Verifier.  The Disclosures are only intended to be used by a Verifier
4081	   to check the digests over the source strings and to extract the
4082	   original JSON data.  The original JSON data is then used by the
4083	   application.  See Section 7.3 for details.

4085	Appendix C.  Document History

4087	   [[ To be removed from the final specification ]]

4089	   -19

4091	   *  Attempt to improve some language around exactly what bytes get
4092	      base64url encoded
4093	   *  Update the ABNF to something that is cleaner and more idiomatic
4094	   *  updates from AD's review of comments

4096	   -18

4098	   *  Update PID example to align with the latest ARF and update the ARF
4099	      reference
4100	   *  Editorial updates from SECDIR IETF LC review
4101	   *  Terminology improvements around the phrase "non-selectively
4102	      disclosable claims" and "not disclosable"
4103	   *  Suggest against using extra claims/headers in the KB-JWT without a
4104	      good reason

4106	   -17

4108	   *  Acknowledgements updates
4109	   -16

4111	   *  Updates following review of -15 by Hannes Tschofenig, document
4112	      shepherd
4113	   *  Editorial updates to text introduced in -15
4114	   *  Changes based on feedback received after the end of the second
4115	      working group last call

4117	   -15

4119	   *  Additions and adjustments to privacy considerations
4120	   *  Address AD review comments resulting from evaluation of formal
4121	      appeal
4122	   *  Clarify language around compromised/coerced verifiers

4124	   -14

4126	   *  Address WGLC (part 2) comments
4127	   *  Note that the Hash Function Claim value is case-sensitive
4128	   *  Update the typ value in the SD-JWT VC example to dc+sd-jwt to
4129	      align with anticipated changes in the SD-JWT VC draft.

4131	   -13

4133	   *  WGLC (part 1) updates
4134	   *  Rewrote introduction
4135	   *  Added note on algorithm for Holder's verification of the SD-JWT

4137	   -12

4139	   *  Clarify, add context, or otherwise improve the examples
4140	   *  Editorial and reference fixes
4141	   *  Better introduce the phrase processed SD-JWT payload in the end of
4142	      Section 7.1 on Verifying the SD-JWT
4143	   *  Moved considerations around unlinkability to the top of the
4144	      Privacy Considerations section
4145	   *  Remove the brief discussion of publishing private key(s) to
4146	      attempt to reduce the value of leaked or stolen data

4148	   -11

4150	   *  Add a paragraph attempting to better frame the risks and
4151	      difficulties around Issuer/Verifier unlinkability (i.e., a
4152	      government issuer or huge service provider compelling collusion)
4153	   *  Tightened the exposition

4155	   -10
4156	   *  Add a section clarifying recursive disclosures and their
4157	      interdependencies
4158	   *  Editorial updates/fixes

4160	   -09

4162	   *  Distinguished SD-JWT from SD-JWT+KB
4163	   *  Provide ABNF for the SD-JWT, SD-JWT+KB, and various constituent
4164	      parts
4165	   *  New structure for JSON-serialized SD-JWTs/KB-JWTs to better align
4166	      with JAdES.
4167	   *  Attempt to better explain how salt in the Disclosure makes
4168	      guessing the preimage of the digest infeasible
4169	   *  Consolidate salt entropy and length security consideration
4170	      subsections
4171	   *  Unnumbered most of the examples for improved clarity
4172	   *  More definitive language around the exclusive use of the cnf claim
4173	      for enabling Key Binding

4175	   -08

4177	   *  Make RFCs 0020 and 7515 normative references
4178	   *  Be a bit more prescriptive in suggesting RFC7800 cnf/jwk be used
4179	      to convey the Key Binding key
4180	   *  Editorial changes aimed at improved clarity
4181	   *  Improve unlinkability considerations, mention that different KB
4182	      keys must be used
4183	   *  Remove the explicit prohibition on HMAC
4184	   *  Remove mention of unspecified key binding methods and the
4185	      Enveloping SD-JWTs section
4186	   *  Editorial updates aimed at more consistent treatment of a
4187	      Disclosure vs the contents of a Disclosure
4188	   *  Update PID example
4189	   *  Be more explicit that the VCDM and SD-JWT VC examples are only
4190	      illustrative and do not define anything

4192	   -07

4194	   *  Reference RFC4086 in security considerations about salt entropy
4195	   *  Update change controller for the Structured Syntax Suffix
4196	      registration from IESG to IETF per IANA suggestion
4197	   *  Strengthen security considerations around claims controlling the
4198	      validity of the SD-JWT not being selectively disclosable
4199	   *  Expand/rework considerations on the choice of hash algorithm
4200	   *  Clarify validation around no duplicate digests in the payload
4201	      (directly or recursively) and no unused disclosures at the end of
4202	      processing
4203	   *  Better describe and illustrate the tilde separated format
4204	   *  Change claim name from _sd_hash to sd_hash

4206	   -06

4208	   *  Added hash of Issuer-signed part and Disclosures in KB-JWT
4209	   *  Fix minor issues in some examples
4210	   *  Added IANA media type registration request for the JSON
4211	      Serialization
4212	   *  More precise wording around storing artifacts with sensitive data
4213	   *  The claim name _sd or ... must not be used in a disclosure.
4214	   *  Added JWT claims registration requests to IANA
4215	   *  Ensure claims that control validity are checked after decoding
4216	      payload
4217	   *  Restructure sections around data formats and Example 1
4218	   *  Update JSON Serialization to remove the kb_jwt member and allow
4219	      for the disclosures to be conveyed elsewhere
4220	   *  Expand the Enveloping SD-JWTs section to also discuss enveloping
4221	      JSON serialized SD-JWTs

4223	   -05

4225	   *  Consolidate processing rules for Holder and Verifier
4226	   *  Add support for selective disclosure of array elements.
4227	   *  Consolidate SD-JWT terminology and format
4228	   *  Use the term Key Binding rather than Holder Binding
4229	   *  Defined the structure of the Key Binding JWT
4230	   *  Added a JWS JSON Serialization
4231	   *  Added initial IANA media type and structured suffix registration
4232	      requests
4233	   *  Added recommendation for explicit typing of SD-JWTs
4234	   *  Added considerations around forwarding credentials
4235	   *  Removed Example 2b and merged the demo of decoy digests into
4236	      Example 2a
4237	   *  Improved example for allowed variations in Disclosures
4238	   *  Added some text to the Abstract and Introduction to be more
4239	      inclusive of JWS with JSON
4240	   *  Added some security considerations text about the scope of the Key
4241	      Binding JWT
4242	   *  Aligned examples structure and used the term input JWT Claims Set
4243	   *  Replaced the general SD-JWT VC example with one based on Person
4244	      Identification Data (PID) from the European Digital Identity
4245	      Wallet Architecture and Reference Framework
4246	   *  Added/clarified some privacy considerations in Confidentiality
4247	      during Transport
4248	   *  No longer recommending a claim name for enveloped SD-JWTs
4249	   *  Mention prospective future PQ algs for JWS
4250	   *  Include the public key in the draft, which can be used to verify
4251	      the issuer signature examples

4253	   *  Clarify that _sd_alg can only be at the top level of the SD-JWT
4254	      payload
4255	   *  Externalized the SD-JWT library that generates examples
4256	   *  Attempt to improve description of security properties

4258	   -04

4260	   *  Improve description of processing of disclosures

4262	   -03

4264	   *  Clarify that other specifications may define enveloping multiple
4265	      Combined Formats for Presentation
4266	   *  Add an example of W3C vc-data-model that uses a JSON-LD object as
4267	      the claims set
4268	   *  Clarify requirements for the combined formats for issuance and
4269	      presentation
4270	   *  Added overview of the Security Considerations section
4271	   *  Enhanced examples in the Privacy Considerations section
4272	   *  Allow for recursive disclosures
4273	   *  Discussion on holder binding and privacy of stored credentials
4274	   *  Add some context about SD-JWT being general-purpose despite being
4275	      a product of the OAuth WG
4276	   *  More explicitly say that SD-JWTs have to be signed asymmetrically
4277	      (no MAC and no none)
4278	   *  Make sha-256 the default hash algorithm, if the hash alg claim is
4279	      omitted
4280	   *  Use ES256 instead of RS256 in examples
4281	   *  Rename and move the c14n challenges section to an appendix
4282	   *  A bit more in security considerations for Choice of a Hash
4283	      Algorithm (1st & 2nd preimage resistant and not majorly truncated)
4284	   *  Remove the notational figures from the Concepts section
4285	   *  Change salt to always be a string (rather than any JSON type)
4286	   *  Fix the Document History (which had a premature list for -03)

4288	   -02

4290	   *  Disclosures are now delivered not as a JWT but as separate
4291	      base64url-encoded JSON objects.
4292	   *  In the SD-JWT, digests are collected under a _sd claim per level.
4293	   *  Terms "II-Disclosures" and "HS-Disclosures" are replaced with
4294	      "Disclosures".
4295	   *  Holder Binding is now separate from delivering the Disclosures and
4296	      implemented, if required, with a separate JWT.
4297	   *  Examples updated and modified to properly explain the specifics of
4298	      the new SD-JWT format.
4299	   *  Examples are now pulled in from the examples directory, not
4300	      inlined.

4302	   *  Updated and automated the W3C VC example.
4303	   *  Added examples with multibyte characters to show that the
4304	      specification and demo code work well with UTF-8.
4305	   *  reverted back to hash alg from digest derivation alg (renamed to
4306	      _sd_alg)
4307	   *  reformatted

4309	   -01

4311	   *  introduced blinded claim names
4312	   *  explained why JSON-encoding of values is needed
4313	   *  explained merging algorithm ("processing model")
4314	   *  generalized hash alg to digest derivation alg which also enables
4315	      HMAC to calculate digests
4316	   *  _sd_hash_alg renamed to sd_digest_derivation_alg
4317	   *  Salt/Value Container (SVC) renamed to Issuer-Issued Disclosures
4318	      (II-Disclosures)
4319	   *  SD-JWT-Release (SD-JWT-R) renamed to Holder-Selected Disclosures
4320	      (HS-Disclosures)
4321	   *  sd_disclosure in II-Disclosures renamed to sd_ii_disclosures
4322	   *  sd_disclosure in HS-Disclosures renamed to sd_hs_disclosures
4323	   *  clarified relationship between sd_hs_disclosure and SD-JWT
4324	   *  clarified combined formats for issuance and presentation
4325	   *  clarified security requirements for blinded claim names
4326	   *  improved description of Holder Binding security considerations -
4327	      especially around the usage of "alg=none".
4328	   *  updated examples
4329	   *  text clarifications
4330	   *  fixed cnf structure in examples
4331	   *  added feature summary

4333	   -00

4335	   *  Upload as draft-ietf-oauth-selective-disclosure-jwt-00

4337	   [[ pre Working Group Adoption: ]]

4339	   -02

4341	   *  Added acknowledgements
4342	   *  Improved Security Considerations
4343	   *  Stressed entropy requirements for salts
4344	   *  Python reference implementation clean-up and refactoring
4345	   *  hash_alg renamed to _sd_hash_alg

4347	   -01

4349	   *  Editorial fixes
4350	   *  Added hash_alg claim
4351	   *  Renamed _sd to sd_digests and sd_release
4352	   *  Added descriptions on Holder Binding - more work to do
4353	   *  Clarify that signing the SD-JWT is mandatory

4355	   -00

4357	   *  Renamed to SD-JWT (focus on JWT instead of JWS since signature is
4358	      optional)
4359	   *  Make Holder Binding optional
4360	   *  Rename proof to release, since when there is no signature, the
4361	      term "proof" can be misleading
4362	   *  Improved the structure of the description
4363	   *  Described verification steps
4364	   *  All examples generated from python demo implementation
4365	   *  Examples for structured objects

4367	Authors' Addresses

4369	   Daniel Fett
4370	   Authlete
4371	   Email: mail@danielfett.de
4372	   URI:   https://danielfett.de/

4374	   Kristina Yasuda
4375	   Keio University
4376	   Email: kristina@sfc.keio.ac.jp

4378	   Brian Campbell
4379	   Ping Identity
4380	   Email: bcampbell@pingidentity.com









