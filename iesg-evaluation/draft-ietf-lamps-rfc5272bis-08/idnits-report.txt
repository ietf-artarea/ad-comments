idnits 2.17.1 

draft-ietf-lamps-rfc5272bis-08.txt:

  Showing Errors (**), Flaws (~~), Warnings (==), and Comments (--).
  Errors MUST be fixed before draft submission.  Flaws SHOULD be fixed before draft submission.

  Checking boilerplate required by RFC 5378 and the IETF Trust (see
  https://trustee.ietf.org/license-info):
  ----------------------------------------------------------------------------

     No issues found here.

  Checking nits according to https://www.ietf.org/id-info/1id-guidelines.txt:
  ----------------------------------------------------------------------------

     No issues found here.

  Running in submission checking mode -- *not* checking nits according to
  https://www.ietf.org/id-info/checklist .
  ----------------------------------------------------------------------------


     No nits found.

--------------------------------------------------------------------------------


2	Limited Additional Mechanisms for PKIX and SMIME           J. Mandel, Ed
3	Internet-Draft                                              AKAYLA, Inc.
4	Obsoletes: 5272, 6402 (if approved)                        S. Turner, Ed
5	Intended status: Standards Track                                   sn3rd
6	Expires: 2 March 2026                                     29 August 2025

8	                 Certificate Management over CMS (CMC)
9	                     draft-ietf-lamps-rfc5272bis-08

11	Abstract

13	   This document defines the base syntax for CMC, a Certificate
14	   Management protocol using the Cryptographic Message Syntax (CMS).
15	   This protocol addresses two immediate needs within the Internet
16	   Public Key Infrastructure (PKI) community:

18	   1.  The need for an interface to public key certification products
19	       and services based on CMS and PKCS #10 (Public Key Cryptography
20	       Standard), and

22	   2.  The need for a PKI enrollment protocol for encryption-only keys
23	       due to algorithm or hardware design.

25	   CMC also requires the use of the transport document and the
26	   requirements usage document along with this document for a full
27	   definition.

29	   This document obsoletes RFC 5272 and RFC 6402.

31	About This Document

33	   This note is to be removed before publishing as an RFC.

35	   Status information for this document may be found at
36	   https://datatracker.ietf.org/doc/draft-ietf-lamps-rfc5272bis/.

38	   Discussion of this document takes place on the Limited Additional
39	   Mechanisms for PKIX and SMIME Working Group mailing list
40	   (mailto:spasm@ietf.org), which is archived at
41	   https://mailarchive.ietf.org/arch/browse/spasm/.  Subscribe at
42	   https://www.ietf.org/mailman/listinfo/spasm/.

44	   Source for this draft and an issue tracker can be found at
45	   https://github.com/seanturner/cmcbis.

47	Status of This Memo

49	   This Internet-Draft is submitted in full conformance with the
50	   provisions of BCP 78 and BCP 79.

52	   Internet-Drafts are working documents of the Internet Engineering
53	   Task Force (IETF).  Note that other groups may also distribute
54	   working documents as Internet-Drafts.  The list of current Internet-
55	   Drafts is at https://datatracker.ietf.org/drafts/current/.

57	   Internet-Drafts are draft documents valid for a maximum of six months
58	   and may be updated, replaced, or obsoleted by other documents at any
59	   time.  It is inappropriate to use Internet-Drafts as reference
60	   material or to cite them other than as "work in progress."

62	   This Internet-Draft will expire on 2 March 2026.

64	Copyright Notice

66	   Copyright (c) 2025 IETF Trust and the persons identified as the
67	   document authors.  All rights reserved.

69	   This document is subject to BCP 78 and the IETF Trust's Legal
70	   Provisions Relating to IETF Documents (https://trustee.ietf.org/
71	   license-info) in effect on the date of publication of this document.
72	   Please review these documents carefully, as they describe your rights
73	   and restrictions with respect to this document.  Code Components
74	   extracted from this document must include Revised BSD License text as
75	   described in Section 4.e of the Trust Legal Provisions and are
76	   provided without warranty as described in the Revised BSD License.

78	   This document may contain material from IETF Documents or IETF
79	   Contributions published or made publicly available before November
80	   10, 2008.  The person(s) controlling the copyright in some of this
81	   material may not have granted the IETF Trust the right to allow
82	   modifications of such material outside the IETF Standards Process.
83	   Without obtaining an adequate license from the person(s) controlling
84	   the copyright in such materials, this document may not be modified
85	   outside the IETF Standards Process, and derivative works of it may
86	   not be created outside the IETF Standards Process, except to format
87	   it for publication as an RFC or to translate it into languages other
88	   than English.

90	Table of Contents

92	   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
93	     1.1.  Protocol Requirements . . . . . . . . . . . . . . . . . .   5
94	     1.2.  Requirements Terminology  . . . . . . . . . . . . . . . .   5
95	     1.3.  Changes from RFC 2797 . . . . . . . . . . . . . . . . . .   6
96	     1.4.  Updates Made by RFC 6402  . . . . . . . . . . . . . . . .   6
97	     1.5.  Changes Since RFC 6402  . . . . . . . . . . . . . . . . .   7
98	   2.  Protocol Overview . . . . . . . . . . . . . . . . . . . . . .   8
99	     2.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   9
100	     2.2.  Protocol Requests/Responses . . . . . . . . . . . . . . .  10
101	   3.  PKI Requests  . . . . . . . . . . . . . . . . . . . . . . . .  12
102	     3.1.  Simple PKI Request  . . . . . . . . . . . . . . . . . . .  12
103	     3.2.  Full PKI Request  . . . . . . . . . . . . . . . . . . . .  13
104	       3.2.1.  PKIData Content Type  . . . . . . . . . . . . . . . .  15
105	       3.2.2.  Body Part Identification  . . . . . . . . . . . . . .  23
106	       3.2.3.  CMC Unsigned Data Attribute . . . . . . . . . . . . .  24
107	   4.  PKI Responses . . . . . . . . . . . . . . . . . . . . . . . .  25
108	     4.1.  Simple PKI Response . . . . . . . . . . . . . . . . . . .  25
109	     4.2.  Full PKI Response . . . . . . . . . . . . . . . . . . . .  25
110	       4.2.1.  PKIResponse Content Type  . . . . . . . . . . . . . .  26
111	   5.  Application of Encryption to a PKI Request/Response . . . . .  27
112	   6.  Controls  . . . . . . . . . . . . . . . . . . . . . . . . . .  28
113	     6.1.  CMC Status Info Controls  . . . . . . . . . . . . . . . .  31
114	       6.1.1.  Extended CMC Status Info Control  . . . . . . . . . .  31
115	       6.1.2.  CMC Status Info Control . . . . . . . . . . . . . . .  33
116	       6.1.3.  CMCStatus Values  . . . . . . . . . . . . . . . . . .  34
117	       6.1.4.  CMCFailInfo . . . . . . . . . . . . . . . . . . . . .  35
118	     6.2.  Identification and Identity Proof Controls  . . . . . . .  37
119	       6.2.1.  Identity Proof Version 2 Control  . . . . . . . . . .  37
120	       6.2.2.  Identity Proof Control  . . . . . . . . . . . . . . .  39
121	       6.2.3.  Identification Control  . . . . . . . . . . . . . . .  39
122	       6.2.4.  Hardware Shared-Secret Token Generation . . . . . . .  40
123	     6.3.  Linking Identity and POP Information  . . . . . . . . . .  40
124	       6.3.1.  Cryptographic Linkage . . . . . . . . . . . . . . . .  41
125	       6.3.2.  Shared-Secret/Subject DN Linking  . . . . . . . . . .  43
126	       6.3.3.  Existing Certificate Linking  . . . . . . . . . . . .  43
127	     6.4.  Data Return Control . . . . . . . . . . . . . . . . . . .  44
128	     6.5.  RA Certificate Modification Controls  . . . . . . . . . .  45
129	       6.5.1.  Modify Certification Request Control  . . . . . . . .  45
130	       6.5.2.  Add Extensions Control  . . . . . . . . . . . . . . .  46
131	     6.6.  Transaction Identifier Control and Sender and Recipient
132	            Nonce Controls . . . . . . . . . . . . . . . . . . . . .  48
133	     6.7.  Encrypted and Decrypted POP Controls  . . . . . . . . . .  49
134	     6.8.  RA POP Witness Control  . . . . . . . . . . . . . . . . .  53
135	     6.9.  Get Certificate Control . . . . . . . . . . . . . . . . .  53
136	     6.10. Get CRL Control . . . . . . . . . . . . . . . . . . . . .  54
137	     6.11. Revocation Request Control  . . . . . . . . . . . . . . .  55
138	     6.12. Registration and Response Information Controls  . . . . .  57
139	     6.13. Query Pending Control . . . . . . . . . . . . . . . . . .  57
140	     6.14. Confirm Certificate Acceptance Control  . . . . . . . . .  58
141	     6.15. Publish Trust Anchors Control . . . . . . . . . . . . . .  59
142	     6.16. Authenticated Data Control  . . . . . . . . . . . . . . .  60
143	     6.17. Batch Request and Response Controls . . . . . . . . . . .  61
144	     6.18. Publication Information Control . . . . . . . . . . . . .  62
145	     6.19. Control Processed Control . . . . . . . . . . . . . . . .  63
146	     6.20. RA Identity Proof Witness Control . . . . . . . . . . . .  64
147	     6.21. Response Body Control . . . . . . . . . . . . . . . . . .  65
148	   7.  Other Attributes  . . . . . . . . . . . . . . . . . . . . . .  66
149	     7.1.  Change Subject Name Attribute . . . . . . . . . . . . . .  66
150	   8.  Registration Authorities  . . . . . . . . . . . . . . . . . .  68
151	     8.1.  Encryption Removal  . . . . . . . . . . . . . . . . . . .  69
152	     8.2.  Signature Layer Removal . . . . . . . . . . . . . . . . .  69
153	   9.  CMC Infrastucture Certificate Requirements  . . . . . . . . .  70
154	     9.1.  Extended Key Usage  . . . . . . . . . . . . . . . . . . .  70
155	     9.2.  Subject Information Access  . . . . . . . . . . . . . . .  70
156	   10. Security Considerations . . . . . . . . . . . . . . . . . . .  71
157	   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  73
158	   12. References  . . . . . . . . . . . . . . . . . . . . . . . . .  74
159	     12.1.  Normative References . . . . . . . . . . . . . . . . . .  74
160	     12.2.  Informative References . . . . . . . . . . . . . . . . .  75
161	   Appendix A.  ASN.1 Modules  . . . . . . . . . . . . . . . . . . .  77
162	     A.1.  ASN.1 Module for CMC  . . . . . . . . . . . . . . . . . .  77
163	     A.2.  ASN.1 Module for PBKDF2 PRFs  . . . . . . . . . . . . . .  90
164	   Appendix B.  Enrollment Message Flows . . . . . . . . . . . . . .  93
165	     B.1.  Request of a Signing Certificate  . . . . . . . . . . . .  93
166	     B.2.  Single Certification Request, But Modified by RA  . . . .  94
167	     B.3.  Direct POP for an RSA or KEM Certificate  . . . . . . . .  97
168	     B.4.  Direct POP with No Signature Mechanism  . . . . . . . . . 101
169	   Appendix C.  Production of Diffie-Hellman Public Key Certification
170	           Requests  . . . . . . . . . . . . . . . . . . . . . . . . 105
171	     C.1.  No-Signature Signature Mechanism  . . . . . . . . . . . . 105
172	   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . . 106
173	   Contributors  . . . . . . . . . . . . . . . . . . . . . . . . . . 106
174	   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . 106

176	1.  Introduction

178	   This document defines the base syntax for CMC, a Certificate
179	   Management protocol using the Cryptographic Message Syntax (CMS).
180	   This protocol addresses two immediate needs within the Internet PKI
181	   community:

183	   1.  The need for an interface to public key certification products
184	       and services based on CMS and PKCS #10, and

186	   2.  The need for a PKI enrollment protocol for encryption-only keys
187	       due to algorithm or hardware design.

189	   A small number of additional services are defined to supplement the
190	   core certification request service.

192	   This document obsoletes RFC 5272 [CMC-PROTv1] and RFC 6402
193	   [CMC-Updates].

195	1.1.  Protocol Requirements

197	   The protocol must be based as much as possible on the existing CMS,
198	   PKCS #10 [PKCS10] and CRMF (Certificate Request Message Format)
199	   [CRMF] specifications.

201	   The protocol must support the current industry practice of a PKCS #10
202	   certification request followed by a PKCS#7 "certs-only" response as a
203	   subset of the protocol.

205	   The protocol must easily support the multi-key enrollment protocols
206	   required by S/MIME and other groups.

208	   The protocol must supply a way of doing all enrollment operations in
209	   a single round trip.  When this is not possible the number of round
210	   trips is to be minimized.

212	   The protocol must be designed such that all key generation can occur
213	   on the client.

215	   Support must exist for the mandatory algorithms used by S/MIME.
216	   Support should exist for all other algorithms cited by the S/MIME
217	   core documents.

219	   The protocol must contain Proof-of-Possession (POP) methods.
220	   Optional provisions for multiple round trip POP will be made if
221	   necessary.

223	   The protocol must support deferred and pending responses to
224	   enrollment requests for cases where external procedures are required
225	   to issue a certificate.

227	1.2.  Requirements Terminology

229	   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
230	   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
231	   "OPTIONAL" in this document are to be interpreted as described in
232	   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
233	   capitals, as shown here.

235	1.3.  Changes from RFC 2797

237	   We have done a major overhaul on the layout of the document.  This
238	   included two different steps.  Firstly we removed some sections from
239	   the document and moved them to two other documents.  Information on
240	   how to transport our messages are now found in [CMC-TRANS].
241	   Information on which controls and sections of this document must be
242	   implemented along with which algorithms are required can now be found
243	   in [CMC-COMPL].

245	   A number of new controls have been added in this version:

247	      Extended CMC Status Info Section 6.1.1

249	      Publish Trust Anchors Section 6.15

251	      Authenticate Data Section 6.16

253	      Batch Request and Response Processing Section 6.17

255	      Publication Information Section 6.18

257	      Modify Certification Request Section 6.5.1

259	      Control Processed Section 6.19

261	      Identity Proof Section 6.2.2

263	      Identity POP Link Witness V2 Section 6.3.1.1

265	1.4.  Updates Made by RFC 6402

267	   Two new controls have been added:

269	      RA Identity Witness allows for an RA to perform identity checking
270	      using the identity and shared-secret, and then tell any following
271	      servers that the identity check was successfully performed.

273	      Response Body allows for an RA to identify a nested response for
274	      an EE to process.

276	   Created a new attribute, Change Subject Name, that allows a client to
277	   request a change in the subject name and subject alternate name
278	   fields in a certificate.

280	   Added Extended Key Usages for CMC to distinguish server types.

282	   Defined a new Subject Information Access type to hold locations to
283	   contact the CMC server.

285	   Clarified that the use of a pre-existing certificate is not limited
286	   to just renewal and rekey messages and is required for support.  This
287	   formalizes a requirement for the ability to do renewal and rekey that
288	   previously was implicit.

290	1.5.  Changes Since RFC 6402

292	   Merged [CMC-Updates] text.

294	   Included the following errata: [erratum8385], [erratum8137],
295	   [erratum8027], [erratum7629], [erratum7628], [erratum7627],
296	   [erratum7379], [erratum6571], [erratum5931], [erratum4775],
297	   [erratum2731], and [erratum2063].

299	   Addressed [erratum3943] for RFC 6402.

301	   To support adopting SHA-256 and HMAC-SHA256, maca-hMAC-SHA256 was
302	   added to POPAlgs and mda-sha256 was added to WitnessAlgs.  Both were
303	   included in the example in Appendix B.

305	   Updated Encrypted and Decrypted POP Controls section to use HMAC-
306	   SHA256.

308	   Updated the ASN.1 module to use the 2002 ASN.1 module from
309	   [CMC-Updates].

311	   Modified the ASN.1 module for CMC (A.1) to allow the import of ASN.1
312	   Module for PBKDF2 PRFs.

314	   Added a direct POP example to address management of KEM certificates.

316	   Added id-ce-subjectKeyIdentifier to examples.

318	   Clarified that subjectKeyIdentifier choice used with id-alg-
319	   noSignature.

321	   Update CMC Control Attribute Table to include raIdentityWitness and
322	   responseBody from RFC 6402

324	2.  Protocol Overview

326	   A PKI enrollment transaction in this specification is generally
327	   composed of a single round trip of messages.  In the simplest case a
328	   PKI enrollment request, henceforth referred to as a PKI Request, is
329	   sent from the client to the server and a PKI enrollment response,
330	   henceforth referred to as a PKI Response, is then returned from the
331	   server to the client.  In more complicated cases, such as delayed
332	   certificate issuance, more than one round trip is required.

334	   This specification defines two PKI Request types and two PKI Response
335	   types.

337	   PKI Requests are formed using either the PKCS #10 or CRMF structure.
338	   The two PKI Requests are:

340	      Simple PKI Request:  the bare PKCS #10 (in the event that no other
341	         services are needed), and

343	      Full PKI Request:  one or more PKCS #10, CRMF or Other Request
344	         Messages structures wrapped in a CMS encapsulation as part of a
345	         PKIData.

347	   PKI Responses are based on SignedData or AuthenticatedData [CMS].
348	   The two PKI Responses are

350	      Simple PKI Response:  a "certs-only" SignedData (in the event no
351	         other services are needed), or

353	      Full PKI Response:  a PKIResponse content type wrapped in a
354	         SignedData.

356	   No special services are provided for either renewal (i.e., a new
357	   certificate with the same key) or rekey (i.e., a new certificate with
358	   a new key) of client certificates.  Instead renewal and rekey
359	   requests look the same as any certification request, except that the
360	   identity proof is supplied by existing certificates from a trusted
361	   CA.  (This is usually the same CA, but could be a different CA in the
362	   same organization where naming is shared.)

364	   No special services are provided to distinguish between a rekey
365	   request and a new certification request (generally for a new
366	   purpose).  A control to unpublish a certificate would normally be
367	   included in a rekey request, and be omitted in a new certification
368	   request.  CAs or other publishing agents are also expected to have
369	   policies for removing certificates from publication either based on
370	   new certificates being added or the expiration or revocation of a
371	   certificate.

373	   A provision exists for RAs to participate in the protocol by taking
374	   PKI Requests, wrapping them in a second layer of PKI Request with
375	   additional requirements or statements from the RA and then passing
376	   this new expanded PKI Request on to the CA.

378	   This specification makes no assumptions about the underlying
379	   transport mechanism.  The use of CMS does not imply an email-based
380	   transport.  Several different possible transport methods are defined
381	   in [CMC-TRANS].

383	   Optional services available through this specification are
384	   transaction management, replay detection (through nonces), deferred
385	   certificate issuance, certificate revocation requests and
386	   certificate/certificate revocation list (CRL) retrieval.

388	2.1.  Terminology

390	   There are several different terms, abbreviations, and acronyms used
391	   in this document.  These are defined here, in no particular order,
392	   for convenience and consistency of usage:

394	      End-Entity (EE) refers to the entity that owns a key pair and
395	         for whom a certificate is issued.

397	      Registration Authority (RA) or Local RA (LRA) refers to an
398	         entity that acts as an intermediary between the EE and the CA.
399	         Multiple RAs can exist between the end-entity and the
400	         Certification Authority.  RAs may perform additional services
401	         such as key generation or key archival.  This document uses the
402	         term RA for both RA and LRA.

404	      Certification Authority (CA) refers to the entity that issues
405	         certificates.

407	      Client refers to an entity that creates a PKI Request.  In this
408	         document, both RAs and EEs can be clients.

410	      Server refers to the entities that process PKI Requests and
411	         create PKI Responses.  In this document, both CAs and RAs can
412	         be servers.

414	      PKCS #10 refers to the Public Key Cryptography Standard #10
415	         [PKCS10] which defines a certification request syntax.

417	      CRMF refers to the Certificate Request Message Format RFC
418	         [CRMF].  CMC uses this certification request syntax defined in
419	         this document as part of the protocol.

421	      CMS refers to the Cryptographic Message Syntax RFC [CMS].  This
422	         document provides for basic cryptographic services including
423	         encryption and signing with and without key management.

425	      PKI Request/Response refers to the requests/responses described
426	         in this document.  PKI Requests include certification requests,
427	         revocation requests, etc.  PKI Responses include certs-only
428	         messages, failure messages, etc.

430	      Proof-of-Identity refers to the client proving they are who
431	         they say that they are to the server.

433	      Enrollment or certification request refers to the process of a
434	         client requesting a certificate.  A certification request is a
435	         subset of the PKI Requests.

437	      Proof-of-Possession (POP) refers to a value that can be used to
438	         prove that the private key corresponding to a public key is in
439	         the possession and can be used by an end-entity.  The different
440	         types of POP are:

442	      o  Signature provides the required POP by a signature operation
443	            over some data.

445	      o  Direct provides the required POP operation by an encrypted
446	            challenge/response mechanism.

448	      o  Indirect provides the required POP operation by returning
449	            the issued certificate in an encrypted state.  (This method
450	            is not used by CMC.)

452	      o  Publish provides the required POP operation by providing the
453	            private key to the certificate issuer.  (This method is not
454	            currently used by CMC.  It would be used by Key Generation
455	            or Key Escrow extensions.)

457	      o  Attested provides the required POP operation by allowing a
458	            trusted entity to assert that the POP has been proven by one
459	            of the above methods.

461	      Object IDentifier (OID) is a primitive type in Abstract Syntax
462	         Notation One (ASN.1).

464	2.2.  Protocol Requests/Responses

466	   Figure 1 shows the Simple PKI Requests and Responses.  The contents
467	   of Simple PKI Request and Response are detailed in Section 3.1 and
468	   Section 4.1.

470	   Simple PKI Request                      Simple PKI Response
471	   -------------------------               --------------------------

473	    +----------+                            +------------------+
474	    | PKCS #10 |                            | CMS ContentInfo  |
475	    +----------+--------------+             +------------------+------+
476	    | Certification Request   |             | CMS Signed Data,        |
477	    |                         |             |   no SignerInfo         |
478	    | Subject Name            |             |                         |
479	    | Subject Public Key Info |             | SignedData contains one |
480	    |   (K_PUB)               |             | or more certificates in |
481	    | Attributes              |             | the certificates field  |
482	    |                         |             | Relevant CA certs and   |
483	    +-----------+-------------+             | CRLs can be included    |
484	                | signed with |             | as well.                |
485	                | matching    |             |                         |
486	                | K_PRIV      |             | encapsulatedContentInfo |
487	                +-------------+             | is absent.              |
488	                                            +--------------+----------+
489	                                                           | unsigned |
490	                                                           +----------+

492	                Figure 1: Simple PKI Requests and Responses

494	   Figure 2 shows the Full PKI Requests and Responses.  The contents of
495	   the Full PKI Request and Response are detailed in Section 3.2 and
496	   Section 4.2.

498	   Full PKI Request                        Full PKI Response
499	   -----------------------                 ------------------------
500	    +----------------+                      +----------------+
501	    | CMS ContentInfo|                      | CMS ContentInfo|
502	    | CMS SignedData |                      | CMS SignedData |
503	    |   or Auth Data |                      |   or Auth Data |
504	    |     object     |                      |     object     |
505	    +----------------+--------+             +----------------+--------+
506	    |                         |             |                         |
507	    | PKIData                 |             | PKIResponse             |
508	    |                         |             |                         |
509	    | Sequence of:            |             | Sequence of:            |
510	    | <enrollment control>*   |             | <enrollment control>*   |
511	    | <certification request>*|             | <CMS object>*           |
512	    | <CMS object>*           |             | <other message>*        |
513	    | <other message>*        |             |                         |
514	    |                         |             | where * == zero or more |
515	    | where * == zero or more |             |                         |
516	    |                         |             | All certificates issued |
517	    | Certification requests  |             | as part of the response |
518	    | are CRMF, PKCS #10, or  |             | are included in the     |
519	    | Other.                  |             | "certificates" field    |
520	    |                         |             | of the SignedData.      |
521	    +-------+-----------------+             | Relevant CA certs and   |
522	            | signed (keypair |             | CRLs can be included as |
523	            | used may be pre-|             | well.                   |
524	            | existing or     |             |                         |
525	            | identified in   |             +---------+---------------+
526	            | the request)    |                       | signed by the |
527	            +-----------------+                       | CA or an LRA  |
528	                                                      +---------------+

530	                 Figure 2: Full PKI Requests and Responses

532	3.  PKI Requests

534	   Two types of PKI Requests exist.  This section gives the details for
535	   both types.

537	3.1.  Simple PKI Request

539	   A Simple PKI Request uses the PKCS #10 syntax CertificationRequest
540	   [PKCS10].

542	   When a server processes a Simple PKI Request, the PKI Response
543	   returned is:

545	      Simple PKI Response on success.

547	      Full PKI Response on failure.  The server MAY choose not to
548	         return a PKI Response in this case.

550	   The Simple PKI Request MUST NOT be used if a proof-of-identity needs
551	   to be included.

553	   The Simple PKI Request cannot be used if the private key is not
554	   capable of producing some type of signature (i.e., Diffie-Hellman
555	   (DH) and Elliptic Curve Diffie-Hellman (ECDH) keys can use the
556	   signature algorithms in [DH-POP] for production of the signature).

558	   The Simple PKI Request cannot be used for any of the advanced
559	   services specified in this document.

561	   The client MAY incorporate one or more X.509v3 extensions in any
562	   certification request based on PKCS #10 as an ExtensionReq attribute.
563	   The ExtensionReq attribute is defined as:

565	     ExtensionReq ::= SEQUENCE SIZE (1..MAX) OF Extension

567	   where Extension is imported from [PKIXCERT] and ExtensionReq is
568	   identified by:

570	     id-ExtensionReq OBJECT IDENTIFIER ::= { iso(1) member-body(2)
571	       us(840) rsadsi(113549) pkcs(1) pkcs-9(9) 14 }

573	   Servers MUST be able to process all extensions defined, but not
574	   prohibited, in [PKIXCERT].  Servers are not required to be able to
575	   process other X.509v3 extensions transmitted using this protocol, nor
576	   are they required to be able to process private extensions.  Servers
577	   are not required to put all client-requested extensions into a
578	   certificate.  Servers are permitted to modify client-requested
579	   extensions.  Servers MUST NOT alter an extension so as to invalidate
580	   the original intent of a client-requested extension.  (For example,
581	   changing key usage from keyAgreement to digitalSignature.)  If a
582	   certification request is denied due to the inability to handle a
583	   requested extension and a PKI Response is returned, the server MUST
584	   return a PKI Response with a CMCFailInfo value with the value
585	   unsupportedExt.

587	3.2.  Full PKI Request

589	   The Full PKI Request provides the most functionality and flexibility.

591	   The Full PKI Request is encapsulated in either a SignedData or an
592	   AuthenticatedData with an encapsulated content type of 'id-cct-
593	   PKIData' (Section 3.2.1).

595	   When a server processes a Full PKI Request, a PKI Response MUST be
596	   returned.  The PKI Response returned is:

598	      Simple PKI Response if the enrollment was successful and only
599	         certificates are returned.  (A CMCStatusInfoV2 control with
600	         success is implied.)

602	      Full PKI Response if the enrollment was successful and
603	         information is returned in addition to certificates, if the
604	         enrollment is pending, or if the enrollment failed.

606	   If SignedData is used, the signature can be generated using either
607	   the private key material of an embedded signature certification
608	   request (i.e., included in the TaggedRequest tcr or crm fields) or a
609	   previously certified signature key.  If the private key of a
610	   signature certification request is used, then:

612	   1.  The certification request containing the corresponding public key
613	       MUST include a Subject Key Identifier extension.

615	   2.  The subjectKeyIdentifier form of the signerIdentifier in
616	       SignerInfo MUST be used.

618	   3.  The value of the subjectKeyIdentifier form of SignerInfo MUST be
619	       the Subject Key Identifier specified in the corresponding
620	       certification request.  (The subjectKeyIdentifier form of
621	       SignerInfo is used here because no certificates have yet been
622	       issued for the signing key.)  If the request key is used for
623	       signing, there MUST be only one SignerInfo in the SignedData.

625	   If AuthenticatedData is used, then:

627	   1.  The Password Recipient Info option of RecipientInfo MUST be used.

629	   2.  A randomly generated key is used to compute the Message
630	       Authentication Code (MAC) value on the encapsulated content.

632	   3.  The input for the key derivation algorithm is a concatenation of
633	       the identifier (encoded as UTF8) and the shared-secret.

635	   When creating a PKI Request to renew or rekey a certificate:

637	   1.  The Identification and Identity Proof controls are absent.  The
638	       same information is provided by the use of an existing
639	       certificate from a CA when signing the PKI Request.  In this
640	       case, the CA that issued the original certificate and the CA the
641	       request is made to will usually be the same, but could have a
642	       common operator.

644	   2.  CAs and RAs can impose additional restrictions on the signing
645	       certificate used.  They may require that the most recently issued
646	       signing certificate for a client be used.

648	   3.  Some CAs may prevent renewal operations (i.e., reuse of the same
649	       keys).  In this case the CA MUST return a PKI Response with
650	       noKeyReuse as the CMCFailInfo failure code.

652	3.2.1.  PKIData Content Type

654	   The PKIData content type is used for the Full PKI Request.  A PKIData
655	   content type is identified by:

657	     id-cct-PKIData OBJECT IDENTIFIER ::= { id-pkix id-cct(12) 2 }

659	   The ASN.1 structure corresponding to the PKIData content type is:

661	     PKIData ::= SEQUENCE {
662	       controlSequence    SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
663	       reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,
664	       cmsSequence        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
665	       otherMsgSequence   SEQUENCE SIZE(0..MAX) OF OtherMsg
666	     }

668	   The fields in PKIData have the following meaning:

670	      controlSequence is a sequence of controls.  The controls
671	         defined in this document are found in Section 6.  Controls can
672	         be defined by other parties.  Details on the TaggedAttribute
673	         structure can be found in Section 3.2.1.1.

675	      reqSequence is a sequence of certification requests.  The
676	         certification requests can be a CertificationRequest (PKCS
677	         #10), a CertReqMsg (CRMF), or an externally defined PKI
678	         request.  Full details are found in Section 3.2.1.2.  If an
679	         externally defined certification request is present, but the
680	         server does not understand the certification request (or will
681	         not process it), a CMCStatus of noSupport MUST be returned for
682	         the certification request item and no other certification
683	         requests are processed.

685	      cmsSequence is a sequence of [CMS] message objects.  See
686	         Section 3.2.1.3 for more details.

688	      otherMsgSequence is a sequence of arbitrary data objects.  Data
689	         objects placed here are referred to by one or more controls.
690	         This allows for controls to use large amounts of data without
691	         the data being embedded in the control.  See Section 3.2.1.4
692	         for more details.

694	   All certification requests encoded into a single PKIData SHOULD be
695	   for the same identity.  RAs that batch process (see Section 6.17) are
696	   expected to place the PKI Requests received into the cmsSequence of a
697	   PKIData.

699	   Processing of the PKIData by a recipient is as follows:

701	   1.  All controls should be examined and processed in an appropriate
702	       manner.  The appropriate processing is to complete processing at
703	       this time, to ignore the control, or to place the control on a
704	       to-do list for later processing.  Controls can be processed in
705	       any order; the order in the sequence is not significant.

707	   2.  Items in the reqSequence are not referenced by a control.  These
708	       items, which are certification requests, also need to be
709	       processed.  As with controls, the appropriate processing can be
710	       either immediate processing or addition to a to-do list for later
711	       processing.

713	   3.  Finally, the to-do list is processed.  In many cases, the to-do
714	       list will be ordered by grouping specific tasks together.

716	   No processing is required for cmsSequence or otherMsgSequence members
717	   of PKIData if they are present and are not referenced by a control.
718	   In this case, the cmsSequence and otherMsgSequence members are
719	   ignored.

721	3.2.1.1.  Control Syntax

723	   The actions to be performed for a PKI Request/Response are based on
724	   the included controls.  Each control consists of an object identifier
725	   and a value based on the object identifier.

727	   The syntax of a control is:

729	     TaggedAttribute ::= SEQUENCE {
730	       bodyPartID         BodyPartID,
731	       attrType           OBJECT IDENTIFIER,
732	       attrValues         SET OF AttributeValue
733	     }

735	     AttributeValue ::= ANY

737	   The fields in TaggedAttribute have the following meaning:

739	      bodyPartID is a unique integer that identifies this control.

741	      attrType is the OID that identifies the control.

743	      attrValues is the data values used in processing the control.
744	         The structure of the data is dependent on the specific control.

746	   The final server MUST fail the processing of an entire PKIData if any
747	   included control is not recognized, that control is not already
748	   marked as processed by a Control Processed control (see Section 6.19)
749	   and no other error is generated.  The PKI Response MUST include a
750	   CMCFailInfo value with the value badRequest and the bodyList MUST
751	   contain the bodyPartID of the invalid or unrecognized control(s).  A
752	   server is the final server if and only if it is not passing the PKI
753	   Request on to another server.  A server is not considered to be the
754	   final server if the server would have passed the PKI Request on, but
755	   instead it returned a processing error.

757	   The controls defined by this document are found in Section 6.

759	3.2.1.2.  Certification Request Formats

761	   Certification Requests are based on PKCS #10, CRMF, or Other Request
762	   formats.  Section 3.2.1.2.1 specifies the requirements for clients
763	   and servers dealing with PKCS #10.  Section 3.2.1.2.2 specifies the
764	   requirements for clients and servers dealing with CRMF.
765	   Section 3.2.1.2.3 specifies the requirements for clients and servers
766	   dealing with Other Request.

768	     TaggedRequest ::= CHOICE {
769	       tcr               [0] TaggedCertificationRequest,
770	       crm               [1] CertReqMsg,
771	       orm               [2] SEQUENCE {
772	         bodyPartID            BodyPartID,
773	         requestMessageType    OBJECT IDENTIFIER,
774	         requestMessageValue   ANY DEFINED BY requestMessageType
775	       }
776	     }

778	   The fields in TaggedRequest have the following meaning:

780	      tcr is a certification request that uses the PKCS #10 syntax.
781	         Details on PKCS #10 are found in Section 3.2.1.2.1.

783	      crm is a certification request that uses the CRMF syntax.
784	         Details on CRMF are found in Section 3.2.1.2.2.

786	      orm is an externally defined certification request.  One
787	         example is an attribute certification request.  The fields of
788	         this structure are:

790	      o  bodyPartID is the identifier number for this certification
791	            request.  Details on body part identifiers are found in
792	            Section 3.2.2.

794	      o  requestMessageType identifies the other request type.  These
795	            values are defined outside of this document.

797	      o  requestMessageValue is the data associated with the other
798	            request type.

800	3.2.1.2.1.  PKCS #10 Certification Syntax

802	   A certification request based on PKCS #10 uses the following ASN.1
803	   structure:

805	     TaggedCertificationRequest ::= SEQUENCE {
806	       bodyPartID            BodyPartID,
807	       certificationRequest  CertificationRequest
808	     }

810	   The fields in TaggedCertificationRequest have the following meaning:

812	      bodyPartID is the identifier number for this certification
813	         request.  Details on body part identifiers are found in
814	         Section 3.2.2.

816	      certificationRequest contains the PKCS-#10-based certification
817	         request.  Its fields are described in [PKCS10].

819	   When producing a certification request based on PKCS #10, clients
820	   MUST produce the certification request with a subject name and public
821	   key.  Some PKI products are operated using a central repository of
822	   information to assign subject names upon receipt of a certification
823	   request.  To accommodate this mode of operation, the subject field in
824	   a CertificationRequest MAY be NULL, but MUST be present.  CAs that
825	   receive a CertificationRequest with a NULL subject field MAY reject
826	   such certification requests.  If rejected and a PKI Response is
827	   returned, the CA MUST return a PKI Response with the CMCFailInfo
828	   value with the value badRequest.

830	3.2.1.2.2.  CRMF Certification Syntax

832	   A CRMF message uses the following ASN.1 structure (defined in [CRMF]
833	   and included here for convenience):

835	     CertReqMsg ::= SEQUENCE {
836	       certReq   CertRequest,
837	       popo      ProofOfPossession  OPTIONAL,
838	       -- content depends upon key type
839	       regInfo   SEQUENCE SIZE(1..MAX) OF
840	                   AttributeTypeAndValue OPTIONAL }

842	     CertRequest ::= SEQUENCE {
843	       certReqId     INTEGER,
844	                       -- ID for matching request and reply
845	       certTemplate  CertTemplate,
846	                       -- Selected fields of cert to be issued
847	       controls      Controls OPTIONAL }
848	                       -- Attributes affecting issuance

850	     CertTemplate ::= SEQUENCE {
851	       version      [0] Version               OPTIONAL,
852	       serialNumber [1] INTEGER               OPTIONAL,
853	       signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
854	       issuer       [3] Name                  OPTIONAL,
855	       validity     [4] OptionalValidity      OPTIONAL,
856	       subject      [5] Name                  OPTIONAL,
857	       publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
858	       issuerUID    [7] UniqueIdentifier      OPTIONAL,
859	       subjectUID   [8] UniqueIdentifier      OPTIONAL,
860	       extensions   [9] Extensions            OPTIONAL }

862	   The fields in CertReqMsg are explained in [CRMF].

864	   This document imposes the following additional restrictions on the
865	   construction and processing of CRMF certification requests:

867	      When a Full PKI Request includes a CRMF certification request,
868	      both the subject and publicKey fields in the CertTemplate MUST be
869	      defined.  The subject field can be encoded as NULL, but MUST be
870	      present.

872	      When both CRMF and CMC controls exist with equivalent
873	      functionality, the CMC control SHOULD be used.  The CMC control
874	      MUST override the CRMF control.

876	      The regInfo field MUST NOT be used on a CRMF certification
877	      request.  Equivalent functionality is provided in the CMC regInfo
878	      control (Section 6.12).

880	      The indirect method of proving POP is not supported in this
881	      protocol.  One of the other methods (including the direct method
882	      described in this document) MUST be used.  The value of encrCert
883	      in SubsequentMessage MUST NOT be used.

885	      Since the subject and publicKeyValues are always present, the
886	      POPOSigningKeyInput MUST NOT be used when computing the value for
887	      POPSigningKey.

889	   A server is not required to use all of the values suggested by the
890	   client in the CRMF certification request.  Servers MUST be able to
891	   process all extensions defined, but not prohibited in [PKIXCERT].
892	   Servers are not required to be able to process other X.509v3
893	   extensions transmitted using this protocol, nor are they required to
894	   be able to process private extensions.  Servers are permitted to
895	   modify client-requested extensions.  Servers MUST NOT alter an
896	   extension so as to invalidate the original intent of a client-
897	   requested extension.  (For example, change key usage from
898	   keyAgreement to digitalSignature.)  If a certification request is
899	   denied due to the inability to handle a requested extension, the
900	   server MUST respond with a Full PKI Response with a CMCFailInfo value
901	   with the value of unsupportedExt.

903	3.2.1.2.3.  Other Certification Request

905	   This document allows for other certification request formats to be
906	   defined and used as well.  An example of an other certification
907	   request format is one for Attribute Certificates.  These other
908	   certification request formats are defined by specifying an OID for
909	   identification and the structure to contain the data to be passed.

911	3.2.1.3.  Content Info Objects

913	   The cmsSequence field of the PKIData and PKIResponse messages
914	   contains zero or more tagged content info objects.  The syntax for
915	   this structure is:

917	     TaggedContentInfo ::= SEQUENCE {
918	       bodyPartID              BodyPartID,
919	       contentInfo             ContentInfo
920	     }

922	   The fields in TaggedContentInfo have the following meaning:

924	      bodyPartID is a unique integer that identifies this content
925	         info object.

927	      contentInfo is a ContentInfo object (defined in [CMS]).

929	   The four content types used in cmsSequence are AuthenticatedData,
930	   Data, EnvelopedData, and SignedData.  All of these content types are
931	   defined in [CMS].

933	3.2.1.3.1.  Authenticated Data

935	   The AuthenticatedData content type provides a method of doing pre-
936	   shared-secret-based validation of data being sent between two
937	   parties.  Unlike SignedData, it does not specify which party actually
938	   generated the information.

940	   AuthenticatedData provides origination authentication in those
941	   circumstances where a shared-secret exists, but a PKI-based trust has
942	   not yet been established.  No PKI-based trust may have been
943	   established because a trust anchor has not been installed on the
944	   client or no certificate exists for a signing key.

946	   AuthenticatedData content type is used by this document for:

948	      The id-cmc-authData control (Section 6.16), and

950	      The top-level wrapper in environments where an encryption-only key
951	      is being certified or where a shared-secret exists, but a PKI-
952	      based trust (needed for SignedData) has not yet been established.

954	   This content type can include both PKIData and PKIResponse as the
955	   encapsulated content types.  These embedded content types can contain
956	   additional controls that need to be processed.

958	3.2.1.3.2.  Data

960	   The Data content type allows for general transport of unstructured
961	   data.

963	   The Data content type is used by this document for:

965	      Holding the encrypted random value y for POP proof in the
966	      encrypted POP control (see Section 6.7).

968	3.2.1.3.3.  Enveloped Data

970	   The EnvelopedData content type provides for shrouding of data.

972	   The EnvelopedData content type is the primary confidentiality method
973	   for sensitive information in this protocol.  EnvelopedData can
974	   provide encryption of an entire PKI Request (see Section 5).
975	   EnvelopedData can also be used to wrap private key material for key
976	   archival.  If the decryption on an EnvelopedData fails, a Full PKI
977	   Response is returned with a CMCFailInfo value of badMessageCheck and
978	   a bodyPartID of 0.

980	3.2.1.3.4.  Signed Data

982	   The SignedData content type provides for authentication and
983	   integrity.

985	   The SignedData content type is used by this document for:

987	      The outer wrapper for a PKI Request.

989	      The outer wrapper for a PKI Response.

991	   As part of processing a PKI Request/Response, the signature(s) MUST
992	   be verified.  If the signature does not verify and the PKI Request/
993	   Response contains anything other than a CMC Status Info control, a
994	   Full PKI Response containing a CMC Status Info control MUST be
995	   returned using a CMCFailInfo with a value of badMessageCheck and a
996	   bodyPartID of 0.

998	   For the PKI Response, SignedData allows the server to sign the
999	   returning data, if any exists, and to carry the certificates and CRLs
1000	   corresponding to the PKI Request.  If no data is being returned
1001	   beyond the certificates and CRLs, there is no 'eContent' field in the
1002	   'EncapsulatedContentInfo' and no 'SignerInfo'.

1004	   Only if the server is unable to sign the response (and unable to use
1005	   any RecipientInfo options of the AuthenticatedData content type), it
1006	   should send a negative response.  A Full PKI Response SignedData type
1007	   containing a CMC Status Info control MUST be returned using a
1008	   CMCFailInfo with a value of internalCAError and a bodyPartID of 0,
1009	   and the eContent field in the EncapsulatedContentInfo as well as
1010	   SignerInfo fields MUST NOT be populated.

1012	3.2.1.4.  Other Message Bodies

1014	   The otherMsgSequence field of the PKI Request/Response allows for
1015	   arbitrary data objects to be carried as part of a PKI Request/
1016	   Response.  This is intended to contain a data object that is not
1017	   already wrapped in a cmsSequence field Section 3.2.1.3.  The data
1018	   object is ignored unless a control references the data object by
1019	   bodyPartID.

1021	     OtherMsg ::= SEQUENCE {
1022	       bodyPartID        BodyPartID,
1023	       otherMsgType      OBJECT IDENTIFIER,
1024	       otherMsgValue     ANY DEFINED BY otherMsgType }

1026	   The fields in OtherMsg have the following meaning:

1028	      bodyPartID is the unique id identifying this data object.

1030	      otherMsgType is the OID that defines the type of message body.

1032	      otherMsgValue is the data.

1034	3.2.2.  Body Part Identification

1036	   Each element of a PKIData or PKIResponse has an associated body part
1037	   identifier.  The body part identifier is a 4-octet integer using the
1038	   ASN.1 of:

1040	     bodyIdMax INTEGER ::= 4294967295

1042	     BodyPartID ::= INTEGER(0..bodyIdMax)

1044	   Body part identifiers are encoded in the certReqIds field for
1045	   CertReqMsg objects (in a TaggedRequest) or in the bodyPartID field of
1046	   the other objects.  The body part identifier MUST be unique within a
1047	   single PKIData or PKIResponse.  Body part identifiers can be
1048	   duplicated in different layers (for example, a PKIData embedded
1049	   within another).

1051	   The bodyPartID value of 0 is reserved for use as the reference to the
1052	   current PKIData object.

1054	   Some controls, such as the Add Extensions control Section 6.5.2, use
1055	   the body part identifier in the pkiDataReference field to refer to a
1056	   PKI Request in the current PKIData.  Some controls, such as the
1057	   Extended CMC Status Info control Section 6.1.1, will also use body
1058	   part identifiers to refer to elements in the previous PKI Request/
1059	   Response.  This allows an error to be explicit about the control or
1060	   PKI Request to which the error applies.

1062	   A BodyPartList contains a list of body parts in a PKI Request/
1063	   Response (i.e., the Batch Request control in Section 6.17).  The
1064	   ASN.1 type BodyPartList is defined as:

1066	     BodyPartList ::= SEQUENCE SIZE (1..MAX) OF BodyPartID

1068	   A BodyPartPath contains a path of body part identifiers moving
1069	   through nesting (i.e., the Modify Certification Request control in
1070	   Section 6.5.1).  The ASN.1 type BodyPartPath is defined as:

1072	     BodyPartPath ::= SEQUENCE SIZE (1..MAX) OF BodyPartID

1074	3.2.3.  CMC Unsigned Data Attribute

1076	   There is sometimes a need to include data in a PKI Request designed
1077	   to be removed by an RA during processing.  An example of this is the
1078	   inclusion of an encrypted private key, where a Key Archive Agent
1079	   removes the encrypted private key before sending it on to the CA.
1080	   One side effect of this desire is that every RA that encapsulates
1081	   this information needs to move the data so that it is not covered by
1082	   that RA's signature.  (A client PKI Request encapsulated by an RA
1083	   cannot have a signed control removed by the Key Archive Agent without
1084	   breaking the RA's signature.)  The CMC Unsigned Data attribute
1085	   addresses this problem.

1087	   The CMC Unsigned Data attribute contains information that is not
1088	   directly signed by a client.  When an RA encounters this attribute in
1089	   the unsigned or unauthenticated attribute field of a request it is
1090	   aggregating, the CMC Unsigned Data attribute is removed from the
1091	   request prior to placing the request in a cmsSequence and placed in
1092	   the unsigned or unauthenticated attributes of the RA's signed or
1093	   authenticated data wrapper.

1095	   The CMC Unsigned Data attribute is identified by:

1097	     id-aa-cmc-unsignedData OBJECT IDENTIFIER ::= { id-aa 34 }

1099	   The CMC Unsigned Data attribute has the ASN.1 definition:

1101	     CMCUnsignedData ::= SEQUENCE {
1102	       bodyPartPath        BodyPartPath,
1103	       identifier          OBJECT IDENTIFIER,
1104	       content             ANY DEFINED BY identifier
1105	     }

1107	   The fields in CMCUnsignedData have the following meaning:

1109	      bodyPartPath is the path pointing to the control associated
1110	         with this data.  When an RA moves the control in an unsigned or
1111	         unauthenticated attribute up one level as part of wrapping the
1112	         data in a new SignedData or AuthenticatedData, the body part
1113	         identifier of the embedded item in the PKIData is prepended to
1114	         the bodyPartPath sequence.

1116	      identifier is the OID that defines the associated data.

1118	      content is the data.

1120	   There MUST be at most one CMC Unsigned Data attribute in the
1121	   UnsignedAttribute sequence of a SignerInfo or in the
1122	   UnauthenticatedAttribute sequence of an AuthenticatedData.
1123	   UnsignedAttribute consists of a set of values; the attribute can have
1124	   any number of values greater than zero in that set.  If the CMC
1125	   Unsigned Data attribute is in one SignerInfo or AuthenticatedData, it
1126	   MUST appear with the same values(s) in all SignerInfo and
1127	   AuthenticatedData items.

1129	4.  PKI Responses

1131	   Two types of PKI Responses exist.  This section gives the details on
1132	   both types.

1134	4.1.  Simple PKI Response

1136	   Clients MUST be able to process the Simple PKI Response.  The Simple
1137	   PKI Response consists of a SignedData with no EncapsulatedContentInfo
1138	   and no SignerInfo.  The certificates requested in the PKI Response
1139	   are returned in the certificate field of the SignedData.

1141	   Clients MUST NOT assume the certificates are in any order.  Servers
1142	   SHOULD include all intermediate certificates needed to form complete
1143	   certification paths to one or more trust anchors, not just the newly
1144	   issued certificate(s).  The server MAY additionally return CRLs in
1145	   the CRL bag.  Servers MAY include the self-signed certificates.
1146	   Clients MUST NOT implicitly trust included self-signed certificate(s)
1147	   merely due to its presence in the certificate bag.  In the event
1148	   clients receive a new self-signed certificate from the server,
1149	   clients SHOULD provide a mechanism to enable the user to use the
1150	   certificate as a trust anchor.  (The Publish Trust Anchors control
1151	   (Section 6.15) should be used in the event that the server intends
1152	   the client to accept one or more certificates as trust anchors.  This
1153	   requires the use of the Full PKI Response message.)

1155	4.2.  Full PKI Response

1157	   Clients MUST be able to process a Full PKI Response.

1159	   The Full PKI Response consists of a SignedData or AuthenticatedData
1160	   encapsulating a PKIResponse content type.  The certificates issued in
1161	   a PKI Response are returned in the certificates field of the
1162	   immediately encapsulating SignedData.

1164	   Clients MUST NOT assume the certificates are in any order.  Servers
1165	   SHOULD include all intermediate certificates needed to form complete
1166	   chains to one or more trust anchors, not just the newly issued
1167	   certificate(s).  The server MAY additionally return CRLs in the CRL
1168	   bag.  Servers MAY include self-signed certificates.  Clients MUST NOT
1169	   implicitly trust included self-signed certificate(s) merely due to
1170	   its presence in the certificate bag.  In the event clients receive a
1171	   new self-signed certificate from the server, clients MAY provide a
1172	   mechanism to enable the user to explicitly use the certificate as a
1173	   trust anchor.  (The Publish Trust Anchors control (Section 6.15)
1174	   exists for the purpose of allowing for distribution of trust anchor
1175	   certificates.  If a trusted anchor publishes a new trusted anchor,
1176	   this is one case where automated trust of the new trust anchor could
1177	   be allowed.)

1179	4.2.1.  PKIResponse Content Type

1181	   The PKIResponse content type is used for the Full PKI Response.  The
1182	   PKIResponse content type is identified by:

1184	     id-cct-PKIResponse OBJECT IDENTIFIER ::= { id-pkix id-cct(12) 3  }

1186	   The ASN.1 structure corresponding to the PKIResponse content type is:

1188	     PKIResponse ::= SEQUENCE {
1189	       controlSequence   SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
1190	       cmsSequence       SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
1191	       otherMsgSequence  SEQUENCE SIZE(0..MAX) OF OtherMsg
1192	       }

1194	       ResponseBody ::= PKIResponse

1196	   Note: In [RFC2797], this ASN.1 type was named ResponseBody.  It has
1197	   been renamed to PKIResponse for clarity and the old name kept as a
1198	   synonym.

1200	   The fields in PKIResponse have the following meaning:

1202	      controlSequence is a sequence of controls.  The controls
1203	         defined in this document are found in Section 6.  Controls can
1204	         be defined by other parties.  Details on the TaggedAttribute
1205	         structure are found in Section 3.2.1.1.

1207	      cmsSequence is a sequence of [CMS] message objects.  See
1208	         Section 3.2.1.3 for more details.

1210	      otherMsgSequence is a sequence of arbitrary data objects.  Data
1211	         objects placed here are referred to by one or more controls.
1212	         This allows for controls to use large amounts of data without
1213	         the data being embedded in the control.  See Section 3.2.1.4
1214	         for more details.

1216	   Processing of PKIResponse by a recipient is as follows:

1218	   1.  All controls should be examined and processed in an appropriate
1219	       manner.  The appropriate processing is to complete processing at
1220	       this time, to ignore the control, or to place the control on a
1221	       to-do list for later processing.

1223	   2.  Additional processing of non-element items includes the saving of
1224	       certificates and CRLs present in wrapping layers.  This type of
1225	       processing is based on the consumer of the element and should not
1226	       be relied on by generators.

1228	   No processing is required for cmsSequence or otherMsgSequence members
1229	   of the PKIResponse, if items are present and are not referenced by a
1230	   control.  In this case, the cmsSequence and otherMsgSequence members
1231	   are to be ignored.

1233	5.  Application of Encryption to a PKI Request/Response

1235	   There are occasions when a PKI Request or Response must be encrypted
1236	   in order to prevent disclosure of information in the PKI Request/
1237	   Response from being accessible to unauthorized entities.  This
1238	   section describes the means to encrypt Full PKI Requests and
1239	   Responses (Simple PKI Requests cannot be encrypted).  Data portions
1240	   of PKI Requests and Responses that are placed in the cmsSequence
1241	   field can be encrypted separately.

1243	   Confidentiality is provided by wrapping the PKI Request/Response (a
1244	   SignedData) in an EnvelopedData.  The nested content type in the
1245	   EnvelopedData is id-SignedData.  Note that this is different from S/
1246	   MIME where there is a MIME layer placed between the encrypted and
1247	   signed data.  It is recommended that if an EnvelopedData layer is
1248	   applied to a PKI Request/Response, a second signature layer be placed
1249	   outside of the EnvelopedData layer.  The following figure shows how
1250	   this nesting would be done:

1252	     Normal              Option 1                  Option 2
1253	     ------              --------                  --------
1254	      SignedData          EnvelopedData             SignedData
1255	        PKIData             SignedData                EnvelopedData
1256	                              PKIData                   SignedData
1257	                                                          PKIData

1259	   Note: PKIResponse can be substituted for PKIData in the above figure.

1261	   Options 1 and 2 prevent leakage of sensitive data by encrypting the
1262	   Full PKI Request/Response.  An RA that receives a PKI Request that it
1263	   cannot decrypt MAY reject the PKI Request unless it can process the
1264	   PKI Request without knowledge of the contents (i.e., all it does is
1265	   amalgamate multiple PKI Requests and forward them to a server).

1267	   After the RA removes the envelope and completes processing, it may
1268	   then apply a new EnvelopedData layer to protect PKI Requests for
1269	   transmission to the next processing agent.  Section 7 contains more
1270	   information about RA processing.

1272	   Full PKI Requests/Responses can be encrypted or transmitted in the
1273	   clear.  Servers MUST provide support for all three options.

1275	   Alternatively, an authenticated, secure channel could exist between
1276	   the parties that require confidentiality.  Clients and servers MAY
1277	   use such channels instead of the technique described above to provide
1278	   secure, private communication of Simple and Full PKI Requests/
1279	   Responses.

1281	6.  Controls

1283	   Controls are carried as part of both Full PKI Requests and Responses.
1284	   Each control is encoded as a unique OID followed by the data for the
1285	   control (see syntax in Section 3.2.1.1).  The encoding of the data is
1286	   based on the control.  Processing systems would first detect the OID
1287	   (TaggedAttribute attrType) and process the corresponding control
1288	   value (TaggedAttribute attrValues) prior to processing the message
1289	   body.

1291	   The OIDs are all defined under the following arc:

1293	     id-pkix OBJECT IDENTIFIER  ::= { iso(1) identified-organization(3)
1294	       dod(6) internet(1) security(5) mechanisms(5) pkix(7) }

1296	     id-cmc OBJECT IDENTIFIER ::= { id-pkix 7 }

1298	   The following table lists the names, OID, and syntactic structure for
1299	   each of the controls described in this document.

1301	   +==============================+========+===================+=======+
1302	   | Identifier Description       | OID    |ASN.1 Structure    |Section|
1303	   +==============================+========+===================+=======+
1304	   | id-cmc-statusInfo            | id-cmc |CMCStatusInfo      |6.1.2  |
1305	   |                              | 1      |                   |       |
1306	   +------------------------------+--------+-------------------+-------+
1307	   | id-cmc-identification        | id-cmc |UTF8String         |6.2.3  |
1308	   |                              | 2      |                   |       |
1309	   +------------------------------+--------+-------------------+-------+
1310	   | id-cmc-identityProof         | id-cmc |OCTET STRING       |6.2.2  |
1311	   |                              | 3      |                   |       |
1312	   +------------------------------+--------+-------------------+-------+
1313	   | id-cmc-dataReturn            | id-cmc |OCTET STRING       |6.4    |
1314	   |                              | 4      |                   |       |
1315	   +------------------------------+--------+-------------------+-------+
1316	   | id-cmc-transactionId         | id-cmc |INTEGER            |6.6    |
1317	   |                              | 5      |                   |       |
1318	   +------------------------------+--------+-------------------+-------+
1319	   | id-cmc-senderNonce           | id-cmc |OCTET STRING       |6.6    |
1320	   |                              | 6      |                   |       |
1321	   +------------------------------+--------+-------------------+-------+
1322	   | id-cmc-recipientNonce        | id-cmc |OCTET STRING       |6.6    |
1323	   |                              | 7      |                   |       |
1324	   +------------------------------+--------+-------------------+-------+
1325	   | id-cmc-addExtensions         | id-cmc |AddExtensions      |6.5.2  |
1326	   |                              | 8      |                   |       |
1327	   +------------------------------+--------+-------------------+-------+
1328	   | id-cmc-encryptedPOP          | id-cmc |EncryptedPOP       |6.7    |
1329	   |                              | 9      |                   |       |
1330	   +------------------------------+--------+-------------------+-------+
1331	   | id-cmc-decryptedPOP          | id-cmc |DecryptedPOP       |6.7    |
1332	   |                              | 10     |                   |       |
1333	   +------------------------------+--------+-------------------+-------+
1334	   | id-cmc-lraPOPWitness         | id-cmc |LraPOPWitness      |6.8    |
1335	   |                              | 11     |                   |       |
1336	   +------------------------------+--------+-------------------+-------+
1337	   | id-cmc-getCert               | id-cmc |GetCert            |6.9    |
1338	   |                              | 15     |                   |       |
1339	   +------------------------------+--------+-------------------+-------+
1340	   | id-cmc-getCRL                | id-cmc |GetCRL             |6.10   |
1341	   |                              | 16     |                   |       |
1342	   +------------------------------+--------+-------------------+-------+
1343	   | id-cmc-revokeRequest         | id-cmc |RevokeRequest      |6.11   |
1344	   |                              | 17     |                   |       |
1345	   +------------------------------+--------+-------------------+-------+
1346	   | id-cmc-regInfo               | id-cmc |OCTET STRING       |6.12   |
1347	   |                              | 18     |                   |       |
1348	   +------------------------------+--------+-------------------+-------+
1349	   | id-cmc-responseInfo          | id-cmc |OCTET STRING       |6.12   |
1350	   |                              | 19     |                   |       |
1351	   +------------------------------+--------+-------------------+-------+
1352	   | id-cmc-queryPending          | id-cmc |OCTET STRING       |6.13   |
1353	   |                              | 21     |                   |       |
1354	   +------------------------------+--------+-------------------+-------+
1355	   | id-cmc-popLinkRandom         | id-cmc |OCTET STRING       |6.3.1  |
1356	   |                              | 22     |                   |       |
1357	   +------------------------------+--------+-------------------+-------+
1358	   | id-cmc-popLinkWitness        | id-cmc |OCTET STRING       |6.3.1  |
1359	   |                              | 23     |                   |       |
1360	   +------------------------------+--------+-------------------+-------+
1361	   | id-cmc-popLinkWitnessV2      | id-cmc |OCTET STRING       |6.3.1.1|
1362	   |                              | 33     |                   |       |
1363	   +------------------------------+--------+-------------------+-------+
1364	   | id-cmc-confirmCertAcceptance | id-cmc |CMCCertId          |6.14   |
1365	   |                              | 24     |                   |       |
1366	   +------------------------------+--------+-------------------+-------+
1367	   | id-cmc-statusInfoV2          | id-cmc |CMCStatusInfoV2    |6.1.1  |
1368	   |                              | 25     |                   |       |
1369	   +------------------------------+--------+-------------------+-------+
1370	   | id-cmc-trustedAnchors        | id-cmc |PublishTrustAnchors|6.15   |
1371	   |                              | 26     |                   |       |
1372	   +------------------------------+--------+-------------------+-------+
1373	   | id-cmc-authData              | id-cmc |AuthPublish        |6.16   |
1374	   |                              | 27     |                   |       |
1375	   +------------------------------+--------+-------------------+-------+
1376	   | id-cmc-batchRequests         | id-cmc |BodyPartList       |6.17   |
1377	   |                              | 28     |                   |       |
1378	   +------------------------------+--------+-------------------+-------+
1379	   | id-cmc-batchResponses        | id-cmc |BodyPartList       |6.17   |
1380	   |                              | 29     |                   |       |
1381	   +------------------------------+--------+-------------------+-------+
1382	   | id-cmc-publishCert           | id-cmc |CMCPublicationInfo |6.18   |
1383	   |                              | 30     |                   |       |
1384	   +------------------------------+--------+-------------------+-------+
1385	   | id-cmc-modCertTemplate       | id-cmc |ModCertTemplate    |6.5.1  |
1386	   |                              | 31     |                   |       |
1387	   +------------------------------+--------+-------------------+-------+
1388	   | id-cmc-controlProcessed      | id-cmc |ControlsProcessed  |6.19   |
1389	   |                              | 32     |                   |       |
1390	   +------------------------------+--------+-------------------+-------+
1391	   | id-cmc-identityProofV2       | id-cmc |IdentityProofV2    |6.2.1  |
1392	   |                              | 34     |                   |       |
1393	   +------------------------------+--------+-------------------+-------+
1394	   | id-cmc-raIdentityWitness     | id-cmc |BodyPartPath       |6.20   |
1395	   |                              | 35     |                   |       |
1396	   +------------------------------+--------+-------------------+-------+
1397	   | id-cmc-responseBody          | id-cmc |BodyPartPath       |6.21   |
1398	   |                              | 37     |                   |       |
1399	   +------------------------------+--------+-------------------+-------+

1401	                      Table 1: CMC Control Attributes

1403	6.1.  CMC Status Info Controls

1405	   The CMC Status Info controls return information about the status of a
1406	   client/server request/response.  Two controls are described in this
1407	   section.  The Extended CMC Status Info control is the preferred
1408	   control; the CMC Status Info control is included for backwards
1409	   compatibility with RFC 2797.

1411	   Servers MAY emit multiple CMC status info controls referring to a
1412	   single body part.  Clients MUST be able to deal with multiple CMC
1413	   status info controls in a PKI Response.  Servers MUST use the
1414	   Extended CMC Status Info control, but MAY additionally use the CMC
1415	   Status Info control.  Clients MUST be able to process the Extended
1416	   CMC Status Info control.

1418	6.1.1.  Extended CMC Status Info Control

1420	   The Extended CMC Status Info control is identified by the OID:

1422	     id-cmc-statusInfoV2 OBJECT IDENTIFIER ::= { id-cmc 25 }

1424	   The Extended CMC Status Info control has the ASN.1 definition:

1426	      CMCStatusInfoV2 ::= SEQUENCE {
1427	         cMCStatus             CMCStatus,
1428	         bodyList              SEQUENCE SIZE (1..MAX) OF
1429	                                 BodyPartReference,
1430	         statusString          UTF8String OPTIONAL,
1431	         otherInfo             OtherStatusInfo OPTIONAL
1432	      }

1434	      OtherStatusInfo ::= CHOICE {
1435	         failInfo              CMCFailInfo,
1436	         pendInfo              PendInfo,
1437	         extendedFailInfo      [1] ExtendedFailInfo
1438	      }

1440	      PendInfo ::= SEQUENCE {
1441	         pendToken           OCTET STRING,
1442	         pendTime            GeneralizedTime
1443	      }

1445	      ExtendedFailInfo ::= SEQUENCE {
1446	         failInfoOID            OBJECT IDENTIFIER,
1447	         failInfoValue          ANY DEFINED BY failInfoOID
1448	      }

1450	     BodyPartReference ::= CHOICE {
1451	       bodyPartID           BodyPartID,
1452	       bodyPartPath         BodyPartPath
1453	      }

1455	   The fields in CMCStatusInfoV2 have the following meaning:

1457	      cMCStatus contains the returned status value.  Details are in
1458	         Section 6.1.3.

1460	      bodyList identifies the controls or other elements to which the
1461	         status value applies.  If an error is returned for a Simple PKI
1462	         Request, this field is the bodyPartID choice of
1463	         BodyPartReference with the single integer of value 1.

1465	      statusString contains additional description information.  This
1466	         string is human readable.

1468	      otherInfo contains additional information that expands on the
1469	         CMC status code returned in the cMCStatus field.

1471	   The fields in OtherStatusInfo have the following meaning:

1473	      failInfo is described in Section 6.1.4.  It provides an error
1474	         code that details what failure occurred.  This choice is
1475	         present only if cMCStatus contains the value failed.

1477	      pendInfo contains information about when and how the client
1478	         should request the result of this request.  It is present when
1479	         the cMCStatus is either pending or partial. pendInfo uses the
1480	         structure PendInfo, which has the fields:

1482	      o  pendToken is the token used in the Query Pending control
1483	            (Section 6.13).

1485	      o  pendTime contains the suggested time the server wants to be
1486	            queried about the status of the certification request.

1488	      extendedFailInfo includes application-dependent detailed error
1489	         information.  This choice is present only if cMCStatus contains
1490	         the value failed.  Caution should be used when defining new
1491	         values as they may not be correctly recognized by all clients
1492	         and servers.  The CMCFailInfo value of internalCAError may be
1493	         assumed if the extended error is not recognized.  This field
1494	         uses the type ExtendedFailInfo.  ExtendedFailInfo has the
1495	         fields:

1497	      o  failInfoOID contains an OID that is associated with a set of
1498	            extended error values.

1500	      o  failInfoValue contains an extended error code from the
1501	            defined set of extended error codes.

1503	   If the cMCStatus field is success, the Extended CMC Status Info
1504	   control MAY be omitted unless it is the only item in the response.

1506	6.1.2.  CMC Status Info Control

1508	   The CMC Status Info control is identified by the OID:

1510	     id-cmc-statusInfo OBJECT IDENTIFIER ::= { id-cmc 1 }

1512	   The CMC Status Info control has the ASN.1 definition:

1514	     CMCStatusInfo ::= SEQUENCE {
1515	       cMCStatus           CMCStatus,
1516	       bodyList            BodyPartList,
1517	       statusString        UTF8String OPTIONAL,
1518	       otherInfo           CHOICE {
1519	         failInfo            CMCFailInfo,
1520	         pendInfo            PendInfo } OPTIONAL
1521	       }

1523	   The fields in CMCStatusInfo have the following meaning:

1525	      cMCStatus contains the returned status value.  Details are in
1526	         Section 6.1.3.

1528	      bodyList contains the list of controls or other elements to
1529	         which the status value applies.  If an error is being returned
1530	         for a Simple PKI Request, this field contains a single integer
1531	         of value 1.

1533	      statusString contains additional description information.  This
1534	         string is human readable.

1536	      otherInfo provides additional information that expands on the
1537	         CMC status code returned in the cMCStatus field.

1539	      o  failInfo is described in Section 6.1.4.  It provides an
1540	            error code that details what failure occurred.  This choice
1541	            is present only if cMCStatus is failed.

1543	      o  pendInfo uses the PendInfo ASN.1 structure in Section 6.1.1.
1544	            It contains information about when and how the client should
1545	            request results of this request.  The pendInfo field MUST be
1546	            populated for a cMCStatus value of pending or partial.
1547	            Further details can be found in Section 6.1.1 (Extended CMC
1548	            Status Info Control) and Section 6.13 (Query Pending Control
1549	            ).

1551	   If the cMCStatus field is success, the CMC Status Info control MAY be
1552	   omitted unless it is the only item in the response.  If no status
1553	   exists for a Simple or Full PKI Request, then the value of success is
1554	   assumed.

1556	6.1.3.  CMCStatus Values

1558	   CMCStatus is a field in the Extended CMC Status Info and CMC Status
1559	   Info controls.  This field contains a code representing the success
1560	   or failure of a specific operation.  CMCStatus has the ASN.1
1561	   structure:

1563	     CMCStatus ::= INTEGER {
1564	       success                (0),
1565	       -- reserved            (1),
1566	       failed                 (2),
1567	       pending                (3),
1568	       noSupport              (4),
1569	       confirmRequired        (5),
1570	       popRequired            (6),
1571	       partial                (7)
1572	       }

1574	   The values of CMCStatus have the following meaning:

1576	      success indicates the request was granted or the action was
1577	         completed.

1579	      failed indicates the request was not granted or the action was
1580	         not completed.  More information is included elsewhere in the
1581	         response.

1583	      pending indicates the PKI Request has yet to be processed.  The
1584	         requester is responsible to poll back on this Full PKI request.
1585	         pending may only be returned for certification request
1586	         operations.

1588	      noSupport indicates the requested operation is not supported.

1590	      confirmRequired indicates a Confirm Certificate Acceptance
1591	         control (Section 6.14) must be returned before the certificate
1592	         can be used.

1594	      popRequired indicates a direct POP operation is required
1595	         (Section 6.3.1.3).

1597	      partial indicates a partial PKI Response is returned.  The
1598	         requester is responsible to poll back for the unfulfilled
1599	         portions of the Full PKI Request.

1601	6.1.4.  CMCFailInfo

1603	   CMCFailInfo is a field in the Extended CMC Status Info and CMC Status
1604	   Info controls.  CMCFailInfo conveys more detailed information
1605	   relevant to the interpretation of a failure condition.  The
1606	   CMCFailInfo has the following ASN.1 structure:

1608	     CMCFailInfo ::= INTEGER {
1609	       badAlg            (0),
1610	       badMessageCheck   (1),
1611	       badRequest        (2),
1612	       badTime           (3),
1613	       badCertId         (4),
1614	       unsupportedExt     (5),
1615	       mustArchiveKeys   (6),
1616	       badIdentity       (7),
1617	       popRequired       (8),
1618	       popFailed         (9),
1619	       noKeyReuse        (10),
1620	       internalCAError   (11),
1621	       tryLater          (12),
1622	       authDataFail      (13)
1623	       }

1625	   The values of CMCFailInfo have the following meanings:

1627	      badAlg indicates unrecognized or unsupported algorithm.

1629	      badMessageCheck indicates integrity check failed.

1631	      badRequest indicates transaction was not permitted or
1632	         supported.

1634	      badTime indicates message time field was not sufficiently close
1635	         to the system time.

1637	      badCertId indicates no certificate could be identified matching
1638	         the provided criteria.

1640	      unsupportedExt indicates a requested X.509 extension is not
1641	         supported by the recipient CA.

1643	      mustArchiveKeys indicates private key material must be
1644	         supplied.

1646	      badIdentity indicates identification control failed to verify.

1648	      popRequired indicates server requires a POP proof before
1649	         issuing certificate.

1651	      popFailed indicates POP processing failed.

1653	      noKeyReuse indicates server policy does not allow key reuse.

1655	      internalCAError indicates that the CA had an unknown internal
1656	         failure.

1658	      tryLater indicates that the server is not accepting requests at
1659	         this time and the client should try at a later time.

1661	      authDataFail indicates failure occurred during processing of
1662	         authenticated data.

1664	   If additional failure reasons are needed, they SHOULD use the
1665	   ExtendedFailureInfo item in the Extended CMC Status Info control.
1666	   However, for closed environments they can be defined using this type.
1667	   Such codes MUST be in the range from 1000 to 1999.

1669	6.2.  Identification and Identity Proof Controls

1671	   Some CAs and RAs require that a proof-of-identity be included in a
1672	   certification request.  Many different ways of doing this exist with
1673	   different degrees of security and reliability.  Most are familiar
1674	   with a bank's request to provide your mother's maiden name as a form
1675	   of identity proof.  The reasoning behind requiring a proof-of-
1676	   identity can be found in Appendix C of [CRMF].

1678	   CMC provides a method to prove the client's identity based on a
1679	   client/server shared-secret.  If clients support the Full PKI
1680	   Request, clients MUST implement this method of identity proof
1681	   (Section 6.2.2).  Servers MUST provide this method, but MAY
1682	   additionally support bilateral methods of similar strength.

1684	   This document also provides an Identification control
1685	   (Section 6.2.3).  This control is a simple method to allow a client
1686	   to state who they are to the server.  Generally, a shared-secret AND
1687	   an identifier of that shared-secret are passed from the server to the
1688	   client.  The identifier is placed in the Identification control, and
1689	   the shared-secret is used to compute the Identity Proof control.

1691	6.2.1.  Identity Proof Version 2 Control

1693	   The Identity Proof Version 2 control is identified by the OID:

1695	     id-cmc-identityProofV2 OBJECT IDENTIFIER ::= { id-cmc 34 }

1697	   The Identity Proof Version 2 control has the ASN.1 definition:

1699	     IdentifyProofV2 ::= SEQUENCE {
1700	       hashAlgID        AlgorithmIdentifier,
1701	       macAlgID         AlgorithmIdentifier,
1702	       witness          OCTET STRING
1703	       }

1705	   The fields of IdentityProofV2 have the following meaning:

1707	      hashAlgID is the identifier and parameters for the hash
1708	         algorithm used to convert the shared-secret into a key for the
1709	         MAC algorithm.

1711	      macAlgID is the identifier and the parameters for the message
1712	         authentication code algorithm used to compute the value of the
1713	         witness field.

1715	      witness is the identity proof.

1717	   The required method starts with an out-of-band transfer of a token
1718	   (the shared-secret).  The shared-secret should be generated in a
1719	   random manner.  The distribution of this token is beyond the scope of
1720	   this document.  The client then uses this token for an identity proof
1721	   as follows:

1723	   1.  The PKIData reqSequence field (encoded exactly as it appears in
1724	       the Full PKI Request including the sequence type and length) is
1725	       the value to be validated.

1727	   2.  A hash of the shared-secret as a UTF8 string is computed using
1728	       hashAlgID.

1730	   3.  A MAC is then computed using the value produced in Step 1 as the
1731	       message and the value from Step 2 as the key.

1733	   4.  The result from Step 3 is then encoded as the witness value in
1734	       the Identity Proof Version 2 control.

1736	   When the server verifies the Identity Proof Version 2 control, it
1737	   computes the MAC value in the same way and compares it to the witness
1738	   value contained in the PKI Request.

1740	   If a server fails the verification of an Identity Proof Version 2
1741	   control, the CMCFailInfo value MUST be present in the Full PKI
1742	   Response and MUST have a value of badIdentity.

1744	   Reuse of the shared-secret on certification request retries allows
1745	   the client and server to maintain the same view of acceptable
1746	   identity proof values.  However, reuse of the shared-secret can
1747	   potentially open the door for some types of attacks.

1749	   Implementations MUST be able to support tokens at least 16 characters
1750	   long.  Guidance on the amount of entropy actually obtained from a
1751	   given length token based on character sets can be found in Appendix A
1752	   of [PASSWORD].

1754	6.2.2.  Identity Proof Control

1756	   The Identity Proof control is identified by the OID:

1758	     id-cmc-identityProof OBJECT IDENTIFIER ::= { id-cmc 3 }

1760	   The Identity Proof control has the ASN.1 definition:

1762	     IdentifyProof ::= OCTET STRING

1764	   This control is processed in the same way as the Identity Proof
1765	   Version 2 control.  In this case, the hash algorithm is fixed to
1766	   SHA-1 and the MAC algorithm is fixed to HMAC-SHA1.

1768	6.2.3.  Identification Control

1770	   Optionally, servers MAY require the inclusion of the unprotected
1771	   Identification control with an Identification Proof control.  The
1772	   Identification control is intended to contain a text string that
1773	   assists the server in locating the shared-secret needed to validate
1774	   the contents of the Identity Proof control.  If the Identification
1775	   control is included in the Full PKI Request, the derivation of the
1776	   key in Step 2 (from Section 6.2.1) is altered so that the hash of the
1777	   concatenation of the shared-secret and the UTF8 identity value
1778	   (without the type and length bytes) are hashed rather than just the
1779	   shared-secret.

1781	   The Identification control is identified by the OID:

1783	     id-cmc-identification OBJECT IDENTIFIER ::= { id-cmc 2 }

1785	   The Identification control has the ASN.1 definition:

1787	     Identification ::= UTF8String

1789	6.2.4.  Hardware Shared-Secret Token Generation

1791	   The shared-secret between the EE and the server is sometimes computed
1792	   using a hardware device that generates a series of tokens.  The EE
1793	   can therefore prove its identity by transferring this token in plain
1794	   text along with a name string.  The above protocol can be used with a
1795	   hardware shared-secret token generation device by the following
1796	   modifications:

1798	   1.  The Identification control MUST be included and MUST contain the
1799	       hardware-generated token.

1801	   2.  The shared-secret value used above is the same hardware-generated
1802	       token.

1804	   3.  All certification requests MUST have a subject name, and the
1805	       subject name MUST contain the fields required to identify the
1806	       holder of the hardware token device.

1808	   4.  The entire certification request MUST be shrouded in some fashion
1809	       to prevent eavesdropping.  Although the token is time critical,
1810	       an active eavesdropper cannot be permitted to extract the token
1811	       and submit a different certification request with the same token
1812	       value.

1814	6.3.  Linking Identity and POP Information

1816	   In a CMC Full PKI Request, identity proof information about the
1817	   client is carried in the certificate associated with the signature of
1818	   the SignedData containing the certification requests, one of the two
1819	   identity proof controls or the MAC computed for the AuthenticatedData
1820	   containing the certification requests.  Proof-of-possession (POP)
1821	   information for key pairs, however, is carried separately for each
1822	   PKCS #10 or CRMF certification request.  (For keys capable of
1823	   generating a digital signature, the POP is provided by the signature
1824	   on the PKCS #10 or CRMF request.  For encryption-only keys, the
1825	   controls described in Section 6.7 are used.)  In order to prevent
1826	   substitution-style attacks, the protocol must guarantee that the same
1827	   entity supplied both the POP and proof-of-identity information.

1829	   We describe three mechanisms for linking identity and POP
1830	   information: witness values cryptographically derived from a shared-
1831	   secret (Section 6.3.1), shared-secret/subject name matching
1832	   (Section 6.3.2) , and subject name matching to an existing
1833	   certificate (Section 6.3.3) .  Clients and servers MUST support the
1834	   witness value and the certificate linking techniques.  Clients and
1835	   servers MAY support shared-secret/name matching or MAY support other
1836	   bilateral techniques of similar strength.  The idea behind the first
1837	   two mechanisms is to force the client to sign some data into each
1838	   certification request that can be directly associated with the
1839	   shared-secret; this will defeat attempts to include certification
1840	   requests from different entities in a single Full PKI Request.

1842	6.3.1.  Cryptographic Linkage

1844	   The first technique that links identity and POP information forces
1845	   the client to include a piece of information cryptographically
1846	   derived from the shared-secret as a signed extension within each
1847	   certification request (PKCS #10 or CRMF).

1849	6.3.1.1.  POP Link Witness Version 2 Controls

1851	   The POP Link Witness Version 2 control is identified by the OID:

1853	     id-cmc-popLinkWitnessV2 OBJECT IDENTIFIER ::= { id-cmc 33 }

1855	   The POP Link Witness Version 2 control has the ASN.1 definition:

1857	     PopLinkWitnessV2 ::= SEQUENCE {
1858	       keyGenAlgorithm   AlgorithmIdentifier,
1859	       macAlgorithm      AlgorithmIdentifier,
1860	       witness           OCTET STRING
1861	       }

1863	   The fields of PopLinkWitnessV2 have the following meanings:

1865	      keyGenAlgorithm contains the algorithm used to generate the key
1866	         for the MAC algorithm.  This will generally be a hash
1867	         algorithm, but could be a more complex algorithm.

1869	      macAlgorithm contains the algorithm used to create the witness
1870	         value.

1872	      witness contains the computed witness value.

1874	   This technique is useful if null subject DNs are used (because, for
1875	   example, the server can generate the subject DN for the certificate
1876	   based only on the shared-secret).  Processing begins when the client
1877	   receives the shared-secret out-of-band from the server.  The client
1878	   then computes the following values:

1880	   1.  The client generates a random byte-string, R, which SHOULD be at
1881	       least 512 bits in length.

1883	   2.  The key is computed from the shared-secret using the algorithm in
1884	       keyGenAlgorithm.

1886	   3.  A MAC is then computed over the random value produced in Step 1,
1887	       using the key computed in Step 2.

1889	   4.  The random value produced in Step 1 is encoded as the value of a
1890	       POP Link Random control.  This control MUST be included in the
1891	       Full PKI Request.

1893	   5.  The MAC value produced in Step 3 is placed in either the POP Link
1894	       Witness control or the witness field of the POP Link Witness V2
1895	       control.

1897	       *  For CRMF, the POP Link Witness/POP Link Witness V2 control is
1898	          included in the controls field of the CertRequest structure.

1900	       *  For PKCS #10, the POP Link Witness/POP Link Witness V2 control
1901	          is included in the attributes field of the
1902	          CertificationRequestInfo structure.

1904	   Upon receipt, servers MUST verify that each certification request
1905	   contains a copy of the POP Link Witness/POP Link Witness V2 control
1906	   and that its value was derived using the above method from the
1907	   shared-secret and the random string included in the POP Link Random
1908	   control.

1910	   The Identification control (Section 6.2.3) or the subject DN of a
1911	   certification request can be used to help identify which shared-
1912	   secret was used.

1914	6.3.1.2.  POP Link Witness Control

1916	   The POP Link Witness control is identified by the OID:

1918	     id-cmc-popLinkWitness OBJECT IDENTIFIER ::= { id-cmc 23 }

1920	   The POP Link Witness control has the ASN.1 definition:

1922	     PopLinkWitness ::= OCTET STRING

1924	   For this control, SHA-1 is used as the key generation algorithm.
1925	   HMAC-SHA1 is used as the mac algorithm.

1927	6.3.1.3.  POP Link Random Control

1929	   The POP Link Random control is identified by the OID:

1931	     id-cmc-popLinkRandom OBJECT IDENTIFIER ::= { id-cmc 22 }

1933	   The POP Link Random control has the ASN.1 definition:

1935	     PopLinkRandom ::= OCTET STRING

1937	6.3.2.  Shared-Secret/Subject DN Linking

1939	   The second technique to link identity and POP information is to link
1940	   a particular subject distinguished name (subject DN) to the shared-
1941	   secrets that are distributed out-of-band and to require that clients
1942	   using the shared-secret to prove identity include that exact subject
1943	   DN in every certification request.  It is expected that many client-
1944	   server connections that use shared-secret-based proof-of-identity
1945	   will use this mechanism.  (It is common not to omit the subject DN
1946	   information from the certification request.)

1948	   When the shared-secret is generated and transferred out-of-band to
1949	   initiate the registration process (Section 6.2), a particular subject
1950	   DN is also associated with the shared-secret and communicated to the
1951	   client.  (The subject DN generated MUST be unique per entity in
1952	   accordance with the CA policy; a null subject DN cannot be used.  A
1953	   common practice could be to place the identification value as part of
1954	   the subject DN.)  When the client generates the Full PKI Request, it
1955	   MUST use these two pieces of information as follows:

1957	   1.  The client MUST include the specific subject DN that it received
1958	       along with the shared-secret as the subject name in every
1959	       certification request (PKCS #10 and/or CRMF) in the Full PKI
1960	       Request.  The subject names in the certification requests MUST
1961	       NOT be null.

1963	   2.  The client MUST include an Identity Proof control (Section 6.2.2)
1964	       or Identity Proof Version 2 control (Section 6.2.1), derived from
1965	       the shared-secret, in the Full PKI Request.

1967	   The server receiving this message MUST (a) validate the Identity
1968	   Proof control and then, (b) check that the subject DN included in
1969	   each certification request matches that associated with the shared-
1970	   secret.  If either of these checks fails, the certification request
1971	   MUST be rejected.

1973	6.3.3.  Existing Certificate Linking

1975	   Linking between the POP and an identity is easy when an existing
1976	   certificate is used.  The client copies all of the naming information
1977	   from the existing certificate (subject name and subject alternative
1978	   name) into the new certification request.  The POP on the new public
1979	   key is then performed by using the new key to sign the identity
1980	   information (linking the POP to a specific identity).  The identity
1981	   information is then tied to the POP information by signing the entire
1982	   enrollment request with the private key of the existing certificate.

1984	   Existing certificate linking can be used in the following
1985	   circumstances:

1987	      When replacing a certificate by doing a renewal or rekey
1988	      certification request.

1990	      Using an existing certificate to get a new certificate.  An
1991	      example of this would be to get a key establishment certificate
1992	      after having gotten a signature certificate.

1994	      Using a third-party certificate to get a new certificate from a
1995	      CA.  An example of this would be using a certificate and key pair
1996	      distributed with a device to prove an identity.  This requires
1997	      that the CA have an out-of-band channel to map the identity in the
1998	      device certificate to the new EE identity.

2000	6.4.  Data Return Control

2002	   The Data Return control allows clients to send arbitrary data
2003	   (usually some type of internal state information) to the server and
2004	   to have the data returned as part of the Full PKI Response.  Data
2005	   placed in a Data Return control is considered to be opaque to the
2006	   server.  The same control is used for both Full PKI Requests and
2007	   Responses.  If the Data Return control appears in a Full PKI Request,
2008	   the server MUST return it as part of the PKI Response.

2010	   In the event that the information in the Data Return control needs to
2011	   be confidential, it is expected that the client would apply some type
2012	   of encryption to the contained data, but the details of this are
2013	   outside the scope of this specification.

2015	   The Data Return control is identified by the OID:

2017	     id-cmc-dataReturn OBJECT IDENTIFIER ::= { id-cmc 4 }

2019	   The Data Return control has the ASN.1 definition:

2021	     DataReturn ::= OCTET STRING

2023	   A client could use this control to place an identifier marking the
2024	   exact source of the private key material.  This might be the
2025	   identifier of a hardware device containing the private key.

2027	6.5.  RA Certificate Modification Controls

2029	   These controls exist for RAs to be able to modify the contents of a
2030	   certification request.  Modifications might be necessary for various
2031	   reasons.  These include addition of certificate extensions or
2032	   modification of subject and/or subject alternative names.

2034	   Two controls exist for this purpose.  The first control, Modify
2035	   Certification Request (Section 6.5.1), allows the RA to replace or
2036	   remove any field in the certificate.  The second control, Add
2037	   Extensions (Section 6.5.2), only allows for the addition of
2038	   extensions.

2040	6.5.1.  Modify Certification Request Control

2042	   The Modify Certification Request control is used by RAs to change
2043	   fields in a requested certificate.

2045	   The Modify Certification Request control is identified by the OID:

2047	     id-cmc-modCertTemplate OBJECT IDENTIFIER ::= { id-cmc 31 }

2049	   The Modify Certification Request has the ASN.1 definition:

2051	     ModCertTemplate ::= SEQUENCE {
2052	       pkiDataReference             BodyPartPath,
2053	       certReferences               BodyPartList,
2054	       replace                      BOOLEAN DEFAULT TRUE,
2055	       certTemplate                 CertTemplate
2056	       }

2058	   The fields in ModCertTemplate have the following meaning:

2060	      pkiDataReference is the path to the PKI Request containing
2061	         certification request(s) to be modified.

2063	      certReferences refers to one or more certification requests in
2064	         the PKI Request referenced by pkiDataReference to be modified.
2065	         Each BodyPartID of the certReferences sequence MUST be equal to
2066	         either the bodyPartID of a TaggedCertificationRequest (PKCS
2067	         #10) or the certReqId of the CertRequest within a CertReqMsg
2068	         (CRMF).  By definition, the certificate extensions included in
2069	         the certTemplate field are applied to every certification
2070	         request referenced in the certReferences sequence.  If a
2071	         request corresponding to bodyPartID cannot be found, the
2072	         CMCFailInfo with a value of badRequest is returned that
2073	         references this control.

2075	      replace specifies if the target certification request is to be
2076	         modified by replacing or deleting fields.  If the value is
2077	         TRUE, the data in this control replaces the data in the target
2078	         certification request.  If the value is FALSE, the data in the
2079	         target certification request is deleted.  The action is
2080	         slightly different for the extensions field of certTemplate;
2081	         each extension is treated individually rather than as a single
2082	         unit.

2084	      certTemplate is a certificate template object [CRMF].  If a
2085	         field is present and replace is TRUE, it replaces that field in
2086	         the certification request.  If the field is present and replace
2087	         is FALSE, the field in the certification request is removed.
2088	         If the field is absent, no action is performed.  Each extension
2089	         is treated as a single field.

2091	   Servers MUST be able to process all extensions defined, but not
2092	   prohibited, in [PKIXCERT].  Servers are not required to be able to
2093	   process every X.509v3 extension transmitted using this protocol, nor
2094	   are they required to be able to process other, private extensions.
2095	   Servers are not required to put all RA-requested extensions into a
2096	   certificate.  Servers are permitted to modify RA-requested
2097	   extensions.  Servers MUST NOT alter an extension so as to reverse the
2098	   meaning of a client-requested extension.  If a certification request
2099	   is denied due to the inability to handle a requested extension and a
2100	   Full PKI Response is returned, the server MUST return a CMCFailInfo
2101	   value with the value of unsupportedExt.

2103	   If a certification request is the target of multiple Modify
2104	   Certification Request controls, the behavior is:

2106	   *  If control A exists in a layer that contains the layer of control
2107	      B, control A MUST override control B.  In other words, controls
2108	      should be applied from the innermost layer to the outermost layer.

2110	   *  If control A and control B are in the same PKIData (i.e., the same
2111	      wrapping layer), the order of application is non-determinate.

2113	   The same order of application is used if a certification request is
2114	   the target of both a Modify Certification Request control and an Add
2115	   Extensions control.

2117	6.5.2.  Add Extensions Control

2119	   The Add Extensions control has been deprecated in favor of the Modify
2120	   Certification Request control.  It was replaced so that fields in the
2121	   certification request other than extensions could be modified.

2123	   The Add Extensions control is used by RAs to specify additional
2124	   extensions that are to be included in certificates.

2126	   The Add Extensions control is identified by the OID:

2128	   id-cmc-addExtensions OBJECT IDENTIFIER ::= { id-cmc 8 }

2130	   The Add Extensions control has the ASN.1 definition:

2132	     AddExtensions ::= SEQUENCE {
2133	       pkiDataReference             BodyPartID,
2134	       certReferences               SEQUENCE OF BodyPartID,
2135	       extensions                   SEQUENCE OF Extension
2136	       }

2138	   The fields in AddExtensions have the following meaning:

2140	      pkiDataReference contains the body part identity of the
2141	         embedded certification request.

2143	      certReferences is a list of references to one or more of the
2144	         certification requests contained within a PKIData.  Each body
2145	         part identifier of the certReferences sequence MUST be equal to
2146	         either the bodyPartID of a TaggedCertificationRequest (PKCS
2147	         #10) or the certReqId of the CertRequest within a CertReqMsg
2148	         (CRMF).  By definition, the listed extensions are to be applied
2149	         to every certification request referenced in the certReferences
2150	         sequence.  If a certification request corresponding to
2151	         bodyPartID cannot be found, the CMCFailInfo with a value of
2152	         badRequest is returned referencing this control.

2154	      extensions is a sequence of extensions to be applied to the
2155	         referenced certification requests.

2157	   Servers MUST be able to process all extensions defined, but not
2158	   prohibited, in [PKIXCERT].  Servers are not required to be able to
2159	   process every X.509v3 extension transmitted using this protocol, nor
2160	   are they required to be able to process other, private extensions.
2161	   Servers are not required to put all RA-requested extensions into a
2162	   certificate.  Servers are permitted to modify RA-requested
2163	   extensions.  Servers MUST NOT alter an extension so as to reverse the
2164	   meaning of a client-requested extension.  If a certification request
2165	   is denied due to the inability to handle a requested extension and a
2166	   response is returned, the server MUST return a CMCFailInfo with the
2167	   value of unsupportedExt.

2169	   If multiple Add Extensions controls exist in a Full PKI Request, the
2170	   exact behavior is left up to the CA policy.  However, it is
2171	   recommended that the following policy be used.  These rules would be
2172	   applied to individual extensions within an Add Extensions control (as
2173	   opposed to an "all or nothing" approach).

2175	   1.  If the conflict is within a single PKIData, the certification
2176	       request would be rejected with a CMCFailInfo value of badRequest.

2178	   2.  If the conflict is between different PKIData, the outermost
2179	       version of the extension would be used (allowing an RA to
2180	       override the requested extension).

2182	6.6.  Transaction Identifier Control and Sender and Recipient Nonce
2183	      Controls

2185	   Transactions are identified and tracked with a transaction
2186	   identifier.  If used, clients generate transaction identifiers and
2187	   retain their value until the server responds with a Full PKI Response
2188	   that completes the transaction.  Servers correspondingly include
2189	   received transaction identifiers in the Full PKI Response.

2191	   The Transaction Identifier control is identified by the OID:

2193	     id-cmc-transactionId  OBJECT IDENTIFIER ::= { id-cmc 5 }

2195	   The Transaction Identifier control has the ASN.1 definition:

2197	     TransactionId ::= INTEGER

2199	   The Transaction Identifier control identifies a given transaction.
2200	   It is used by client and server to manage the state of an operation.
2201	   Clients MAY include a Transaction Identifier control in a request.
2202	   If the original request contains a Transaction Identifier control,
2203	   all subsequent requests and responses MUST include the same
2204	   Transaction Identifier control.

2206	   Replay protection is supported through the use of the Sender and
2207	   Recipient Nonce controls.  If nonces are used, in the first message
2208	   of a transaction, a Recipient Nonce control is not transmitted; a
2209	   Sender Nonce control is included by the transaction originator and
2210	   retained for later reference.  The recipient of a Sender Nonce
2211	   control reflects this value back to the originator as a Recipient
2212	   Nonce control and includes its own Sender Nonce control.  Upon
2213	   receipt by the transaction originator of this response, the
2214	   transaction originator compares the value of Recipient Nonce control
2215	   to its retained value.  If the values match, the message can be
2216	   accepted for further security processing.  The received value for a
2217	   Sender Nonce control is also retained for inclusion in the next
2218	   message associated with the same transaction.

2220	   The Sender Nonce and Recipient Nonce controls are identified by the
2221	   OIDs:

2223	     id-cmc-senderNonce    OBJECT IDENTIFIER ::= { id-cmc 6 }
2224	     id-cmc-recipientNonce OBJECT IDENTIFIER ::= { id-cmc 7 }

2226	   The Sender Nonce control has the ASN.1 definition:

2228	     SenderNonce ::= OCTET STRING

2230	   The Recipient Nonce control has the ASN.1 definition:

2232	     RecipientNonce ::= OCTET STRING

2234	   Clients MAY include a Sender Nonce control in the initial PKI
2235	   Request.  If a message includes a Sender Nonce control, the response
2236	   MUST include the transmitted value of the previously received Sender
2237	   Nonce control as a Recipient Nonce control and include a new value as
2238	   its Sender Nonce control.

2240	6.7.  Encrypted and Decrypted POP Controls

2242	   Servers MAY require that this POP method be used only if another POP
2243	   method is unavailable.  Servers SHOULD reject all certification
2244	   requests contained within a PKIData if any required POP is missing
2245	   for any element within the PKIData.

2247	   Many servers require proof that the entity that generated the
2248	   certification request actually possesses the corresponding private
2249	   component of the key pair.  For keys that can be used as signature
2250	   keys, signing the certification request with the private key serves
2251	   as a POP on that key pair.  With keys that can only be used for
2252	   encryption operations, POP MUST be performed by forcing the client to
2253	   decrypt a value.  See Section 5 of [CRMF] for a detailed discussion
2254	   of POP.

2256	   By necessity, POP for encryption-only keys cannot be done in one
2257	   round trip, since there are four distinct steps:

2259	   1.  Client tells the server about the public component of a new
2260	       encryption key pair.

2262	   2.  Server sends the client a POP challenge, encrypted with the
2263	       presented public encryption key.

2265	   3.  Client decrypts the POP challenge using the private key that
2266	       corresponds to the presented public key and uses it for computing
2267	       a keyed hash value sent back to the server.

2269	   4.  Server validates the decrypted POP challenge and continues
2270	       processing the certification request.

2272	   CMC defines two different controls.  The first deals with the
2273	   encrypted challenge sent from the server to the user in Step 2.  The
2274	   second deals with the value derived from the decrypted challenge sent
2275	   by the client to the server in Step 3.

2277	   The Encrypted POP control is used to send the encrypted challenge
2278	   from the server to the client as part of the PKIResponse.  (Note that
2279	   it is assumed that the message sent in Step 1 above is a Full PKI
2280	   Request and that the response in Step 2 is a Full PKI Response
2281	   including a CMCFailInfo specifying that a POP is explicitly required,
2282	   and providing the POP challenge in the encryptedPOP control.)

2284	   The Encrypted POP control is identified by the OID:

2286	       id-cmc-encryptedPOP OBJECT IDENTIFIER ::= { id-cmc 9 }

2288	   The Encrypted POP control has the ASN.1 definition:

2290	     EncryptedPOP ::= SEQUENCE {
2291	       request        TaggedRequest,
2292	       cms            ContentInfo,
2293	       thePOPAlgID    AlgorithmIdentifier,
2294	       witnessAlgID   AlgorithmIdentifier,
2295	       witness        OCTET STRING
2296	       }

2298	   The Decrypted POP control is identified by the OID:

2300	     id-cmc-decryptedPOP  OBJECT IDENTIFIER ::= { id-cmc 10 }

2302	   The Decrypted POP control has the ASN.1 definition:

2304	     DecryptedPOP ::= SEQUENCE {
2305	       bodyPartID     BodyPartID,
2306	       thePOPAlgID    AlgorithmIdentifier,
2307	       thePOP         OCTET STRING
2308	       }

2310	   The encrypted POP algorithm works as follows:

2312	   1.  The server randomly generates the POP Proof Value and associates
2313	       it with the request.

2315	   2.  The server returns the Encrypted POP control with the following
2316	       fields set:

2318	       *  request is the original certification request (it is included
2319	          here so the client need not keep a copy of the request).

2321	       *  cms is an EnvelopedData, the encapsulated content type being
2322	          id- data and the content being the POP Proof Value; this value
2323	          needs to be long enough that one cannot reverse the value from
2324	          the witness hash.  If the certification request contains a
2325	          Subject Key Identifier (SKI) extension, then the recipient
2326	          identifier SHOULD be the SKI.  If the issuerAndSerialNumber
2327	          form is used, the IssuerName MUST be encoded as NULL and the
2328	          SerialNumber as the bodyPartID of the certification request.

2330	       *  thePOPAlgID identifies the algorithm to be used in computing
2331	          the return POP value.

2333	       *  witnessAlgID identifies the hash algorithm used on the POP
2334	          Proof Value to create the field witness.

2336	       *  witness is the hashed value of the POP Proof Value.

2338	   3.  The client decrypts the cms field to obtain the POP Proof Value.
2339	       The client computes H(POP Proof Value) using the witnessAlgID and
2340	       compares to the value of witness.  If the values do not compare
2341	       or the decryption is not successful, the client MUST abort the
2342	       enrollment process.  The client aborts the process by sending a
2343	       request containing a CMC Status Info control with CMCFailInfo
2344	       value of popFailed.

2346	   4.  The client creates the Decrypted POP control as part of a new
2347	       PKIData.  The fields in the DecryptedPOP are:

2349	       *  bodyPartID refers to the certification request in the new PKI
2350	          Request.

2352	       *  thePOPAlgID is copied from the encryptedPOP.

2354	       *  thePOP contains the possession proof.  This value is computed
2355	          by thePOPAlgID using the POP Proof Value and the request.

2357	   5.  The server then re-computes the value of thePOP from its cached
2358	       value and the request and compares to the value of thePOP.  If
2359	       the values do not match, the server MUST NOT issue the
2360	       certificate.  The server MAY re-issue a new challenge or MAY fail
2361	       the request altogether.

2363	   When defining the algorithms for thePOPAlgID and witnessAlgID, care
2364	   must be taken to ensure that the result of witnessAlgID is not a
2365	   useful value to shortcut the computation with thePOPAlgID.  The POP
2366	   Proof Value is used as the secret value in the HMAC algorithm and the
2367	   request is used as the data.  If the POP Proof Value is greater than
2368	   64 bytes, only the first 64 bytes of the POP Proof Value is used as
2369	   the secret.

2371	   One potential problem with the algorithm above is the amount of state
2372	   that a CA needs to keep in order to verify the returned POP value.
2373	   The following describes one of many possible ways of addressing the
2374	   problem by reducing the amount of state kept on the CA to a single
2375	   (or small set) of values.

2377	   1.  Server generates random seed x, constant across all requests.
2378	       (The value of x would normally be altered on a regular basis and
2379	       kept for a short time afterwards.)

2381	   2.  For certification request R, server computes y = F(x,R).  F can
2382	       be, for example, HMAC-SHA256(x,R).  All that's important for
2383	       statelessness is that y be consistently computable with only
2384	       known state constant x and function F, other inputs coming from
2385	       the certification request structure. y should not be predictable
2386	       based on knowledge of R, thus the use of a one-way function like
2387	       HMAC-SHA256.

2389	6.8.  RA POP Witness Control

2391	   In a certification request scenario that involves an RA, the CA may
2392	   allow (or require) that the RA perform the POP protocol with the
2393	   entity that generated the certification request.  In this case, the
2394	   RA needs a way to inform the CA that it has done the POP.  The RA POP
2395	   Witness control addresses this issue.

2397	   The RA POP Witness control is identified by the OID:

2399	     id-cmc-lraPOPWitness OBJECT IDENTIFIER ::= { id-cmc 11 }

2401	   The RA POP Witness control has the ASN.1 definition:

2403	     LraPopWitness ::= SEQUENCE {
2404	       pkiDataBodyid   BodyPartID,
2405	       bodyIds         SEQUENCE of BodyPartID
2406	       }

2408	   The fields in LraPOPWitness have the following meaning:

2410	      pkiDataBodyid contains the body part identifier of the nested
2411	         TaggedContentInfo containing the client's Full PKI Request.
2412	         pkiDataBodyid is set to 0 if the request is in the current
2413	         PKIData.

2415	      bodyIds is a list of certification requests for which the RA
2416	         has performed an out-of-band authentication.  The method of
2417	         authentication could be archival of private key material,
2418	         challenge-response, or other means.

2420	   If a certification server does not allow an RA to do the POP
2421	   verification, it returns a CMCFailInfo with the value of popFailed.
2422	   The CA MUST NOT start a challenge-response to re-verify the POP
2423	   itself.

2425	6.9.  Get Certificate Control

2427	   Everything described in this section is optional to implement.

2429	   The Get Certificate control is used to retrieve a previously issued
2430	   certificate from a certificate repository.  A CA, an RA, or an
2431	   independent service may provide this repository.  The clients
2432	   expected to use this facility are those where a fully deployed
2433	   directory is either infeasible or undesirable.

2435	   The Get Certificate control is identified by the OID:

2437	     id-cmc-getCert OBJECT IDENTIFIER ::= { id-cmc 15 }

2439	   The Get Certificate control has the ASN.1 definition:

2441	     GetCert ::= SEQUENCE {
2442	       issuerName    GeneralName,
2443	       serialNumber  INTEGER }

2445	   The fields in GetCert have the following meaning:

2447	      issuerName is the name of the certificate issuer.

2449	      serialNumber identifies the certificate to be retrieved.

2451	   The server that responds to this request places the requested
2452	   certificate in the certificates field of a SignedData.  If the Get
2453	   Certificate control is the only control in a Full PKI Request, the
2454	   response should be a Simple PKI Response.

2456	6.10.  Get CRL Control

2458	   Everything described in this section is optional to implement.

2460	   The Get CRL control is used to retrieve CRLs from a repository of
2461	   CRLs.  A CA, an RA, or an independent service may provide this
2462	   repository.  The clients expected to use this facility are those
2463	   where a fully deployed directory is either infeasible or undesirable.

2465	   The Get CRL control is identified by the OID:

2467	     id-cmc-getCRL OBJECT IDENTIFIER ::= { id-cmc 16 }

2469	   The Get CRL control has the ASN.1 definition:

2471	     GetCRL ::= SEQUENCE {
2472	       issuerName    Name,
2473	       cRLName       GeneralName OPTIONAL,
2474	       time          GeneralizedTime OPTIONAL,
2475	       reasons       ReasonFlags OPTIONAL }

2477	   The fields in a GetCRL have the following meanings:

2479	      issuerName is the name of the CRL issuer.

2481	      cRLName may be the value of CRLDistributionPoints in the
2482	         subject certificate or equivalent value in the event the
2483	         certificate does not contain such a value.

2485	      time is used by the client to specify from among potentially
2486	         several issues of CRL that one whose thisUpdate value is less
2487	         than but nearest to the specified time.  In the absence of a
2488	         time component, the CA always returns with the most recent CRL.

2490	      reasons is used to specify from among CRLs partitioned by
2491	         revocation reason.  Implementers should bear in mind that while
2492	         a specific revocation request has a single CRLReason code --
2493	         and consequently entries in the CRL would have a single
2494	         CRLReason code value -- a single CRL can aggregate information
2495	         for one or more reasonFlags.

2497	   A server responding to this request places the requested CRL in the
2498	   crls field of a SignedData.  If the Get CRL control is the only
2499	   control in a Full PKI Request, the response should be a Simple PKI
2500	   Response.

2502	6.11.  Revocation Request Control

2504	   The Revocation Request control is used to request that a certificate
2505	   be revoked.

2507	   The Revocation Request control is identified by the OID:

2509	     id-cmc-revokeRequest OBJECT IDENTIFIER ::= { id-cmc 17 }

2511	   The Revocation Request control has the ASN.1 definition:

2513	     RevokeRequest ::= SEQUENCE {
2514	       issuerName      Name,
2515	       serialNumber    INTEGER,
2516	       reason          CRLReason,
2517	       invalidityDate  GeneralizedTime OPTIONAL,
2518	       sharedSecret    OCTET STRING OPTIONAL,
2519	       comment         UTF8string OPTIONAL }

2521	   The fields of RevokeRequest have the following meaning:

2523	      issuerName is the issuerName of the certificate to be revoked.

2525	      serialNumber is the serial number of the certificate to be
2526	         revoked.

2528	      reason is the suggested CRLReason code for why the certificate
2529	         is being revoked.  The CA can use this value at its discretion
2530	         in building the CRL.

2532	      invalidityDate is the suggested value for the Invalidity Date
2533	         CRL Extension.  The CA can use this value at its discretion in
2534	         building the CRL.

2536	      sharedSecret is a secret value registered by the EE when the
2537	         certificate was obtained to allow for revocation of a
2538	         certificate in the event of key loss.

2540	      comment is a human-readable comment.

2542	   For a revocation request to be reliable in the event of a dispute, a
2543	   strong proof-of-origin is required.  However, in the instance when an
2544	   EE has lost use of its signature private key, it is impossible for
2545	   the EE to produce a digital signature (prior to the certification of
2546	   a new signature key pair).  The Revoke Request control allows the EE
2547	   to send the CA a shared-secret that may be used as an alternative
2548	   authenticator in the instance of loss of use of the EE's signature
2549	   private key.  The acceptability of this practice is a matter of local
2550	   security policy.

2552	   It is possible to sign the revocation for the lost certificate with a
2553	   different certificate in some circumstances.  A client can sign a
2554	   revocation for an encryption key with a signing certificate if the
2555	   name information matches.  Similarly, an administrator or RA can be
2556	   assigned the ability to revoke the certificate of a third party.
2557	   Acceptance of the revocation by the server depends on local policy in
2558	   these cases.

2560	   Clients MUST provide the capability to produce a digitally signed
2561	   Revocation Request control.  Clients SHOULD be capable of producing
2562	   an unsigned Revocation Request control containing the EE shared-
2563	   secret (the unsigned message consisting of a SignedData with no
2564	   signatures).  If a client provides shared-secret-based self-
2565	   revocation, the client MUST be capable of producing a Revocation
2566	   Request control containing the shared-secret.  Servers MUST be
2567	   capable of accepting both forms of revocation requests.

2569	   The structure of an unsigned, shared-secret-based revocation request
2570	   is a matter of local implementation.  The shared-secret does not need
2571	   to be encrypted when sent in a Revocation Request control.  The
2572	   shared-secret has a one-time use (i.e., it is used to request
2573	   revocation of the certificate), and public knowledge of the shared-
2574	   secret after the certificate has been revoked is not a problem.
2575	   Clients need to inform users that the same shared-secret SHOULD NOT
2576	   be used for multiple certificates.

2578	   A Full PKI Response MUST be returned for a revocation request.

2580	6.12.  Registration and Response Information Controls

2582	   The Registration Information control allows for clients to pass
2583	   additional information as part of a Full PKI Request.

2585	   The Registration Information control is identified by the OID:

2587	     id-cmc-regInfo OBJECT IDENTIFIER ::= { id-cmc 18 }

2589	   The Registration Information control has the ASN.1 definition:

2591	     RegInfo ::= OCTET STRING

2593	   The content of this data is based on bilateral agreement between the
2594	   client and server.

2596	   The Response Information control allows a server to return additional
2597	   information as part of a Full PKI Response.

2599	   The Response Information control is identified by the OID:

2601	     id-cmc-responseInfo  OBJECT IDENTIFIER ::= { id-cmc 19 }

2603	   The Response Information control has the ASN.1 definition:

2605	     ResponseInfo ::= OCTET STRING

2607	   The content of this data is based on bilateral agreement between the
2608	   client and server.

2610	6.13.  Query Pending Control

2612	   In some environments, process requirements for manual intervention or
2613	   other identity checks can delay the return of the certificate.  The
2614	   Query Pending control allows clients to query a server about the
2615	   state of a pending certification request.  The server returns a
2616	   pendToken as part of the Extended CMC Status Info and the CMC Status
2617	   Info controls (in the otherInfo field).  The client copies the
2618	   pendToken into the Query Pending control to identify the correct
2619	   certification request to the server.  The server returns a suggested
2620	   time for the client to query for the state of a pending certification
2621	   request.

2623	   The Query Pending control is identified by the OID:

2625	     id-cmc-queryPending  OBJECT IDENTIFIER ::= { id-cmc 21 }

2627	   The Query Pending control has the ASN.1 definition:

2629	     QueryPending ::= OCTET STRING

2631	   If a server returns a pending or partial CMCStatusInfo (the
2632	   transaction is still pending), the otherInfo MAY be omitted.  If the
2633	   otherInfo is not omitted, the value of 'pendInfo' MUST be the same as
2634	   the original pendInfo value.

2636	6.14.  Confirm Certificate Acceptance Control

2638	   Some CAs require that clients give a positive confirmation that the
2639	   certificates issued to the EE are acceptable.  The Confirm
2640	   Certificate Acceptance control is used for that purpose.  If the CMC
2641	   Status Info on a PKI Response is confirmRequired, then the client
2642	   MUST return a Confirm Certificate Acceptance control contained in a
2643	   Full PKI Request.

2645	   Clients SHOULD wait for the PKI Response from the server that the
2646	   confirmation has been received before using the certificate for any
2647	   purpose.

2649	   The Confirm Certificate Acceptance control is identified by the OID:

2651	     id-cmc-confirmCertAcceptance  OBJECT IDENTIFIER ::= { id-cmc 24 }

2653	   The Confirm Certificate Acceptance control has the ASN.1 definition:

2655	     CMCCertId ::= IssuerAndSerialNumber

2657	   CMCCertId contains the issuer and serial number of the certificate
2658	   being accepted.

2660	   Servers MUST return a Full PKI Response for a Confirm Certificate
2661	   Acceptance control.

2663	   Note that if the CA includes this control, there will be two full
2664	   round trips of messages.

2666	   1.  The client sends the certification request to the CA.

2668	   2.  The CA returns a Full PKI Response with the certificate and this
2669	       control.

2671	   3.  The client sends a Full PKI Request to the CA with an Extended
2672	       CMC Status Info control accepting and a Confirm Certificate
2673	       Acceptance control or an Extended CMC Status Info control
2674	       rejecting the certificate.

2676	   4.  The CA sends a Full PKI Response to the client with an Extended
2677	       CMC Status Info of success.

2679	6.15.  Publish Trust Anchors Control

2681	   The Publish Trust Anchors control allows for the distribution of set
2682	   trust anchors from a central authority to an EE.  The same control is
2683	   also used to update the set of trust anchors.  Trust anchors are
2684	   distributed in the form of certificates.  These are expected, but not
2685	   required, to be self-signed certificates.  Information is extracted
2686	   from these certificates to set the inputs to the certificates
2687	   validation algorithm in Section 6.1.1 of [PKIXCERT].

2689	   The Publish Trust Anchors control is identified by the OID:

2691	     id-cmc-trustedAnchors  OBJECT IDENTIFIER ::= { id-cmc 26 }

2693	   The Publish Trust Anchors control has the ASN.1 definition:

2695	     PublishTrustAnchors ::= SEQUENCE {
2696	       seqNumber      INTEGER,
2697	       hashAlgorithm  AlgorithmIdentifier,
2698	       anchorHashes   SEQUENCE OF OCTET STRING
2699	     }

2701	   The fields in PublishTrustAnchors have the following meaning:

2703	      seqNumber is an integer indicating the location within a
2704	         sequence of updates.

2706	      hashAlgorithm is the identifier and parameters for the hash
2707	         algorithm that is used in computing the values of the
2708	         anchorHashes field.  All implementations MUST implement SHA-256
2709	         for this field.

2711	      anchorHashes are the hashes for the certificates that are to be
2712	         treated as trust anchors by the client.  The actual
2713	         certificates are transported in the certificate bag of the
2714	         containing SignedData structure.

2716	   While it is recommended that the sender place the certificates that
2717	   are to be trusted in the PKI Response, it is not required as the
2718	   certificates should be obtainable using normal discovery techniques.

2720	   Prior to accepting the trust anchors changes, a client MUST at least
2721	   do the following: validate the signature on the PKI Response to a
2722	   current trusted anchor, check with policy to ensure that the signer
2723	   is permitted to use the control, validate that the authenticated
2724	   publish time in the signature is near to the current time, and
2725	   validate that the sequence number is greater than the previously used
2726	   one.

2728	   In the event that multiple agents publish a set of trust anchors, it
2729	   is up to local policy to determine how the different trust anchors
2730	   should be combined.  Clients SHOULD be able to handle the update of
2731	   multiple trust anchors independently.

2733	   Note:  Clients that handle this control must use extreme care in
2734	      validating that the operation is permissible.  Incorrect handling
2735	      of this control allows for an attacker to change the set of trust
2736	      anchors on the client.

2738	6.16.  Authenticated Data Control

2740	   The Authenticated Data control allows a server to provide data back
2741	   to the client in an authenticated manner.  This control uses the
2742	   Authenticated Data structure to allow for validation of the data.
2743	   This control is used where the client has a shared-secret and a
2744	   secret identifier with the server, but where a trust anchor has not
2745	   yet been downloaded onto the client so that a signing certificate for
2746	   the server cannot be validated.  The specific case that this control
2747	   was created for use with is the Publish Trust Anchors control
2748	   (Section 6.15), but it may be used in other cases as well.

2750	   The Authenticated Data control is identified by the OID:

2752	     id-cmc-authData OBJECT IDENTIFIER ::= { id-cmc 27 }

2754	   The Authenticated Data control has the ASN.1 definition:

2756	     AuthPublish ::= BodyPartID

2758	   AuthPublish is a body part identifier that refers to a member of the
2759	   cmsSequence element for the current PKI Response or PKI Data.  The
2760	   cmsSequence element is AuthenticatedData.  The encapsulated content
2761	   is an id-cct-PKIData.  The controls in the controlSequence need to be
2762	   processed if the authentication succeeds.  (One example is the
2763	   Publish Trust Anchors control in Section 6.15.)
2764	   If the authentication operation fails, the CMCFailInfo authDataFail
2765	   is returned.

2767	6.17.  Batch Request and Response Controls

2769	   These controls allow for an RA to collect multiple requests together
2770	   into a single Full PKI Request and forward it to a CA.  The server
2771	   would then process the requests and return the results in a Full PKI
2772	   Response.

2774	   The Batch Request control is identified by the OID:

2776	     id-cmc-batchRequests OBJECT IDENTIFIER ::= { id-cmc 28 }

2778	   The Batch Response control is identified by the OID:

2780	     id-cmc-batchResponses OBJECT IDENTIFIER ::= { id-cmc 29 }

2782	   Both the Batch Request and Batch Response controls have the ASN.1
2783	   definition:

2785	     BodyPartList ::= SEQUENCE of BodyPartID

2787	   The data associated with these controls is a set of body part
2788	   identifiers.  Each request/response is placed as an individual entry
2789	   in the cmcSequence of the new PKIData/PKIResponse.  The body part
2790	   identifiers of these entries are then placed in the body part list
2791	   associated with the control.

2793	   When a server processes a Batch Request control, it MAY return the
2794	   responses in one or more PKI Responses.  A CMCStatus value of partial
2795	   is returned on all but the last PKI Response.  The CMCStatus would be
2796	   success if the Batch Requests control was processed; the responses
2797	   are created with their own CMCStatus code.  Errors on individual
2798	   requests are not propagated up to the top level.

2800	   When a PKI Response with a CMCStatus value of partial is returned,
2801	   the Query Pending control (Section 6.13) is used to retrieve
2802	   additional results.  The returned status includes a suggested time
2803	   after which the client should ask for the additional results.

2805	6.18.  Publication Information Control

2807	   The Publication Information control allows for modifying publication
2808	   of already issued certificates, both for publishing and removal from
2809	   publication.  A common usage for this control is to remove an
2810	   existing certificate from publication during a rekey operation.  This
2811	   control should always be processed after the issuance of new
2812	   certificates and revocation requests.  This control should not be
2813	   processed if a certificate failed to be issued.

2815	   The Publication Information control is identified by the OID:

2817	     id-cmc-publishCert OBJECT IDENTIFIER ::= { id-cmc 30 }

2819	   The Publication Information control has the ASN.1 definition:

2821	     CMCPublicationInfo ::= SEQUENCE {
2822	       hashAlg     AlgorithmIdentifier,
2823	       certHashes      SEQUENCE of OCTET STRING,
2824	       pubInfo         PKIPublicationInfo
2825	       }

2827	     PKIPublicationInfo ::= SEQUENCE {
2828	       action     INTEGER {
2829	                           dontPublish (0),
2830	                           pleasePublish (1) },
2831	       pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }

2833	       -- pubInfos MUST NOT be present if action is "dontPublish"
2834	       -- (if action is "pleasePublish" and pubInfos is omitted,
2835	       -- "dontCare" is assumed)

2837	     SinglePubInfo ::= SEQUENCE {
2838	       pubMethod    INTEGER {
2839	                            dontCare    (0),
2840	                            x500        (1),
2841	                            web         (2),
2842	                            ldap        (3) },
2843	        pubLocation  GeneralName OPTIONAL }
2844	     }

2846	   The fields in CMCPublicationInfo have the following meaning:

2848	      hashAlg is the algorithm identifier of the hash algorithm used
2849	         to compute the values in certHashes.

2851	      certHashes are the hashes of the certificates for which
2852	         publication is to change.

2854	      pubInfo is the information where and how the certificates
2855	         should be published.  The fields in pubInfo (taken from [CRMF])
2856	         have the following meanings:

2858	      o  action indicates the action the service should take.  It has
2859	            two values:

2861	      +  dontPublish indicates that the PKI should not publish the
2862	               certificate (this may indicate that the requester intends
2863	               to publish the certificate him/herself). dontPublish has
2864	               the added connotation of removing from publication the
2865	               certificate if it is already published.

2867	      +  pleasePublish indicates that the PKI MAY publish the
2868	               certificate using whatever means it chooses unless
2869	               pubInfos is present.  Omission of the CMC Publication
2870	               Info control results in the same behavior.

2872	      o  pubInfos pubInfos indicates how (e.g., X500, Web, IP
2873	            Address) the PKI SHOULD publish the certificate.

2875	   A single certificate SHOULD NOT appear in more than one Publication
2876	   Information control.  The behavior is undefined in the event that it
2877	   does.

2879	6.19.  Control Processed Control

2881	   The Control Processed control allows an RA to indicate to subsequent
2882	   control processors that a specific control has already been
2883	   processed.  This permits an RA in the middle of a processing stream
2884	   to process a control defined either in a local context or in a
2885	   subsequent document.

2887	   The Control Processed control is identified by the OID:

2889	     id-cmc-controlProcessed  OBJECT IDENTIFIER ::= { id-cmc 32 }

2891	   The Control Processed control has the ASN.1 definition:

2893	     ControlList ::= SEQUENCE {
2894	       bodyList        SEQUENCE SIZE (1..MAX) OF BodyPartReference
2895	     }

2897	      bodyList is a series of body part identifiers that form a path
2898	         to each of the controls that were processed by the RA.  This
2899	         control is only needed for those controls that are not part of
2900	         this standard and thus would cause an error condition of a
2901	         server attempting to deal with a control not defined in this
2902	         document.  No error status is needed since an error causes the
2903	         RA to return the request to the client with the error rather
2904	         than passing the request on to the next server in the
2905	         processing list.

2907	6.20.  RA Identity Proof Witness Control

2909	   The RA Identity Proof Witness control allows an RA to indicate to
2910	   subsequent control processors that all of the identity proof
2911	   requirements have been met.  This permits the identity proof to be
2912	   performed at a location closer to the end-entity.  For example, the
2913	   identity proof could be done at multiple physical locations, while
2914	   the CA could operate on a company-wide basis.  The RA performs the
2915	   identity proof, and potentially other tasks that require the secret
2916	   to be used, while the CA is prevented from knowing the secret.  If
2917	   the identity proof fails, then the RA returns an error to the client
2918	   denoting that fact.

2920	   The RA Identity Proof Witness control is identified by the OID:

2922	    id-cmc-raIdentityWitness OBJECT IDENTIFIER ::= { id-cmc 35 }

2924	   The RA Identity Proof Witness control has the ASN.1 definition:

2926	     cmc-raIdentityWitness CMC-CONTROL ::=
2927	       { BodyPartPath IDENTIFIED BY id-cmc-raIdentityWitness }

2929	      cmc-raIdentityWitness is a CMC-CONTROL associating the object
2930	         identifier id-cmc-raIdentityWitness and the type BodyPartPath.
2931	         This object is omitted from the 1988 module.  The object is
2932	         added to the object set Cmc-Control-Set.  The control is
2933	         permitted to appear only in the control sequence of a PKIData
2934	         object.  It MUST NOT appear in the control sequence of a
2935	         PKIResponse.  The control is permitted to be used only by an
2936	         RA.  The control may appear multiple times in a control
2937	         sequence with each occurrence pointing to a different object.

2939	      id-cmc-raIdentityWitness is the object identifier used to
2940	         identify this CMC control.

2942	      BodyPartPath is the type structure associated with the control.
2943	         The syntax of BodyPartPath is defined in Section 3.2.2.  The
2944	         path contains a sequence of body part identifiers leading to
2945	         one of the following items:

2947	      o  Identity Proof control if the RA verified the identity proof
2948	            in this control.

2950	      o  Identity Proof Version 2 control if the RA verified the
2951	            identity proof in this control.

2953	      o  Full PKI Request if the RA performed an out-of-band identity
2954	            proof for this request.  The request SHOULD NOT contain
2955	            either Identity Proof control.

2957	      o  Simple PKI Request if the RA performed an out-of-band
2958	            identity proof for this request.

2960	   The RA Identity Proof Witness control will frequently be associated
2961	   with a Modify Certification Request control, which changes the name
2962	   fields in the associated certification requests.  This is because the
2963	   RA knows the actual name to be assigned to the entity requesting the
2964	   certificate, and the end-entity does not yet have the details of the
2965	   name.  (The association would be set up by the operator at the time
2966	   the shared-secret was generated by the RA.)

2968	   When this control is placed in a message, it is RECOMMENDED that the
2969	   Control Processed control be placed in the body sequence as well.
2970	   Using the explicit new control, rather than implicitly relying on the
2971	   Control Processed control is important due to the need to know
2972	   explicitly which identity proofs have been performed.  The new
2973	   control also allows an RA to state that out-of-band identity proofs
2974	   have been performed.

2976	   When the identity proof is performed by an RA, the RA also MUST
2977	   validate the linking between the identity proof and the name
2978	   information wrapped inside of the key proof-of-possession.

2980	6.21.  Response Body Control

2982	   The Response Body Control is designed to enable an RA to inform an EE
2983	   that there is an embedded response message that MUST be processed as
2984	   part of the processing of this message.  This control is designed to
2985	   be used in a couple of different cases where an RA has done some
2986	   additional processing for the certification request, e.g., as key
2987	   generation.  When an RA performs key generation on behalf of an EE,
2988	   the RA MUST respond with both the original response message from the
2989	   certificate issuer (containing the certificate issuance) as part of
2990	   the response generated by the RA (containing the new key).  Another
2991	   case where this is useful is when the secret is shared between the RA
2992	   and the EE (rather than between the CA and the EE) and the RA returns
2993	   the Publish Trust Anchors control (to populate the correct trust
2994	   points).

2996	   The Response Body Control is identified by the OID:

2998	     id-cmc-responseBody OBJECT IDENTIFIER ::= { id-cmc 37 }

3000	   The Response Body Control has the ASN.1 definition:

3002	     cmc-responseBody CMC-CONTROL ::= {
3003	        BodyPartPath IDENTIFIED BY id-cmc-responseBody
3004	     }

3006	      cmc-responseBody is a CMC-CONTROL associating the object
3007	         identifier id-cmc-responseBody with the type BodyPartPath.
3008	         This object is omitted from the 1988 module.  The object is
3009	         added to the object set Cmc-Control-Set.  The control is
3010	         permitted to appear only in the control sequence of a
3011	         PKIResponse.  The control MUST NOT appear in the control
3012	         sequence of a PKIData.  It is expected that only an
3013	         intermediary RA will use this control; a CA generally does not
3014	         need the control as it is creating the original innermost
3015	         message.

3017	      id-cmc-responseBody is the object identifier used to identify
3018	         this CMC control.

3020	      BodyPartPath is the type structure associated with the control.
3021	         The syntax of BodyPartPath is defined in Section 3.2.2.  The
3022	         path contains a sequence of body part identifiers leading to a
3023	         cmsSequence item which contains a PKIResponse within it.

3025	7.  Other Attributes

3027	   There are a number of different locations where various types of
3028	   attributes can be placed in either a CMC request or a CMC response
3029	   message.  These places include the attribute sequence of a PKCS #10
3030	   request, controls in CRMF Section 6 of [CRMF], and the various CMS
3031	   attribute sequences.

3033	7.1.  Change Subject Name Attribute

3035	   The Client Name Change Request attribute is designed for a client to
3036	   ask for a change in its name as part of a certification request.
3037	   Because of security issues, this cannot be done in the simple way of
3038	   just changing the requested subject name in the certificate template.
3039	   The name in the certification request MUST match the name in the
3040	   certificate used to verify the request, in order that identity and
3041	   possession proofs are correctly applied.

3043	   The relevant ASN.1 for the Client Name Change Request attribute is as
3044	   follows:

3046	     at-cmc-changeSubjectName ATTRIBUTE ::=
3047	       { ChangeSubjectName IDENTIFIED BY id-cmc-changeSubjectName }

3049	     id-cmc-changeSubjectName OBJECT IDENTIFIER ::= { id-cmc 36 }

3051	     ChangeSubjectName ::= SEQUENCE {
3052	       subject             Name OPTIONAL,
3053	       subjectAlt          [1] GeneralNames OPTIONAL
3054	     }
3055	     (WITH COMPONENTS {..., subject PRESENT} |
3056	      WITH COMPONENTS {..., subjectAlt PRESENT} )

3058	   The attribute is designed to be used as an ATTRIBUTE object.  As
3059	   such, the attribute is placed in one of the following two places:

3061	      The attributes field in a CertificationRequest.

3063	      The controls field of a CertRequest for a CRMF certification
3064	      request.

3066	   The control is identified by the Object Identifier id-cmc-
3067	   changeSubjectName.

3069	   The ASN.1 type associated with control is ChangeSubjectName.  The
3070	   fields of the structure are configured as follows:

3072	      subject contains the requested subject name for the new
3073	         certificate.

3075	      subjectAlt contains the requested subject alternative name for
3076	         the new certificate.

3078	   At least one of the fields in the sequence MUST be present when
3079	   encoding the structure.

3081	   When the CA processes this attribute in a certification request, it
3082	   will do the following:

3084	   1.  If present, the subject field is copied to the name field of the
3085	       template.  If the subject field is absent, the name field of the
3086	       template will be set to a empty sequence.

3088	   2.  If present, the subjectAlt field is used as the content of a
3089	       SubjectAltName extension in the certificate.  If the subjectAlt
3090	       field is absent, the subjectAltName extension is removed from the
3091	       certificate template.

3093	8.  Registration Authorities

3095	   This specification permits the use of RAs.  An RA sits between the EE
3096	   and the CA.  From the EE's perspective, the RA appears to be the CA,
3097	   and from the server, the RA appears to be a client.  RAs receive the
3098	   PKI Requests, perform local processing and then forward them onto
3099	   CAs.  Some of the types of local processing that an RA can perform
3100	   include:

3102	   *  Batching multiple PKI Requests together,

3104	   *  Performing challenge/response POP proofs,

3106	   *  Adding private or standardized certificate extensions to all
3107	      certification requests,

3109	   *  Archiving private key material,

3111	   *  Routing requests to different CAs.

3113	   When an RA receives a PKI Request, it has three options: it may
3114	   forward the PKI Request without modification, it may add a new
3115	   wrapping layer to the PKI Request, or it may remove one or more
3116	   existing layers and add a new wrapping layer.

3118	   When an RA adds a new wrapping layer to a PKI Request, it creates a
3119	   new PKIData.  The new layer contains any controls required (for
3120	   example, if the RA does the POP proof for an encryption key or the
3121	   Add Extension control to modify a PKI Request) and the client PKI
3122	   Request.  The client PKI Request is placed in the cmsSequence if it
3123	   is a Full PKI Request and in the reqSequence if it is a Simple PKI
3124	   Request.  If an RA is batching multiple client PKI Requests together,
3125	   then each client PKI Request is placed into the appropriate location
3126	   in the RA's PKIData object along with all relevant controls.

3128	   If multiple RAs are in the path between the EE and the CA, this will
3129	   lead to multiple wrapping layers on the request.

3131	   In processing a PKI Request, an RA MUST NOT alter any certification
3132	   requests (PKCS #10 or CRMF) as any alteration would invalidate the
3133	   signature on the certification request and thus the POP for the
3134	   private key.

3136	   An example of how this would look is illustrated by the following
3137	   figure:

3139	     SignedData (by RA)
3140	        PKIData
3141	          controlSequence
3142	            RA added control statements
3143	          reqSequence
3144	            Zero or more Simple PKI Requests from clients
3145	           cmsSequence
3146	                Zero or more Full PKI Requests from clients
3147	                  SignedData (signed by client)
3148	                  PKIData

3150	   Under some circumstances, an RA is required to remove wrapping
3151	   layers.  The following sections look at the processing required if
3152	   encryption layers and signing layers need to be removed.

3154	8.1.  Encryption Removal

3156	   There are two cases that require an RA to remove or change encryption
3157	   in a PKI Request.  In the first case, the encryption was applied for
3158	   the purposes of protecting the entire PKI Request from unauthorized
3159	   entities.  If the CA does not have a Recipient Info entry in the
3160	   encryption layer, the RA MUST remove the encryption layer.  The RA
3161	   MAY add a new encryption layer with or without adding a new signing
3162	   layer.

3164	   The second change of encryption that may be required is to change the
3165	   encryption inside of a signing layer.  In this case, the RA MUST
3166	   remove all signing layers containing the encryption.  All control
3167	   statements MUST be merged according to local policy rules as each
3168	   signing layer is removed and the resulting merged controls MUST be
3169	   placed in a new signing layer provided by the RA.  If the signing
3170	   layer provided by the EE needs to also be removed, the RA can also
3171	   remove this layer.

3173	8.2.  Signature Layer Removal

3175	   Only two instances exist where an RA should remove a signature layer
3176	   on a Full PKI Request: if an encryption layer needs to be modified
3177	   within the request, or if a CA will not accept secondary delegation
3178	   (i.e., multiple RA signatures).  In all other situations, RAs SHOULD
3179	   NOT remove a signing layer from a PKI Request.

3181	   If an RA removes a signing layer from a PKI Request, all control
3182	   statements MUST be merged according to local policy rules.  The
3183	   resulting merged control statements MUST be placed in a new signing
3184	   layer provided by the RA.

3186	9.  CMC Infrastucture Certificate Requirements

3188	   Certificates for servers used in the CMC protocol SHOULD conform to
3189	   the profile defined in [PKIXCERT].  This document defines some
3190	   additional items that MAY appear in CMC server certificates.
3191	   Section 9.1 defines some additional values for the Extended Key Usage
3192	   extension.  Section 9.2 defines a new Subject Information Access
3193	   value that allows for a CMC certificate to publish information on how
3194	   to contact the services it provides.

3196	9.1.  Extended Key Usage

3198	   The Extended Key Usage (EKU) extension is used to restrict the use of
3199	   a certificate to specific applications.  We define three different
3200	   EKUs in this document.  The ASN.1 to define these EKUs is:

3202	     id-kp-cmcCA      OBJECT IDENTIFIER ::= { id-kp 27 }
3203	     id-kp-cmcRA      OBJECT IDENTIFIER ::= { id-kp 28 }
3204	     id-kp-cmcArchive OBJECT IDENTIFIER ::= { id-kp 29 }

3206	   The usage description for each of the EKUs is as follows:

3208	      CMC Certification Authorities are identified by the id-kp-cmcCA
3209	         extended key usage.  The certificate may be the same as or
3210	         different than the CA certificate.  If a different certificate
3211	         is used, the certificates containing the id-kp-cmcCA extended
3212	         key usage SHOULD have the same name as the certificate used for
3213	         issuing the certificates.  (Using a separate key pair for CMC
3214	         protocol operations and for issuing certificates and CRLs
3215	         decreases the number of operations for which the private key
3216	         used to sign certificates and CRLs would be used.)

3218	      CMC Registration Authorities are identified by the id-kp-cmcRA
3219	         extended key usage.  This usage is placed into RA certificates.

3221	      CMC Archive Servers are identified by the id-kp-cmcArchive
3222	         extended key usage.  CMC Archive Servers and the associated
3223	         protocol are to be defined in a future document.

3225	9.2.  Subject Information Access

3227	   The subject information access extension indicates how to access
3228	   information and services for the subject of the certificate.  We
3229	   define a new value for use in this extension, to identify the
3230	   different locations that CMC services will be available.  If this
3231	   value is placed in a certificate, an appropriate extended key usage
3232	   defined in Section 9.1 MUST be included in the certificate as well.

3234	   The id-ad-cmc OID is used when the subject offers certification
3235	   services using the CMC protocol.  If the CMC services are available
3236	   via HTTP or FTP, accessLocation MUST be a uniformResourceIdentifier.
3237	   If the CMC services are available via electronic mail, accessLocation
3238	   MUST be an rfc822Name.  If CMC services are available using TCP/IP,
3239	   the dNSName or iPAddress name forms MUST be used.  Since the
3240	   GeneralName data structure does not permit the inclusion of a port
3241	   number, in the absence of other external configuration information,
3242	   the value of 5318 should be used.  (The port registration is in
3243	   Section 3.2) The semantics of other name forms of accessLocation
3244	   (when accessMethod is id-ad-cmc) are not defined by this
3245	   specification.

3247	   The ASN.1 type for this extension is GeneralName see Section 4.2.1.8
3248	   of [PKIXCERT].

3250	     id-ad-cmc OBJECT IDENTIFIER ::= { id-ad 12 }

3252	10.  Security Considerations

3254	   Mechanisms for thwarting replay attacks may be required in particular
3255	   implementations of this protocol depending on the operational
3256	   environment.  In cases where the CA maintains significant state
3257	   information, replay attacks may be detectable without the inclusion
3258	   of the optional nonce mechanisms.  Implementers of this protocol need
3259	   to carefully consider environmental conditions before choosing
3260	   whether or not to implement the senderNonce and recipientNonce
3261	   controls described in Section 6.6.  Developers of state-constrained
3262	   PKI clients are strongly encouraged to incorporate the use of these
3263	   controls.

3265	   Extreme care needs to be taken when archiving a signing key.  The
3266	   holder of the archived key may have the ability to use the key to
3267	   generate forged signatures.  There are however reasons why a signing
3268	   key should be archived.  An archived CA signing key can be recovered
3269	   in the event of failure to continue to produced CRLs following a
3270	   disaster.

3272	   Due care must be taken prior to archiving keys.  Once a key is given
3273	   to an archiving entity, the archiving entity could use the keys in a
3274	   way not conducive to the archiving entity.  Users should be made
3275	   especially aware that proper verification is made of the certificate
3276	   used to encrypt the private key material.

3278	   Clients and servers need to do some checks on cryptographic
3279	   parameters prior to issuing certificates to make sure that weak
3280	   parameters are not used.  A description of the small subgroup attack
3281	   is provided in [X942].  Methods of avoiding the small subgroup attack
3282	   can be found in [SMALL-GROUP].  CMC implementations ought to be aware
3283	   of this attack when doing parameter validations.

3285	   When using a shared-secret for authentication purposes, the shared-
3286	   secret should be generated using good random number techniques
3287	   [RANDOM].  User selection of the secret allows for dictionary attacks
3288	   to be mounted.

3290	   Extreme care must be used when processing the Publish Trust Anchors
3291	   control.  Incorrect processing can lead to the practice of slamming
3292	   where an attacker changes the set of trusted anchors in order to
3293	   weaken security.

3295	   One method of controlling the use of the Publish Trust Anchors
3296	   control is as follows.  The client needs to associate with each trust
3297	   anchor accepted by the client the source of the trust anchor.
3298	   Additionally, the client should associate with each trust anchor the
3299	   types of messages for which the trust anchor is valid (i.e., is the
3300	   trust anchor used for validating S/MIME messages, TLS, or CMC
3301	   enrollment messages?).

3303	   When a new message is received with a Publish Trust Anchors control,
3304	   the client would accept the set of new trust anchors for specific
3305	   applications only if the signature validates, the signer of the
3306	   message has the required policy approval for updating the trust
3307	   anchors, and local policy also would allow updating the trust
3308	   anchors.

3310	   The CMS AuthenticatedData structure provides message integrity, it
3311	   does not provide message authentication in all cases.  When using
3312	   MACs in this document the following restrictions need to be observed.
3313	   All messages should be for a single entity.  If two entities are
3314	   placed in a single message, the entities can generate new messages
3315	   that have a valid MAC and might be assumed to be from the original
3316	   message sender.  All entities that have access to the shared-secret
3317	   can generate messages that will have a successful MAC validation.
3318	   This means that care must be taken to keep this value secret.
3319	   Whenever possible, the SignedData structure should be used in
3320	   preference to the AuthenticatedData structure.

3322	   A number of controls such as the RA Identity Proof Witness control
3323	   exist for an RA to either make assertions about or modify a
3324	   certification request.  Any upstream request processor, such as a CA,
3325	   MUST verify that the RA is fully identified and authorized to make
3326	   the assertion or modification it is claiming.  If it is not
3327	   identified or authorized, then any request MUST be rejected.

3329	   CMC servers, both RAs and CAs, need to perform due diligence in
3330	   checking the contents of a certification request.  At an absolute
3331	   minimum, all fields should be checked to ensure that the policies of
3332	   the CA/RA are correctly enforced.  While all fields need to be
3333	   checked, special care should be taken with names, name forms,
3334	   algorithm choices, and algorithm parameters.

3336	11.  IANA Considerations

3338	   This document defines a number of control objects.  These are
3339	   identified by Object Identifiers (OIDs).  The objects are defined
3340	   from an arc delegated by IANA to the PKIX Working Group.

3342	   For the ASN.1 modules in Appendix A, IANA is requested to assign an
3343	   OID for the module identifier (TBD1) with a Description of "id-mod-
3344	   enrollMsgSyntax-2025" and an OID for the module identifier (TBD2)
3345	   with a Description of "id-mod-pbkdf2-prfs-2025".  The OIDs for the
3346	   modules should be allocated in the "SMI Security for PKIX Module
3347	   Identifier" registry (1.3.6.1.5.5.7.0).

3349	   IANA is requested to update the existing references to [CMC-PROTv1]
3350	   in the Structure of Management Information (SMI) Numbers (MIB Module
3351	   Registrations) registry group with [ RFC-to-be ] for the following:

3353	   *  id-aa-cmc-unsignedData

3355	   *  id-cmc-statusInfoV2

3357	   *  id-cmc-trustedAnchors

3359	   *  id-cmc-authData

3361	   *  id-cmc-batchRequests

3363	   *  id-cmc-batchResponses

3365	   *  id-cmc-publishCert

3367	   *  id-cmc-modCertTemplate

3369	   *  id-cmc-controlProcessed
3370	   *  id-cmc-popLinkWitnessV2

3372	   *  id-cmc-identityProofV2

3374	12.  References

3376	12.1.  Normative References

3378	   [CMS]      Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
3379	              RFC 5652, DOI 10.17487/RFC5652, September 2009,
3380	              <https://www.rfc-editor.org/rfc/rfc5652>.

3382	   [CMS-ALGS] Hoffman, P. and J. Schaad, "New ASN.1 Modules for
3383	              Cryptographic Message Syntax (CMS) and S/MIME", RFC 5911,
3384	              DOI 10.17487/RFC5911, June 2010,
3385	              <https://www.rfc-editor.org/rfc/rfc5911>.

3387	   [CRMF]     Schaad, J., "Internet X.509 Public Key Infrastructure
3388	              Certificate Request Message Format (CRMF)", RFC 4211,
3389	              DOI 10.17487/RFC4211, September 2005,
3390	              <https://www.rfc-editor.org/rfc/rfc4211>.

3392	   [DH-POP]   Schaad, J. and H. Prafullchandra, "Diffie-Hellman Proof-
3393	              of-Possession Algorithms", RFC 6955, DOI 10.17487/RFC6955,
3394	              May 2013, <https://www.rfc-editor.org/rfc/rfc6955>.

3396	   [HMAC-ALGS]
3397	              Schaad, J. and S. Turner, "Additional New ASN.1 Modules
3398	              for the Cryptographic Message Syntax (CMS) and the Public
3399	              Key Infrastructure Using X.509 (PKIX)", RFC 6268,
3400	              DOI 10.17487/RFC6268, July 2011,
3401	              <https://www.rfc-editor.org/rfc/rfc6268>.

3403	   [PKCS10]   Nystrom, M. and B. Kaliski, "PKCS #10: Certification
3404	              Request Syntax Specification Version 1.7", RFC 2986,
3405	              DOI 10.17487/RFC2986, November 2000,
3406	              <https://www.rfc-editor.org/rfc/rfc2986>.

3408	   [PKIX-ALGS]
3409	              Hoffman, P. and J. Schaad, "New ASN.1 Modules for the
3410	              Public Key Infrastructure Using X.509 (PKIX)", RFC 5912,
3411	              DOI 10.17487/RFC5912, June 2010,
3412	              <https://www.rfc-editor.org/rfc/rfc5912>.

3414	   [PKIXCERT] Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
3415	              Housley, R., and W. Polk, "Internet X.509 Public Key
3416	              Infrastructure Certificate and Certificate Revocation List
3417	              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
3418	              <https://www.rfc-editor.org/rfc/rfc5280>.

3420	   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
3421	              Requirement Levels", BCP 14, RFC 2119,
3422	              DOI 10.17487/RFC2119, March 1997,
3423	              <https://www.rfc-editor.org/rfc/rfc2119>.

3425	   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
3426	              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
3427	              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

3429	12.2.  Informative References

3431	   [CMC-COMPL]
3432	              Mandel, J. and S. Turner, "Certificate Management Messages
3433	              over CMS (CMC): Compliance Requirements", Work in
3434	              Progress, Internet-Draft, draft-ietf-lamps-rfc5274bis-07,
3435	              29 August 2025, <https://datatracker.ietf.org/doc/html/
3436	              draft-ietf-lamps-rfc5274bis-07>.

3438	   [CMC-PROTv1]
3439	              Schaad, J. and M. Myers, "Certificate Management over CMS
3440	              (CMC)", RFC 5272, DOI 10.17487/RFC5272, June 2008,
3441	              <https://www.rfc-editor.org/rfc/rfc5272>.

3443	   [CMC-TRANS]
3444	              Mandel, J. and S. Turner, "Certificate Management over CMS
3445	              (CMC): Transport Protocols", Work in Progress, Internet-
3446	              Draft, draft-ietf-lamps-rfc5273bis-07, 29 August 2025,
3447	              <https://datatracker.ietf.org/doc/html/draft-ietf-lamps-
3448	              rfc5273bis-07>.

3450	   [CMC-Updates]
3451	              Schaad, J., "Certificate Management over CMS (CMC)
3452	              Updates", RFC 6402, DOI 10.17487/RFC6402, November 2011,
3453	              <https://www.rfc-editor.org/rfc/rfc6402>.

3455	   [CMS-RI]   Housley, R., Gray, J., and T. Okubo, "Using Key
3456	              Encapsulation Mechanism (KEM) Algorithms in the
3457	              Cryptographic Message Syntax (CMS)", RFC 9629,
3458	              DOI 10.17487/RFC9629, August 2024,
3459	              <https://www.rfc-editor.org/rfc/rfc9629>.

3461	   [erratum2063]
3462	              "RFC 5272 erratum 2063", 4 March 2010,
3463	              <https://www.rfc-editor.org/errata/eid2063>.

3465	   [erratum2731]
3466	              "RFC 5272 erratum 2731", 23 February 2011,
3467	              <https://www.rfc-editor.org/errata/eid2731>.

3469	   [erratum3943]
3470	              "RFC 6402 erratum 3943", 2 April 2014,
3471	              <https://www.rfc-editor.org/errata/eid3943>.

3473	   [erratum4775]
3474	              "RFC 5272 erratum 4775", 11 August 2016,
3475	              <https://www.rfc-editor.org/errata/eid4775>.

3477	   [erratum5931]
3478	              "RFC 6402 erratum 5931", 7 December 2019,
3479	              <https://www.rfc-editor.org/errata/eid5931>.

3481	   [erratum6571]
3482	              "RFC 6402 erratum 6571", 4 May 2021,
3483	              <https://www.rfc-editor.org/errata/eid6571>.

3485	   [erratum7379]
3486	              "RFC 5272 erratum 7379", 8 March 2023,
3487	              <https://www.rfc-editor.org/errata/eid7379>.

3489	   [erratum7627]
3490	              "RFC 5272 erratum 7627", 4 September 2023,
3491	              <https://www.rfc-editor.org/errata/eid7627>.

3493	   [erratum7628]
3494	              "RFC 5272 erratum 7628", 4 September 2023,
3495	              <https://www.rfc-editor.org/errata/eid7628>.

3497	   [erratum7629]
3498	              "RFC 5272 erratum 7629", 4 September 2023,
3499	              <https://www.rfc-editor.org/errata/eid7629>.

3501	   [erratum8027]
3502	              "RFC 5272 erratum 8027", 11 July 2024,
3503	              <https://www.rfc-editor.org/errata/eid8027>.

3505	   [erratum8137]
3506	              "RFC 5272 erratum 8137", 12 October 2024,
3507	              <https://www.rfc-editor.org/errata/eid8137>.

3509	   [erratum8385]
3510	              "RFC 6402 erratum 8385", 18 April 2025,
3511	              <https://www.rfc-editor.org/errata/eid8385>.

3513	   [PASSWORD] Grassi, P., Garcia, M., and J. Fenton, "Digital identity
3514	              guidelines: revision 3", National Institute of Standards
3515	              and Technology, DOI 10.6028/nist.sp.800-63-3, June 2017,
3516	              <https://doi.org/10.6028/nist.sp.800-63-3>.

3518	   [RANDOM]   Eastlake 3rd, D., Schiller, J., and S. Crocker,
3519	              "Randomness Requirements for Security", BCP 106, RFC 4086,
3520	              DOI 10.17487/RFC4086, June 2005,
3521	              <https://www.rfc-editor.org/rfc/rfc4086>.

3523	   [RFC2797]  Myers, M., Liu, X., Schaad, J., and J. Weinstein,
3524	              "Certificate Management Messages over CMS", RFC 2797,
3525	              DOI 10.17487/RFC2797, April 2000,
3526	              <https://www.rfc-editor.org/rfc/rfc2797>.

3528	   [SMALL-GROUP]
3529	              Zuccherato, R., "Methods for Avoiding the "Small-Subgroup"
3530	              Attacks on the Diffie-Hellman Key Agreement Method for S/
3531	              MIME", RFC 2785, DOI 10.17487/RFC2785, March 2000,
3532	              <https://www.rfc-editor.org/rfc/rfc2785>.

3534	   [X942]     Rescorla, E., "Diffie-Hellman Key Agreement Method",
3535	              RFC 2631, DOI 10.17487/RFC2631, June 1999,
3536	              <https://www.rfc-editor.org/rfc/rfc2631>.

3538	Appendix A.  ASN.1 Modules

3540	A.1.  ASN.1 Module for CMC

3542	   <CODE BEGINS>
3543	   EnrollmentMessageSyntax-2025
3544	       { iso(1) identified-organization(3) dod(6) internet(1)
3545	       security(5) mechanisms(5) pkix(7) id-mod(0)
3546	       id-mod-enrollMsgSyntax-2025(TBD1) }

3548	   DEFINITIONS IMPLICIT TAGS ::=

3550	   BEGIN

3552	     EXPORTS ALL;

3554	     IMPORTS

3556	     AttributeSet{}, Extension{}, EXTENSION, ATTRIBUTE
3557	     FROM PKIX-CommonTypes-2009
3558	         { iso(1) identified-organization(3) dod(6) internet(1) security(5)
3559	         mechanisms(5) pkix(7) id-mod(0) id-mod-pkixCommon-02(57) }

3561	     AlgorithmIdentifier{}, DIGEST-ALGORITHM, KEY-WRAP, KEY-DERIVATION,
3562	         MAC-ALGORITHM, SIGNATURE-ALGORITHM, PUBLIC-KEY
3563	     FROM AlgorithmInformation-2009
3564	         {iso(1) identified-organization(3) dod(6) internet(1) security(5)
3565	         mechanisms(5) pkix(7) id-mod(0)
3566	         id-mod-algorithmInformation-02(58)}

3568	     CertificateSerialNumber, GeneralName, CRLReason, ReasonFlags,
3569	         CertExtensions, GeneralNames
3570	     FROM PKIX1Implicit-2009
3571	         { iso(1) identified-organization(3) dod(6) internet(1) security(5)
3572	         mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59) }

3574	     Name, id-pkix, PublicKeyAlgorithms, SignatureAlgorithms, id-ad, id-kp
3575	     FROM PKIX1Explicit-2009
3576	         { iso(1) identified-organization(3) dod(6) internet(1) security(5)
3577	           mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-explicit-02(51) }

3579	     ContentInfo, IssuerAndSerialNumber, CONTENT-TYPE
3580	     FROM CryptographicMessageSyntax-2010
3581	       { iso(1) member-body(2) us(840) rsadsi(113549)
3582	          pkcs(1) pkcs-9(9) smime(16) modules(0) id-mod-cms-2009(58) }

3584	     CertReqMsg, PKIPublicationInfo, CertTemplate
3585	     FROM PKIXCRMF-2009
3586	         { iso(1) identified-organization(3) dod(6) internet(1) security(5)
3587	           mechanisms(5) pkix(7) id-mod(0) id-mod-crmf2005-02(55) }

3589	     mda-sha1
3590	     FROM PKIXAlgs-2009
3591	          { iso(1) identified-organization(3) dod(6)
3592	            internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
3593	            id-mod-pkix1-algorithms2008-02(56) }

3595	     maca-hMAC-SHA1
3596	     FROM CryptographicMessageSyntaxAlgorithms-2009
3597	         { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
3598	           smime(16) modules(0) id-mod-cmsalg-2001-02(37) }

3600	     mda-sha256
3601	     FROM PKIX1-PSS-OAEP-Algorithms-2009
3602	          { iso(1) identified-organization(3) dod(6)
3603	            internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
3604	            id-mod-pkix1-rsa-pkalgs-02(54) }

3606	     maca-hMAC-SHA256
3607	     FROM HMAC-2010
3608	         { iso(1) identified-organization(3) dod(6) internet(1)
3609	           security(5) mechanisms(5) pkix(7) mod(0) id-mod-hmac(74) }

3611	     kda-PBKDF2
3612	     FROM PBKDF2-PRFs-2025
3613	         { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
3614	           smime(16) modules(0) id-mod-pbkdf2-prfs-2025(TBD2) } ;

3616	     --  CMS content types defined in this document

3618	     CMC-ContentTypes CONTENT-TYPE ::= { ct-PKIData | ct-PKIResponse, ... }

3620	     --  Signature Algorithms defined in this document

3622	     SignatureAlgs SIGNATURE-ALGORITHM ::= { sa-noSignature }

3624	     --  CMS Unsigned Attributes

3626	     CMC-UnsignedAtts ATTRIBUTE ::= { aa-cmc-unsignedData }

3628	     id-cmc OBJECT IDENTIFIER ::= { id-pkix 7 }   -- CMC controls
3629	     id-cct OBJECT IDENTIFIER ::= { id-pkix 12 }  -- CMC content types

3631	     -- This is the content type for a request message in the protocol

3633	     ct-PKIData CONTENT-TYPE ::=
3634	         { TYPE PKIData IDENTIFIED BY id-cct-PKIData }

3636	     id-cct-PKIData OBJECT IDENTIFIER ::= { id-cct 2 }

3638	     PKIData ::= SEQUENCE {
3639	         controlSequence    SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
3640	         reqSequence        SEQUENCE SIZE(0..MAX) OF TaggedRequest,
3641	         cmsSequence        SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
3642	         otherMsgSequence   SEQUENCE SIZE(0..MAX) OF OtherMsg
3643	     }

3645	     BodyPartID ::= INTEGER(0..4294967295)

3647	     TaggedAttribute ::= SEQUENCE {
3648	         bodyPartID         BodyPartID,
3649	         attrType           CMC-CONTROL.&id({Cmc-Control-Set}),
3650	         attrValues         SET OF CMC-CONTROL.
3651	                                &Type({Cmc-Control-Set}{@attrType})
3652	     }
3653	     Cmc-Control-Set CMC-CONTROL ::= {
3654	         cmc-identityProof | cmc-dataReturn | cmc-regInfo |
3655	         cmc-responseInfo | cmc-queryPending | cmc-popLinkRandom |
3656	         cmc-popLinkWitness | cmc-identification | cmc-transactionId |
3657	         cmc-senderNonce | cmc-recipientNonce | cmc-statusInfo |
3658	         cmc-addExtensions | cmc-encryptedPOP | cmc-decryptedPOP |
3659	         cmc-lraPOPWitness | cmc-getCert | cmc-getCRL |
3660	         cmc-revokeRequest | cmc-confirmCertAcceptance |
3661	         cmc-statusInfoV2 | cmc-trustedAnchors | cmc-authData |
3662	         cmc-batchRequests | cmc-batchResponses | cmc-publishCert |
3663	         cmc-modCertTemplate | cmc-controlProcessed |
3664	         cmc-identityProofV2 | cmc-popLinkWitnessV2 |
3665	         cmc-raIdentityWitness | cmc-responseBody, ... }

3667	     OTHER-REQUEST ::= TYPE-IDENTIFIER

3669	     --  We do not define any other requests in this document.
3670	     --  Examples might be attribute certification requests.

3672	     OtherRequests OTHER-REQUEST ::= {...}

3674	     TaggedRequest ::= CHOICE {
3675	         tcr               [0] TaggedCertificationRequest,
3676	         crm               [1] CertReqMsg,
3677	         orm               [2] SEQUENCE {
3678	             bodyPartID            BodyPartID,
3679	             requestMessageType    OTHER-REQUEST.&id({OtherRequests}),
3680	             requestMessageValue   OTHER-REQUEST.&Type({OtherRequests}
3681	                                       {@.requestMessageType})
3682	         }
3683	     }

3685	     TaggedCertificationRequest ::= SEQUENCE {
3686	         bodyPartID            BodyPartID,
3687	         certificationRequest  CertificationRequest
3688	     }

3690	     AttributeList ATTRIBUTE ::= { at-extension-req |
3691	         at-cmc-changeSubjectName, ... }

3693	     CertificationRequest ::= SEQUENCE {
3694	        certificationRequestInfo  SEQUENCE {
3695	            version                   INTEGER,
3696	            subject                   Name,
3697	            subjectPublicKeyInfo      SEQUENCE {
3698	                algorithm                 AlgorithmIdentifier{PUBLIC-KEY,
3699	                                              {PublicKeyAlgorithms}},
3700	                subjectPublicKey          BIT STRING

3702	            },
3703	            attributes                [0] IMPLICIT SET OF
3704	                                          AttributeSet{{AttributeList}}
3705	         },
3706	         signatureAlgorithm        AlgorithmIdentifier
3707	                                       {SIGNATURE-ALGORITHM,
3708	                                           {SignatureAlgorithms}},
3709	         signature                 BIT STRING
3710	     }

3712	     TaggedContentInfo ::= SEQUENCE {
3713	         bodyPartID              BodyPartID,
3714	         contentInfo             ContentInfo
3715	     }

3717	     OTHER-MSG ::= TYPE-IDENTIFIER

3719	     --  No other messages currently defined

3721	     OtherMsgSet OTHER-MSG ::= {...}

3723	     OtherMsg ::= SEQUENCE {
3724	         bodyPartID        BodyPartID,
3725	         otherMsgType      OTHER-MSG.&id({OtherMsgSet}),
3726	         otherMsgValue     OTHER-MSG.&Type({OtherMsgSet}{@otherMsgType}) }

3728	     --  This defines the response message in the protocol

3730	     ct-PKIResponse CONTENT-TYPE ::=
3731	         { TYPE PKIResponse IDENTIFIED BY id-cct-PKIResponse }

3733	     id-cct-PKIResponse OBJECT IDENTIFIER ::= { id-cct 3 }

3735	     ResponseBody ::= PKIResponse

3737	     PKIResponse ::= SEQUENCE {
3738	         controlSequence   SEQUENCE SIZE(0..MAX) OF TaggedAttribute,
3739	         cmsSequence       SEQUENCE SIZE(0..MAX) OF TaggedContentInfo,
3740	         otherMsgSequence  SEQUENCE SIZE(0..MAX) OF OtherMsg
3741	     }

3743	     CMC-CONTROL ::= TYPE-IDENTIFIER

3745	     -- The following controls have the type OCTET STRING

3747	     cmc-identityProof CMC-CONTROL ::=
3748	         { OCTET STRING IDENTIFIED BY id-cmc-identityProof }

3750	     id-cmc-identityProof OBJECT IDENTIFIER ::= { id-cmc 3 }

3752	     cmc-dataReturn CMC-CONTROL ::=
3753	         { OCTET STRING IDENTIFIED BY id-cmc-dataReturn }

3755	     id-cmc-dataReturn OBJECT IDENTIFIER ::= { id-cmc 4 }

3757	     cmc-regInfo CMC-CONTROL ::=
3758	         { OCTET STRING IDENTIFIED BY id-cmc-regInfo }

3760	     id-cmc-regInfo OBJECT IDENTIFIER ::= { id-cmc 18 }

3762	     cmc-responseInfo CMC-CONTROL ::=
3763	         { OCTET STRING IDENTIFIED BY id-cmc-responseInfo }

3765	     id-cmc-responseInfo OBJECT IDENTIFIER ::= { id-cmc 19 }

3767	     cmc-queryPending CMC-CONTROL ::=
3768	         { OCTET STRING IDENTIFIED BY id-cmc-queryPending }

3770	     id-cmc-queryPending OBJECT IDENTIFIER ::= { id-cmc 21 }

3772	     cmc-popLinkRandom CMC-CONTROL ::=
3773	         { OCTET STRING IDENTIFIED BY id-cmc-popLinkRandom }

3775	     id-cmc-popLinkRandom OBJECT IDENTIFIER ::= { id-cmc 22 }

3777	     cmc-popLinkWitness CMC-CONTROL ::=
3778	         { OCTET STRING IDENTIFIED BY id-cmc-popLinkWitness }

3780	     id-cmc-popLinkWitness OBJECT IDENTIFIER ::= { id-cmc 23 }

3782	     -- The following controls have the type UTF8String

3784	     cmc-identification CMC-CONTROL ::=
3785	         { UTF8String IDENTIFIED BY id-cmc-identification }

3787	     id-cmc-identification OBJECT IDENTIFIER ::= { id-cmc 2 }

3789	     -- The following controls have the type INTEGER

3791	     cmc-transactionId CMC-CONTROL ::=
3792	         { INTEGER IDENTIFIED BY id-cmc-transactionId }

3794	     id-cmc-transactionId OBJECT IDENTIFIER ::= { id-cmc 5 }

3796	     -- The following controls have the type OCTET STRING
3797	     cmc-senderNonce CMC-CONTROL ::=
3798	         { OCTET STRING IDENTIFIED BY id-cmc-senderNonce }

3800	     id-cmc-senderNonce OBJECT IDENTIFIER ::= { id-cmc 6 }

3802	     cmc-recipientNonce CMC-CONTROL ::=
3803	         { OCTET STRING IDENTIFIED BY id-cmc-recipientNonce }

3805	     id-cmc-recipientNonce OBJECT IDENTIFIER ::= { id-cmc 7 }

3807	     -- Used to return status in a response

3809	     cmc-statusInfo CMC-CONTROL ::=
3810	         { CMCStatusInfo IDENTIFIED BY id-cmc-statusInfo }

3812	     id-cmc-statusInfo OBJECT IDENTIFIER ::= { id-cmc 1 }

3814	     CMCStatusInfo ::= SEQUENCE {
3815	         cMCStatus       CMCStatus,
3816	         bodyList        SEQUENCE SIZE (1..MAX) OF BodyPartID,
3817	         statusString    UTF8String OPTIONAL,
3818	         otherInfo       CHOICE {
3819	            failInfo         CMCFailInfo,
3820	            pendInfo         PendInfo
3821	         } OPTIONAL
3822	     }

3824	     PendInfo ::= SEQUENCE {
3825	         pendToken        OCTET STRING,
3826	         pendTime         GeneralizedTime
3827	     }

3829	     CMCStatus ::= INTEGER {
3830	         success         (0),
3831	         failed          (2),
3832	         pending         (3),
3833	         noSupport       (4),
3834	         confirmRequired (5),
3835	         popRequired     (6),
3836	         partial         (7)
3837	     }

3839	     CMCFailInfo ::= INTEGER {
3840	         badAlg          (0),
3841	         badMessageCheck (1),
3842	         badRequest      (2),
3843	         badTime         (3),
3844	         badCertId       (4),
3845	         unsuportedExt   (5),
3846	         mustArchiveKeys (6),
3847	         badIdentity     (7),
3848	         popRequired     (8),
3849	         popFailed       (9),
3850	         noKeyReuse      (10),
3851	         internalCAError (11),
3852	         tryLater        (12),
3853	         authDataFail    (13)
3854	     }

3856	     -- Used for RAs to add extensions to certification requests

3858	     cmc-addExtensions CMC-CONTROL ::=
3859	         { AddExtensions IDENTIFIED BY id-cmc-addExtensions }

3861	     id-cmc-addExtensions OBJECT IDENTIFIER ::= { id-cmc 8 }

3863	     AddExtensions ::= SEQUENCE {
3864	         pkiDataReference    BodyPartID,
3865	         certReferences      SEQUENCE OF BodyPartID,
3866	         extensions          SEQUENCE OF Extension{{CertExtensions}}
3867	     }

3869	     cmc-encryptedPOP CMC-CONTROL ::=
3870	         { EncryptedPOP IDENTIFIED BY id-cmc-encryptedPOP }

3872	     cmc-decryptedPOP CMC-CONTROL ::=
3873	         { DecryptedPOP IDENTIFIED BY id-cmc-decryptedPOP }

3875	     id-cmc-encryptedPOP OBJECT IDENTIFIER ::= { id-cmc 9 }

3877	     id-cmc-decryptedPOP OBJECT IDENTIFIER ::= { id-cmc 10 }

3879	     EncryptedPOP ::= SEQUENCE {
3880	         request       TaggedRequest,
3881	         cms             ContentInfo,
3882	         thePOPAlgID     AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},
3883	         witnessAlgID    AlgorithmIdentifier{DIGEST-ALGORITHM,
3884	                             {WitnessAlgs}},
3885	         witness         OCTET STRING
3886	     }

3888	     POPAlgs MAC-ALGORITHM ::= { maca-hMAC-SHA1 | maca-hMAC-SHA256, ... }

3890	     WitnessAlgs DIGEST-ALGORITHM ::= { mda-sha1 | mda-sha256, ... }

3892	     DecryptedPOP ::= SEQUENCE {
3893	         bodyPartID      BodyPartID,
3894	         thePOPAlgID     AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},
3895	         thePOP          OCTET STRING
3896	     }

3898	     cmc-lraPOPWitness CMC-CONTROL ::=
3899	         { LraPopWitness IDENTIFIED BY id-cmc-lraPOPWitness }

3901	     id-cmc-lraPOPWitness OBJECT IDENTIFIER ::= { id-cmc 11 }

3903	     LraPopWitness ::= SEQUENCE {
3904	         pkiDataBodyid   BodyPartID,
3905	         bodyIds         SEQUENCE OF BodyPartID
3906	     }

3908	     cmc-getCert CMC-CONTROL ::=
3909	         { GetCert IDENTIFIED BY id-cmc-getCert }

3911	     id-cmc-getCert OBJECT IDENTIFIER ::= { id-cmc 15 }

3913	     GetCert ::= SEQUENCE {
3914	         issuerName      GeneralName,
3915	         serialNumber    INTEGER }

3917	     cmc-getCRL CMC-CONTROL ::=
3918	         { GetCRL IDENTIFIED BY id-cmc-getCRL }

3920	     id-cmc-getCRL OBJECT IDENTIFIER ::= { id-cmc 16 }

3922	     GetCRL ::= SEQUENCE {
3923	         issuerName    Name,
3924	         cRLName       GeneralName OPTIONAL,
3925	         time          GeneralizedTime OPTIONAL,
3926	         reasons       ReasonFlags OPTIONAL }

3928	     cmc-revokeRequest CMC-CONTROL ::=
3929	         { RevokeRequest IDENTIFIED BY id-cmc-revokeRequest}

3931	     id-cmc-revokeRequest OBJECT IDENTIFIER ::= { id-cmc 17 }

3933	     RevokeRequest ::= SEQUENCE {
3934	         issuerName            Name,
3935	         serialNumber          INTEGER,
3936	         reason                CRLReason,
3937	         invalidityDate         GeneralizedTime OPTIONAL,
3938	         passphrase            OCTET STRING OPTIONAL,
3939	         comment               UTF8String OPTIONAL }

3941	     cmc-confirmCertAcceptance CMC-CONTROL ::=
3942	         { CMCCertId IDENTIFIED BY id-cmc-confirmCertAcceptance }

3944	     id-cmc-confirmCertAcceptance OBJECT IDENTIFIER ::= { id-cmc 24 }

3946	     CMCCertId ::= IssuerAndSerialNumber

3948	     -- The following is used to request V3 extensions be added
3949	     -- to a certificate

3951	     at-extension-req ATTRIBUTE ::=
3952	         { TYPE ExtensionReq IDENTIFIED BY id-ExtensionReq }

3954	     id-ExtensionReq OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
3955	         rsadsi(113549) pkcs(1) pkcs-9(9) 14 }

3957	     ExtensionReq ::= SEQUENCE SIZE (1..MAX) OF
3958	         Extension{{CertExtensions}}

3960	     -- The following allows Diffie-Hellman Certification Request
3961	     -- Messages to be well-formed

3963	     sa-noSignature SIGNATURE-ALGORITHM ::= {
3964	         IDENTIFIER id-alg-noSignature
3965	         VALUE NoSignatureValue
3966	         PARAMS TYPE NULL ARE required
3967	         HASHES { mda-sha1 }
3968	     }

3970	     id-alg-noSignature OBJECT IDENTIFIER ::= { id-pkix id-alg(6) 2 }

3972	     NoSignatureValue ::= OCTET STRING

3974	     --  Unauthenticated attribute to carry removable data.

3976	     id-aa OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
3977	         rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) }

3979	     aa-cmc-unsignedData ATTRIBUTE ::=
3980	         { TYPE CMCUnsignedData IDENTIFIED BY id-aa-cmc-unsignedData }

3982	     id-aa-cmc-unsignedData OBJECT IDENTIFIER ::= { id-aa 34 }

3984	     CMCUnsignedData ::= SEQUENCE {
3985	         bodyPartPath        BodyPartPath,
3986	         identifier          TYPE-IDENTIFIER.&id,
3987	         content             TYPE-IDENTIFIER.&Type
3988	     }
3989	     --  Replaces CMC Status Info
3990	     --

3992	     cmc-statusInfoV2 CMC-CONTROL ::=
3993	         { CMCStatusInfoV2 IDENTIFIED BY id-cmc-statusInfoV2 }

3995	     id-cmc-statusInfoV2 OBJECT IDENTIFIER ::= { id-cmc 25 }

3997	     EXTENDED-FAILURE-INFO ::= TYPE-IDENTIFIER

3999	     ExtendedFailures EXTENDED-FAILURE-INFO ::= {...}

4001	     CMCStatusInfoV2 ::= SEQUENCE {
4002	        cMCStatus             CMCStatus,
4003	        bodyList              SEQUENCE SIZE (1..MAX) OF
4004	                                       BodyPartReference,
4005	        statusString          UTF8String OPTIONAL,
4006	        otherInfo             CHOICE {
4007	            failInfo               CMCFailInfo,
4008	            pendInfo               PendInfo,
4009	            extendedFailInfo       [1] SEQUENCE {
4010	               failInfoOID            TYPE-IDENTIFIER.&id
4011	                                          ({ExtendedFailures}),
4012	               failInfoValue          TYPE-IDENTIFIER.&Type
4013	                                          ({ExtendedFailures}
4014	                                              {@.failInfoOID})
4015	            }
4016	         } OPTIONAL
4017	     }

4019	     BodyPartReference ::= CHOICE {
4020	        bodyPartID           BodyPartID,
4021	        bodyPartPath         BodyPartPath
4022	     }

4024	     BodyPartPath ::= SEQUENCE SIZE (1..MAX) OF BodyPartID

4026	     --  Allow for distribution of trust anchors

4028	     cmc-trustedAnchors CMC-CONTROL ::=
4029	         { PublishTrustAnchors IDENTIFIED BY id-cmc-trustedAnchors }

4031	     id-cmc-trustedAnchors OBJECT IDENTIFIER ::= { id-cmc 26 }

4033	     PublishTrustAnchors ::= SEQUENCE {
4034	         seqNumber      INTEGER,
4035	         hashAlgorithm  AlgorithmIdentifier{DIGEST-ALGORITHM,
4036	                            {HashAlgorithms}},

4038	         anchorHashes   SEQUENCE OF OCTET STRING
4039	     }

4041	     HashAlgorithms DIGEST-ALGORITHM ::= {
4042	        mda-sha1 | mda-sha256, ...
4043	     }

4045	     cmc-authData CMC-CONTROL ::=
4046	         { AuthPublish IDENTIFIED BY id-cmc-authData }

4048	     id-cmc-authData OBJECT IDENTIFIER ::= { id-cmc 27 }

4050	     AuthPublish ::= BodyPartID

4052	     --   These two items use BodyPartList

4054	     cmc-batchRequests CMC-CONTROL ::=
4055	         { BodyPartList IDENTIFIED BY id-cmc-batchRequests }

4057	     id-cmc-batchRequests OBJECT IDENTIFIER ::= { id-cmc 28 }

4059	     cmc-batchResponses CMC-CONTROL ::=
4060	         { BodyPartList IDENTIFIED BY id-cmc-batchResponses }

4062	     id-cmc-batchResponses OBJECT IDENTIFIER ::= { id-cmc 29 }

4064	     BodyPartList ::= SEQUENCE SIZE (1..MAX) OF BodyPartID

4066	     cmc-publishCert CMC-CONTROL ::=
4067	         { CMCPublicationInfo IDENTIFIED BY id-cmc-publishCert }

4069	     id-cmc-publishCert OBJECT IDENTIFIER ::= { id-cmc 30 }

4071	     CMCPublicationInfo ::= SEQUENCE {
4072	         hashAlg        AlgorithmIdentifier{DIGEST-ALGORITHM,
4073	                              {HashAlgorithms}},
4074	         certHashes     SEQUENCE OF OCTET STRING,
4075	         pubInfo        PKIPublicationInfo
4076	     }

4078	     cmc-modCertTemplate CMC-CONTROL ::=
4079	         { ModCertTemplate IDENTIFIED BY id-cmc-modCertTemplate }

4081	     id-cmc-modCertTemplate OBJECT IDENTIFIER ::= { id-cmc 31 }

4083	     ModCertTemplate ::= SEQUENCE {
4084	         pkiDataReference             BodyPartPath,
4085	         certReferences               BodyPartList,
4086	         replace                      BOOLEAN DEFAULT TRUE,
4087	         certTemplate                 CertTemplate
4088	     }

4090	     -- Inform follow-on servers that one or more controls have
4091	     -- already been processed

4093	     cmc-controlProcessed CMC-CONTROL ::=
4094	         { ControlsProcessed IDENTIFIED BY id-cmc-controlProcessed }

4096	     id-cmc-controlProcessed OBJECT IDENTIFIER ::= { id-cmc 32 }

4098	     ControlsProcessed ::= SEQUENCE {
4099	         bodyList              SEQUENCE SIZE(1..MAX) OF BodyPartReference
4100	     }

4102	     --  Identity Proof control w/ algorithm agility

4104	     cmc-identityProofV2 CMC-CONTROL ::=
4105	         { IdentityProofV2 IDENTIFIED BY id-cmc-identityProofV2 }

4107	     id-cmc-identityProofV2 OBJECT IDENTIFIER ::= { id-cmc 33 }

4109	     IdentityProofV2 ::= SEQUENCE {
4110	         proofAlgID       AlgorithmIdentifier{DIGEST-ALGORITHM,
4111	                              {WitnessAlgs}},
4112	         macAlgId         AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},
4113	         witness          OCTET STRING
4114	     }

4116	     cmc-popLinkWitnessV2 CMC-CONTROL ::=
4117	         { PopLinkWitnessV2 IDENTIFIED BY id-cmc-popLinkWitnessV2 }

4119	     id-cmc-popLinkWitnessV2 OBJECT IDENTIFIER ::= { id-cmc 34 }

4121	     PopLinkWitnessV2 ::= SEQUENCE {
4122	         keyGenAlgorithm   AlgorithmIdentifier{KEY-DERIVATION,
4123	                               {KeyDevAlgs}},
4124	         macAlgorithm      AlgorithmIdentifier{MAC-ALGORITHM, {POPAlgs}},
4125	         witness           OCTET STRING
4126	     }

4128	     KeyDevAlgs KEY-DERIVATION ::= { kda-PBKDF2, ... }

4130	     cmc-raIdentityWitness CMC-CONTROL ::=
4131	        { BodyPartPath IDENTIFIED BY id-cmc-raIdentityWitness }

4133	     id-cmc-raIdentityWitness OBJECT IDENTIFIER ::= {id-cmc 35}
4134	     --
4135	     --  Allow for an End-Entity to request a change in name.
4136	     --  This item is added to RegControlSet in CRMF.
4137	     --
4138	     at-cmc-changeSubjectName ATTRIBUTE ::=
4139	        { TYPE ChangeSubjectName IDENTIFIED BY id-cmc-changeSubjectName }

4141	     id-cmc-changeSubjectName OBJECT IDENTIFIER ::= { id-cmc 36 }

4143	     ChangeSubjectName ::= SEQUENCE {
4144	         subject             Name OPTIONAL,
4145	         subjectAlt          [1] GeneralNames OPTIONAL
4146	     }
4147	     (WITH COMPONENTS {..., subject PRESENT} |
4148	      WITH COMPONENTS {..., subjectAlt PRESENT} )

4150	     --
4151	     --  Embedded response from a third party for processing
4152	     --

4154	     cmc-responseBody CMC-CONTROL ::= {
4155	        BodyPartPath IDENTIFIED BY id-cmc-responseBody
4156	     }

4158	     id-cmc-responseBody OBJECT IDENTIFIER ::= { id-cmc 37 }

4160	     --
4161	     --  Key purpose identifiers are in the Extended Key Usage extension
4162	     --

4164	     id-kp-cmcCA OBJECT IDENTIFIER ::= { id-kp 27 }
4165	     id-kp-cmcRA OBJECT IDENTIFIER ::= { id-kp 28 }
4166	     id-kp-cmcArchive OBJECT IDENTIFIER ::= { id-kp 29 }

4168	     --
4169	     --  Subject Information Access identifier
4170	     --

4172	     id-ad-cmc OBJECT IDENTIFIER ::= { id-ad 12 }

4174	   END
4175	   <CODE ENDS>

4177	A.2.  ASN.1 Module for PBKDF2 PRFs
4178	   <CODE BEGINS>
4179	   PBKDF2-PRFs-2025
4180	     { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
4181	       pkcs-9(9) smime(16) modules(0) id-mod-pbkdf2-prfs-2025(TBD2) }

4183	     DEFINITIONS IMPLICIT TAGS ::= BEGIN

4185	     IMPORTS

4187	     ALGORITHM, AlgorithmIdentifier{}, KEY-DERIVATION
4188	     FROM AlgorithmInformation-2009 -- From [PKIX-ALGS]
4189	         { iso(1) identified-organization(3) dod(6) internet(1)
4190	           security(5) mechanisms(5) pkix(7) id-mod(0)
4191	           id-mod-algorithmInformation-02(58) }

4193	     hMAC-SHA1, alg-hMAC-SHA1, id-PBKDF2
4194	     FROM CryptographicMessageSyntaxAlgorithms-2009 -- From [RFC5911]
4195	         { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
4196	            smime(16) modules(0) id-mod-cmsalg-2001-02(37) }

4198	     id-hmacWithSHA224, id-hmacWithSHA256,
4199	     id-hmacWithSHA384, id-hmacWithSHA512
4200	     FROM HMAC-2010 -- From [HMAC-ALGS]
4201	         { iso(1) identified-organization(3) dod(6) internet(1)
4202	           security(5) mechanisms(5) pkix(7) mod(0) id-mod-hmac(74) } ;

4204	     -- Base OID for algorithms --

4206	     rsadsi OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
4207	         rsadsi(113549) }

4209	     digestAlgorithm OBJECT IDENTIFIER ::= { rsadsi 2 }

4211	     id-hmacWithSHA512-224 OBJECT IDENTIFIER ::= { digestAlgorithm 12 }

4213	     id-hmacWithSHA512-256 OBJECT IDENTIFIER ::= { digestAlgorithm 13 }

4215	     -- PBKF2-PRFs --

4217	     PBKDF2-PRFs ALGORITHM ::= {
4218	         alg-hMAC-SHA1 |
4219	         alg-hMAC-SHA224 | alg-hMAC-SHA256 |
4220	         alg-hMAC-SHA384 | alg-hMAC-SHA512 |
4221	         alg-hMAC-SHA512-224 | alg-hMAC-SHA512-256, ... }

4223	     PBKDF2-PRFsAlgorithmIdentifier ::=
4224	         AlgorithmIdentifier{ ALGORITHM, {PBKDF2-PRFs} }

4226	     alg-hMAC-SHA224 ALGORITHM ::= { IDENTIFIER id-hmacWithSHA224
4227	         PARAMS TYPE NULL ARE preferredAbsent }

4229	     alg-hMAC-SHA256 ALGORITHM ::= { IDENTIFIER id-hmacWithSHA256
4230	         PARAMS TYPE NULL ARE preferredAbsent }

4232	     alg-hMAC-SHA384 ALGORITHM ::= { IDENTIFIER id-hmacWithSHA384
4233	         PARAMS TYPE NULL ARE preferredAbsent }

4235	     alg-hMAC-SHA512 ALGORITHM ::= { IDENTIFIER id-hmacWithSHA512
4236	         PARAMS TYPE NULL ARE preferredAbsent }

4238	     alg-hMAC-SHA512-224 ALGORITHM ::= { IDENTIFIER id-hmacWithSHA512-224
4239	         PARAMS TYPE NULL ARE preferredAbsent }

4241	     alg-hMAC-SHA512-256 ALGORITHM ::= { IDENTIFIER id-hmacWithSHA512-256
4242	         PARAMS TYPE NULL ARE preferredAbsent }

4244	     -- PBKF2-SaltSources --

4246	     PBKDF2-SaltSources ALGORITHM ::= { ... }

4248	     PBKDF2-SaltSourcesAlgorithmIdentifier ::=
4249	         AlgorithmIdentifier {ALGORITHM, {PBKDF2-SaltSources} }

4251	     -- PBKF2-params --

4253	     PBKDF2-params ::= SEQUENCE {
4254	         salt CHOICE {
4255	             specified OCTET STRING,
4256	             otherSource PBKDF2-SaltSourcesAlgorithmIdentifier },
4257	         iterationCount INTEGER (1..MAX),
4258	         keyLength INTEGER (1..MAX) OPTIONAL,
4259	         prf PBKDF2-PRFsAlgorithmIdentifier DEFAULT defaultPBKDF2 }

4261	     defaultPBKDF2 PBKDF2-PRFsAlgorithmIdentifier ::=
4262	         { algorithm alg-hMAC-SHA1.&id, parameters NULL:NULL }

4264	     -- Key Derivation Algorithms --

4266	     KeyDerivationAlgs KEY-DERIVATION ::= { kda-PBKDF2, ... }

4268	     kda-PBKDF2 KEY-DERIVATION ::= {
4269	         IDENTIFIER id-PBKDF2
4270	         PARAMS TYPE PBKDF2-params ARE required
4271	         -- No S/MIME caps defined
4272	     }

4274	   END
4275	   <CODE ENDS>

4277	Appendix B.  Enrollment Message Flows

4279	   This section is informational.  The purpose of this section is to
4280	   present, in an abstracted version, the messages that would flow
4281	   between the client and server for several different common cases.

4283	B.1.  Request of a Signing Certificate

4285	   This section looks at the messages that would flow in the event that
4286	   an enrollment is occurring for a signing-only key.  If the
4287	   certificate was designed for both signing and encryption, the only
4288	   difference would be the key usage extension in the certification
4289	   request.

4291	   Message from client to server:

4293	      ContentInfo.contentType = id-signedData
4294	      ContentInfo.content
4295	        SignedData.encapContentInfo
4296	          eContentType = id-cct-PKIData
4297	          eContent
4298	            controlSequence
4299	              {102, id-cmc-identityProof, computed value}
4300	              {103, id-cmc-senderNonce, 10001}
4301	            reqSequence
4302	              crm
4303	                certReq
4304	                  certReqId = 201
4305	                  certTemplate
4306	                    subject = My Proposed DN
4307	                    publicKey = My Public Key
4308	                    extensions
4309	                      {id-ce-subjectKeyIdentifier, 1000}
4310	                      {id-ce-keyUsage, digitalSignature}
4311	        SignedData.SignerInfos
4312	          SignerInfo
4313	            sid.subjectKeyIdentifier = 1000

4315	   Response from server to client:

4317	      ContentInfo.contentType = id-signedData
4318	      ContentInfo.content
4319	        SignedData.encapContentInfo
4320	          eContentType = id-cct-PKIResponse
4321	          eContent
4322	            controlSequence
4323	              {102, id-cmc-statusInfoV2, {success, 201}}
4324	              {103, id-cmc-senderNonce, 10005}
4325	              {104, id-cmc-recipientNonce, 10001}
4326	        certificates
4327	          Newly issued certificate
4328	          Other certificates
4329	        SignedData.SignerInfos
4330	          Signed by CA

4332	B.2.  Single Certification Request, But Modified by RA

4334	   This section looks at the messages that would flow in the event that
4335	   an enrollment has one RA in the middle of the data flow.  That RA
4336	   will modify the certification request before passing it on to the CA.

4338	   Message from client to RA:

4340	      ContentInfo.contentType = id-signedData
4341	      ContentInfo.content
4342	        SignedData.encapContentInfo
4343	          eContentType = id-cct-PKIData
4344	          eContent
4345	            controlSequence
4346	              {102, id-cmc-identityProof, computed value}
4347	              {103, id-cmc-senderNonce, 10001}
4348	            reqSequence
4349	              crm
4350	                certReq
4351	                  certReqId = 201
4352	                  certTemplate
4353	                    subject = My Proposed DN
4354	                    publicKey = My Public Key
4355	                    extensions
4356	                      {id-ce-subjectKeyIdentifier, 1000}
4357	                      {id-ce-keyUsage, digitalSignature}
4358	        SignedData.SignerInfos
4359	          SignerInfo
4360	            sid.subjectKeyIdentifier = 1000

4362	   Message from RA to CA:

4364	      ContentInfo.contentType = id-signedData
4365	      ContentInfo.content
4366	        SignedData.encapContentInfo
4367	          eContentType = id-cct-PKIData
4368	          eContent
4369	            controlSequence
4370	              { 102, id-cmc-batchRequests, { 1, 2} }
4371	              { 103, id-cmc-addExtensions,
4372	                { {1, 201, {id-ce-certificatePolicies, anyPolicy}}
4373	                  {1, 201, {id-ce-subjectAltName, {extension data}}
4374	                  {2, XXX, {id-ce-subjectAltName, {extension data}}}
4375	                        The Value XXX is not known here; it would
4376	                        reference into the second client request,
4377	                        which is not displayed above.
4378	            cmsSequence
4379	              { 1, <Message from client to RA #1> }
4380	              { 2, <Message from client to RA #2> }
4381	        SignedData.SignerInfos
4382	          SignerInfo
4383	            sid = RA key.

4385	   Response from CA to RA:

4387	      ContentInfo.contentType = id-signedData
4388	      ContentInfo.content
4389	        SignedData.encapContentInfo
4390	          eContentType = id-cct-PKIResponse
4391	          eContent
4392	            controlSequence
4393	              {102, id-cmc-BatchResponse, {999, 998}}

4395	              {103, id-cmc-statusInfoV2, {failed, 2, badIdentity}}
4396	            cmsSequence
4397	              { bodyPartID = 999
4398	                contentInfo
4399	                  ContentInfo.contentType = id-signedData
4400	                  ContentInfo.content
4401	                    SignedData.encapContentInfo
4402	                      eContentType = id-cct-PKIResponse
4403	                      eContent
4404	                        controlSequence
4405	                         {102, id-cmc-statusInfoV2, {success, 201}}
4406	                    certificates
4407	                      Newly issued certificate
4408	                      Other certificates
4409	                    SignedData.SignerInfos
4410	                      Signed by CA
4411	              }
4412	              { bodyPartID = 998,
4413	                contentInfo
4414	                  ContentInfo.contentType = id-signedData
4415	                  ContentInfo.content
4416	                    SignedData.encapContentInfo
4417	                      eContentType = id-cct-PKIResponse
4418	                      eContent
4419	                        controlSequence
4420	                          {102, id-cmc-statusInfoV2, {failure, badAlg}}
4421	                    certificates
4422	                      Newly issued certificate
4423	                      Other certificates
4424	                    SignedData.SignerInfos
4425	                      Signed by CA
4426	              }
4427	            SignedData.SignerInfos
4428	              Signed by CA

4430	   Response from RA to client:

4432	      ContentInfo.contentType = id-signedData
4433	      ContentInfo.content
4434	        SignedData.encapContentInfo
4435	          eContentType = id-cct-PKIResponse
4436	          eContent
4437	            controlSequence
4438	              {102, id-cmc-statusInfoV2, {success, 201}}
4439	        certificates
4440	          Newly issued certificate
4441	          Other certificates
4442	        SignedData.SignerInfos
4443	          Signed by CA

4445	B.3.  Direct POP for an RSA or KEM Certificate

4447	   This section looks at the messages that would flow in the event that
4448	   an enrollment is done for an encryption-only certificate using a
4449	   direct POP method; the example below shows.  For simplicity, it is
4450	   assumed that the certification requester already has a signature
4451	   certificate.

4453	   Message #1 from client to server:

4455	     ContentInfo.contentType = id-signedData
4456	     ContentInfo.content
4457	       SignedData.encapContentInfo
4458	         eContentType = id-cct-PKIData
4459	         eContent
4460	           controlSequence
4461	             {102, id-cmc-transactionId, 10132985123483401}
4462	             {103, id-cmc-senderNonce, 10001}
4463	             {104, id-cmc-dataReturn, <packet of binary data identifying
4464	                                       where the key in question is.>}
4465	           reqSequence
4466	             crm
4467	               certReq
4468	                 certReqId = 201
4469	                 certTemplate
4470	                   subject = <My DN>
4471	                   publicKey = My Public Key
4472	                   extensions
4473	                     {id-ce-keyUsage, keyEncipherment}
4474	                     {id-ce-subjectPublicKeyIdentifier, 1000}
4475	               popo
4476	                 keyEncipherment
4477	                   subsequentMessage = challengeResp
4478	       SignedData.SignerInfos
4479	         SignerInfo
4480	           Signed by requester's signing cert

4482	   Response #1 from server to client:

4484	   ContentInfo.contentType = id-signedData
4485	   ContentInfo.content
4486	     SignedData.encapContentInfo
4487	       eContentType = id-cct-PKIResponse
4488	       eContent
4489	         controlSequence
4490	           {101, id-cmc-statusInfoV2, {failed, 201, popRequired}}
4491	           {102, id-cmc-transactionId, 10132985123483401}
4492	           {103, id-cmc-senderNonce, 10005}
4493	           {104, id-cmc-recipientNonce, 10001}
4494	           {105, id-cmc-encryptedPOP, {
4495	              request {
4496	                crm
4497	                  certReq
4498	                    certReqId = 201
4499	                     certTemplate
4500	                       subject = <My DN>
4501	                       publicKey = My Public Key
4502	                       extensions
4503	                         {id-ce-keyUsage, keyEncipherment}
4504	                         {id-ce-subjectPublicKeyIdentifier, 1000}
4505	                   popo
4506	                     keyEncipherment
4507	                       subsequentMessage = challengeResp
4508	              }
4509	              cms
4510	                contentType = id-envelopedData
4511	                content
4512	                  recipientInfos.rid.issuerSerialNumber = <NULL-DN, 201>
4513	                  encryptedContentInfo
4514	                    eContentType = id-data
4515	                    eContent = <Encrypted value of 'y' from Section 6.7>
4516	              thePOPAlgID = HMAC-SHA256
4517	              witnessAlgID = SHA-256
4518	              witness <hashed value of 'y' from Section 6.7>}}
4519	           {106, id-cmc-dataReturn, <packet of binary data identifying
4520	                                     where the key in question is.>}
4521	     certificates
4522	       Other certificates
4523	         (optional - related to this message's SignedData)
4524	     SignedData.SignerInfos
4525	       Signed by CA

4527	   Message #2 from client to server:

4529	     ContentInfo.contentType = id-signedData
4530	     ContentInfo.content
4531	       SignedData.encapContentInfo
4532	         eContentType = id-cct-PKIData
4533	         eContent
4534	           controlSequence
4535	             {102, id-cmc-transactionId, 10132985123483401}
4536	             {103, id-cmc-senderNonce, 100101}
4537	             {104, id-cmc-dataReturn, <packet of binary data identifying
4538	                                       where the key in question is.>}
4539	             {105, id-cmc-recipientNonce, 10005}
4540	             {107, id-cmc-decryptedPOP, {
4541	               bodyPartID 201,
4542	               thePOPAlgID HMAC-SHA256,
4543	               thePOP <HMAC computed value goes here>}}
4544	           reqSequence
4545	             crm
4546	               certReq
4547	                 certReqId = 201
4548	                 certTemplate
4549	                   subject = <My DN>
4550	                   publicKey = My Public Key
4551	                   extensions
4552	                     {id-ce-keyUsage, keyEncipherment}
4553	                     {id-ce-subjectKeyIdentifier, 1000}
4554	               popo
4555	                 keyEncipherment
4556	                   subsequentMessage = challengeResp
4557	       SignedData.SignerInfos
4558	         SignerInfo
4559	           Signed by requester's signing cert

4561	   Response #2 from server to client:

4563	     ContentInfo.contentType = id-signedData
4564	     ContentInfo.content
4565	       SignedData.encapContentInfo
4566	         eContentType = id-cct-PKIResponse
4567	         eContent
4568	           controlSequence
4569	             {101, id-cmc-transactionId, 10132985123483401}
4570	             {102, id-cmc-statusInfoV2, {success, 201}}
4571	             {103, id-cmc-senderNonce, 10019}
4572	             {104, id-cmc-recipientNonce, 100101}
4573	             {105, id-cmc-dataReturn, <packet of binary data identifying
4574	                                       where the key in question is.>}
4575	       certificates
4576	         Newly issued certificate
4577	         Other certificates
4578	           (optional - related to this message's SignedData)
4579	       SignedData.SignerInfos
4580	         Signed by CA

4582	B.4.  Direct POP with No Signature Mechanism

4584	   This section looks at the messages that would flow in the event that
4585	   an enrollment is done for an encryption-only certificate using a
4586	   direct POP method.  Instead of assuming that the certification
4587	   requester already has a signing-only certificate as in Appendix B.3,
4588	   here the No Signature mechanism from Appendix C.1, the public key is
4589	   for a KEM, and the EnvelopedData uses the KEMRecipientInfo from
4590	   [CMS-RI].

4592	   Message #1 from client to server:

4594	     ContentInfo.contentType = id-signedData
4595	     ContentInfo.content
4596	       SignedData.encapContentInfo
4597	         eContentType = id-cct-PKIData
4598	         eContent
4599	           controlSequence
4600	             {102, id-cmc-transactionId, 10132985123483401}
4601	             {103, id-cmc-senderNonce, 10001}
4602	             {104, id-cmc-dataReturn, <packet of binary data identifying
4603	                                       where the key in question is.>}
4604	           reqSequence
4605	             crm
4606	               certReq
4607	                 certReqId = 201
4608	                 certTemplate
4609	                   subject = < My DN >
4610	                   publicKey = My Public Key
4611	                   extensions
4612	                     {id-ce-subjectPublicKeyIdentifier, 1000}
4613	                     {id-ce-keyUsage, keyEncipherment}
4614	               popo
4615	                 keyEncipherment
4616	                   subsequentMessage = challengeResp
4617	       SignedData.SignerInfos
4618	        SignerInfo
4619	          sid = < subjectKeyIdentifier >
4620	          signatureAlgorithm = id-alg-noSignature

4622	   Response #1 from server to client:

4624	   ContentInfo.contentType = id-signedData
4625	   ContentInfo.content
4626	     SignedData.encapContentInfo
4627	       eContentType = id-cct-PKIResponse
4628	       eContent
4629	         controlSequence
4630	           {101, id-cmc-statusInfoV2, {failed, 201, popRequired}}
4631	           {102, id-cmc-transactionId, 10132985123483401}
4632	           {103, id-cmc-senderNonce, 10005}
4633	           {104, id-cmc-recipientNonce, 10001}
4634	           {105, id-cmc-encryptedPOP, {
4635	              request {
4636	                crm
4637	                  certReq
4638	                    certReqId = 201
4639	                     certTemplate
4640	                       subject = < My DN >
4641	                       publicKey = My Public Key
4642	                       extensions
4643	                         {id-ce-keyUsage, keyEncipherment}
4644	                         {id-ce-subjectPublicKeyIdentifier, 1000}
4645	                   popo
4646	                     keyEncipherment
4647	                       subsequentMessage = challengeResp
4648	              }
4649	              cms
4650	                contentType = id-envelopedData
4651	                content < uses ori.KEMRecipientInfo >
4652	                  recipientInfos.ori.rid.issuerSerialNumber =
4653	                    <NULL-DN, 201>
4654	                  encryptedContentInfo
4655	                    eContentType = id-data
4656	                    eContent = <Encrypted value of 'y' from Section 6.7>
4657	       thePOPAlgID = KmacWithSHAKE128
4658	       witnessAlgID = SHAKE128
4659	       witness <hashed value of 'y' from Section 6.7>}}
4660	           {106, id-cmc-dataReturn, <packet of binary data identifying
4661	                                     where the key in question is.>}
4662	     Certificates
4663	       Other certificates
4664	         (optional - related to this message's SignedData)
4665	     SignedData.SignerInfos
4666	       Signed by CA

4668	   Message #2 from client to server:

4670	     ContentInfo.contentType = id-signedData
4671	     ContentInfo.content
4672	       SignedData.encapContentInfo
4673	         eContentType = id-cct-PKIData
4674	         eContent
4675	           controlSequence
4676	             {102, id-cmc-transactionId, 10132985123483401}
4677	             {103, id-cmc-senderNonce, 100101}
4678	             {104, id-cmc-dataReturn, <packet of binary data identifying
4679	                                       where the key in question is.>}
4680	             {105, id-cmc-recipientNonce, 10005}
4681	             {107, id-cmc-decryptedPOP, {
4682	               bodyPartID 201,
4683	               thePOPAlgID KmacWithSHAKE128,
4684	               thePOP <KMAC computed value goes here>}}
4685	           reqSequence
4686	             crm
4687	               certReq
4688	                 certReqId = 201
4689	                 certTemplate
4690	                   subject = < My DN >
4691	                   publicKey = My Public Key
4692	                   extensions
4693	                     {id-ce-keyUsage, keyEncipherment}
4694	                     {id-ce-subjectPublicKeyIdentifier, 1000}
4695	               popo
4696	                 keyEncipherment
4697	                   subsequentMessage = challengeResp
4698	       SignedData.SignerInfos
4699	         SignerInfo
4700	           sid = < subjectKeyIdentifier >
4701	           signatureAlgorithm = id-alg-noSignature

4703	   Response #2 from server to client:

4705	     ContentInfo.contentType = id-signedData
4706	     ContentInfo.content
4707	       SignedData.encapContentInfo
4708	         eContentType = id-cct-PKIResponse
4709	         eContent
4710	           controlSequence
4711	             {101, id-cmc-transactionId, 10132985123483401}
4712	             {102, id-cmc-statusInfoV2, {success, 201}}
4713	             {103, id-cmc-senderNonce, 10019}
4714	             {104, id-cmc-recipientNonce, 100101}
4715	             {105, id-cmc-dataReturn, <packet of binary data identifying
4716	                                       where the key in question is.>}
4717	       certificates
4718	         Newly issued certificate
4719	         Other certificates
4720	       SignedData.SignerInfos
4721	         Signed by CA

4723	Appendix C.  Production of Diffie-Hellman Public Key Certification
4724	             Requests

4726	   Part of a certification request is a signature over the request; DH
4727	   and ECDH are key agreement algorithms and RSA-KEM and ML-KEM are key
4728	   encapsulation mechanisms (KEM) and cannot be used to directly produce
4729	   the required signature object.  [DH-POP] provides three ways to
4730	   produce the necessary signature value.  This document also defines a
4731	   signature algorithm that does not provide a POP value, but can be
4732	   used to produce the necessary signature value.

4734	C.1.  No-Signature Signature Mechanism

4736	   Key management (encryption/decryption) private keys cannot always be
4737	   used to produce some type of signature value as they can be in a
4738	   decrypt-only device.  Certification requests require that the
4739	   signature field be populated.  This section provides a signature
4740	   algorithm specifically for that purposes.  The following object
4741	   identifier and signature value are used to identify this signature
4742	   type:

4744	     id-alg-noSignature OBJECT IDENTIFIER ::= { id-pkix id-alg(6) 2 }

4746	     NoSignatureValue ::= OCTET STRING

4748	   The parameters for id-alg-noSignature MUST be present and MUST be
4749	   encoded as NULL.  NoSignatureValue contains the SHA-1 hash of the
4750	   certification request.  The hash value given by NoSignatureValue
4751	   SHOULD be ignored.  It is important to realize that there is no
4752	   security associated with this signature type.  If this signature type
4753	   is on a certification request and the Certification Authority policy
4754	   requires proof-of-possession of the private key, the POP mechanism
4755	   defined in Section 6.7 MUST be used.

4757	   When the client generates the SignedData.SignerInfos.SignerInfo.sid
4758	   field it has two choices: issuerAndSerialNumber or
4759	   subjectKeyIdentifier.  The client does not yet have a certificate and
4760	   there cannot fill in the issuerAndSerialNumber and therefore MUST use
4761	   the subjectKeyIdentifier choice.

4763	Acknowledgments

4765	   Obviously, the authors of this version of the document would like to
4766	   thank Jim Schaad and Michael Myers for their work on the previous
4767	   version of this document.

4769	   The acknowledgment from the previous version of this document
4770	   follows:

4772	   The authors and the PKIX Working Group are grateful for the
4773	   participation of Xiaoyi Liu and Jeff Weinstein in helping to author
4774	   the original versions of this document.

4776	   The authors would like to thank Brian LaMacchia for his work in
4777	   developing and writing up many of the concepts presented in this
4778	   document.  The authors would also like to thank Alex Deacon and Barb
4779	   Fox for their contributions.

4781	Contributors

4783	   Jim Schaad
4784	   August Cellars

4786	   Michael Myers
4787	   TraceRoute Security, Inc.

4789	Authors' Addresses

4791	   Joseph Mandel (editor)
4792	   AKAYLA, Inc.
4793	   Email: joe@akayla.com

4795	   Sean Turner (editor)
4796	   sn3rd
4797	   Email: sean@sn3rd.com









